
STM32F769-SPSGRF868.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e98  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006258  08006258  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006260  08006260  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006260  08006260  00016260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08006268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200000dc  08006344  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08006344  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cee4  00000000  00000000  0002010a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004490  00000000  00000000  0003cfee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001500  00000000  00000000  00041480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012f8  00000000  00000000  00042980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031e86  00000000  00000000  00043c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000122be  00000000  00000000  00075afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011d74e  00000000  00000000  00087dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a550a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005218  00000000  00000000  001a5588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200000dc 	.word	0x200000dc
 8000214:	00000000 	.word	0x00000000
 8000218:	08006078 	.word	0x08006078

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200000e0 	.word	0x200000e0
 8000234:	08006078 	.word	0x08006078

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_GPIO_Init+0x74>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a1a      	ldr	r2, [pc, #104]	; (80005ac <MX_GPIO_Init+0x74>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_GPIO_Init+0x74>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_GPIO_Init+0x74>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a14      	ldr	r2, [pc, #80]	; (80005ac <MX_GPIO_Init+0x74>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_GPIO_Init+0x74>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_GPIO_Init+0x74>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <MX_GPIO_Init+0x74>)
 8000574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_GPIO_Init+0x74>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_GPIO_Init+0x74>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a08      	ldr	r2, [pc, #32]	; (80005ac <MX_GPIO_Init+0x74>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_GPIO_Init+0x74>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f003 ff22 	bl	80043fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f822 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f7ff ffbc 	bl	8000538 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */

#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  RadioShieldLedInit(RADIO_SHIELD_LED);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f003 fb31 	bl	8003c28 <RadioShieldLedInit>
#endif

  BSP_LED_Init(LED_GREEN);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 fb60 	bl	8000c8c <BSP_LED_Init>
  HAL_Radio_Init();
 80005cc:	f000 f890 	bl	80006f0 <HAL_Spirit1_Init>

  /* Initialize Buttons*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005d0:	2101      	movs	r1, #1
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 fbbe 	bl	8000d54 <BSP_PB_Init>

  P2P_Init();
 80005d8:	f000 fa98 	bl	8000b0c <P2P_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* Data communication start */
	P2P_Process(aTransmitBuffer, TxLength, aReceiveBuffer, RxLength);
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <main+0x40>)
 80005de:	7819      	ldrb	r1, [r3, #0]
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <main+0x44>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <main+0x48>)
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <main+0x4c>)
 80005e8:	f000 f892 	bl	8000710 <P2P_Process>
 80005ec:	e7f6      	b.n	80005dc <main+0x2c>
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000
 80005f4:	200000f8 	.word	0x200000f8
 80005f8:	200000fc 	.word	0x200000fc
 80005fc:	20000004 	.word	0x20000004

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	; 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 fce4 	bl	8005fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f004 faa2 	bl	8004b6c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemClock_Config+0xd8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a2a      	ldr	r2, [pc, #168]	; (80006d8 <SystemClock_Config+0xd8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xd8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemClock_Config+0xdc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a25      	ldr	r2, [pc, #148]	; (80006dc <SystemClock_Config+0xdc>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemClock_Config+0xdc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800066c:	2319      	movs	r3, #25
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000670:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fad2 	bl	8004c2c <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800068e:	f000 f827 	bl	80006e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000692:	f004 fa7b 	bl	8004b8c <HAL_PWREx_EnableOverDrive>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800069c:	f000 f820 	bl	80006e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	2107      	movs	r1, #7
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fd62 	bl	8005188 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006ca:	f000 f809 	bl	80006e0 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <HAL_Spirit1_Init>:
* @brief  Initializes RF Transceiver's HAL.
* @param  None
* @retval None.
*/
void HAL_Radio_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  pRadioDriver = &radio_cb;
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <HAL_Spirit1_Init+0x18>)
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <HAL_Spirit1_Init+0x1c>)
 80006f8:	601a      	str	r2, [r3, #0]
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  pRadioDriver->Init( ); 
 80006fa:	4b03      	ldr	r3, [pc, #12]	; (8000708 <HAL_Spirit1_Init+0x18>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4798      	blx	r3
#endif
#if defined(X_NUCLEO_S2868A1) || defined(X_NUCLEO_S2915A1)
  S2LPInterfaceInit(); 
#endif
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200001fc 	.word	0x200001fc
 800070c:	20000018 	.word	0x20000018

08000710 <P2P_Process>:
*         uint8_t* pRxBuff = Pointer to aReceiveBuffer
*         uint8_t cRxlen= length of aReceiveBuffer
* @retval None.
*/
void P2P_Process(uint8_t *pTxBuff, uint8_t cTxlen, uint8_t* pRxBuff, uint8_t cRxlen)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	607a      	str	r2, [r7, #4]
 800071a:	461a      	mov	r2, r3
 800071c:	460b      	mov	r3, r1
 800071e:	72fb      	strb	r3, [r7, #11]
 8000720:	4613      	mov	r3, r2
 8000722:	72bb      	strb	r3, [r7, #10]
  uint8_t xIndex = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	75fb      	strb	r3, [r7, #23]
  uint8_t ledToggleCtr = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	75bb      	strb	r3, [r7, #22]
  uint8_t  dest_addr;
  /*float rRSSIValue = 0;*/
  
  switch(SM_State)
 800072c:	4b98      	ldr	r3, [pc, #608]	; (8000990 <P2P_Process+0x280>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b04      	cmp	r3, #4
 8000732:	f000 80da 	beq.w	80008ea <P2P_Process+0x1da>
 8000736:	2b04      	cmp	r3, #4
 8000738:	dc0c      	bgt.n	8000754 <P2P_Process+0x44>
 800073a:	2b01      	cmp	r3, #1
 800073c:	d020      	beq.n	8000780 <P2P_Process+0x70>
 800073e:	2b01      	cmp	r3, #1
 8000740:	dc02      	bgt.n	8000748 <P2P_Process+0x38>
 8000742:	2b00      	cmp	r3, #0
 8000744:	d013      	beq.n	800076e <P2P_Process+0x5e>
#if defined(USE_LOW_POWER_MODE)
    Enter_LP_mode();
#endif     
    break;
  }
}
 8000746:	e11f      	b.n	8000988 <P2P_Process+0x278>
  switch(SM_State)
 8000748:	2b02      	cmp	r3, #2
 800074a:	d04a      	beq.n	80007e2 <P2P_Process+0xd2>
 800074c:	2b03      	cmp	r3, #3
 800074e:	f000 80aa 	beq.w	80008a6 <P2P_Process+0x196>
}
 8000752:	e119      	b.n	8000988 <P2P_Process+0x278>
  switch(SM_State)
 8000754:	2b06      	cmp	r3, #6
 8000756:	f000 8086 	beq.w	8000866 <P2P_Process+0x156>
 800075a:	2b06      	cmp	r3, #6
 800075c:	f2c0 80e6 	blt.w	800092c <P2P_Process+0x21c>
 8000760:	2b07      	cmp	r3, #7
 8000762:	f000 80ea 	beq.w	800093a <P2P_Process+0x22a>
 8000766:	2bff      	cmp	r3, #255	; 0xff
 8000768:	f000 80ff 	beq.w	800096a <P2P_Process+0x25a>
}
 800076c:	e10c      	b.n	8000988 <P2P_Process+0x278>
      AppliReceiveBuff(pRxBuff, cRxlen);
 800076e:	7abb      	ldrb	r3, [r7, #10]
 8000770:	4619      	mov	r1, r3
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f000 f988 	bl	8000a88 <AppliReceiveBuff>
      SM_State = SM_STATE_WAIT_FOR_RX_DONE;    
 8000778:	4b85      	ldr	r3, [pc, #532]	; (8000990 <P2P_Process+0x280>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
    break;
 800077e:	e103      	b.n	8000988 <P2P_Process+0x278>
    if((RESET != xRxDoneFlag)||(RESET != rx_timeout)||(SET != exitTime))
 8000780:	4b84      	ldr	r3, [pc, #528]	; (8000994 <P2P_Process+0x284>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10a      	bne.n	80007a0 <P2P_Process+0x90>
 800078a:	4b83      	ldr	r3, [pc, #524]	; (8000998 <P2P_Process+0x288>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d105      	bne.n	80007a0 <P2P_Process+0x90>
 8000794:	4b81      	ldr	r3, [pc, #516]	; (800099c <P2P_Process+0x28c>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b01      	cmp	r3, #1
 800079c:	f000 80ef 	beq.w	800097e <P2P_Process+0x26e>
      if((rx_timeout==SET)||(exitTime==RESET))
 80007a0:	4b7d      	ldr	r3, [pc, #500]	; (8000998 <P2P_Process+0x288>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d004      	beq.n	80007b4 <P2P_Process+0xa4>
 80007aa:	4b7c      	ldr	r3, [pc, #496]	; (800099c <P2P_Process+0x28c>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d109      	bne.n	80007c8 <P2P_Process+0xb8>
        rx_timeout = RESET;
 80007b4:	4b78      	ldr	r3, [pc, #480]	; (8000998 <P2P_Process+0x288>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
        BSP_LED_Toggle(LED_GREEN);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 fab0 	bl	8000d20 <BSP_LED_Toggle>
        SM_State = SM_STATE_START_RX;
 80007c0:	4b73      	ldr	r3, [pc, #460]	; (8000990 <P2P_Process+0x280>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
    break;
 80007c6:	e0da      	b.n	800097e <P2P_Process+0x26e>
      else if(xRxDoneFlag) 
 80007c8:	4b72      	ldr	r3, [pc, #456]	; (8000994 <P2P_Process+0x284>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	f000 80d5 	beq.w	800097e <P2P_Process+0x26e>
        xRxDoneFlag=RESET;
 80007d4:	4b6f      	ldr	r3, [pc, #444]	; (8000994 <P2P_Process+0x284>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
        SM_State = SM_STATE_DATA_RECEIVED;
 80007da:	4b6d      	ldr	r3, [pc, #436]	; (8000990 <P2P_Process+0x280>)
 80007dc:	2202      	movs	r2, #2
 80007de:	701a      	strb	r2, [r3, #0]
    break;
 80007e0:	e0cd      	b.n	800097e <P2P_Process+0x26e>
      pRadioDriver->GetRxPacket(pRxBuff,&cRxlen); 
 80007e2:	4b6f      	ldr	r3, [pc, #444]	; (80009a0 <P2P_Process+0x290>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f107 020a 	add.w	r2, r7, #10
 80007ec:	4611      	mov	r1, r2
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	4798      	blx	r3
      xRxFrame.Cmd = pRxBuff[0];
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	4b6b      	ldr	r3, [pc, #428]	; (80009a4 <P2P_Process+0x294>)
 80007f8:	70da      	strb	r2, [r3, #3]
      xRxFrame.CmdLen = pRxBuff[1];
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	785a      	ldrb	r2, [r3, #1]
 80007fe:	4b69      	ldr	r3, [pc, #420]	; (80009a4 <P2P_Process+0x294>)
 8000800:	709a      	strb	r2, [r3, #2]
      xRxFrame.Cmdtag = pRxBuff[2];
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	789a      	ldrb	r2, [r3, #2]
 8000806:	4b67      	ldr	r3, [pc, #412]	; (80009a4 <P2P_Process+0x294>)
 8000808:	701a      	strb	r2, [r3, #0]
      xRxFrame.CmdType = pRxBuff[3];
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	78da      	ldrb	r2, [r3, #3]
 800080e:	4b65      	ldr	r3, [pc, #404]	; (80009a4 <P2P_Process+0x294>)
 8000810:	705a      	strb	r2, [r3, #1]
      xRxFrame.DataLen = pRxBuff[4];
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	791a      	ldrb	r2, [r3, #4]
 8000816:	4b63      	ldr	r3, [pc, #396]	; (80009a4 <P2P_Process+0x294>)
 8000818:	711a      	strb	r2, [r3, #4]
      for (xIndex = 5; xIndex < cRxlen; xIndex++)
 800081a:	2305      	movs	r3, #5
 800081c:	75fb      	strb	r3, [r7, #23]
 800081e:	e00b      	b.n	8000838 <P2P_Process+0x128>
        xRxFrame.DataBuff[xIndex] = pRxBuff[xIndex];
 8000820:	7dfb      	ldrb	r3, [r7, #23]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	441a      	add	r2, r3
 8000826:	4b5f      	ldr	r3, [pc, #380]	; (80009a4 <P2P_Process+0x294>)
 8000828:	6899      	ldr	r1, [r3, #8]
 800082a:	7dfb      	ldrb	r3, [r7, #23]
 800082c:	440b      	add	r3, r1
 800082e:	7812      	ldrb	r2, [r2, #0]
 8000830:	701a      	strb	r2, [r3, #0]
      for (xIndex = 5; xIndex < cRxlen; xIndex++)
 8000832:	7dfb      	ldrb	r3, [r7, #23]
 8000834:	3301      	adds	r3, #1
 8000836:	75fb      	strb	r3, [r7, #23]
 8000838:	7abb      	ldrb	r3, [r7, #10]
 800083a:	7dfa      	ldrb	r2, [r7, #23]
 800083c:	429a      	cmp	r2, r3
 800083e:	d3ef      	bcc.n	8000820 <P2P_Process+0x110>
      if(xRxFrame.Cmd == LED_TOGGLE)
 8000840:	4b58      	ldr	r3, [pc, #352]	; (80009a4 <P2P_Process+0x294>)
 8000842:	78db      	ldrb	r3, [r3, #3]
 8000844:	2bff      	cmp	r3, #255	; 0xff
 8000846:	d102      	bne.n	800084e <P2P_Process+0x13e>
        SM_State = SM_STATE_TOGGLE_LED; 
 8000848:	4b51      	ldr	r3, [pc, #324]	; (8000990 <P2P_Process+0x280>)
 800084a:	2207      	movs	r2, #7
 800084c:	701a      	strb	r2, [r3, #0]
      if(xRxFrame.Cmd == ACK_OK)
 800084e:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <P2P_Process+0x294>)
 8000850:	78db      	ldrb	r3, [r3, #3]
 8000852:	2b01      	cmp	r3, #1
 8000854:	f040 8095 	bne.w	8000982 <P2P_Process+0x272>
        HAL_Delay(DELAY_TX_LED_GLOW); 
 8000858:	20c8      	movs	r0, #200	; 0xc8
 800085a:	f003 fe2d 	bl	80044b8 <HAL_Delay>
        SM_State = SM_STATE_ACK_RECEIVED;
 800085e:	4b4c      	ldr	r3, [pc, #304]	; (8000990 <P2P_Process+0x280>)
 8000860:	2205      	movs	r2, #5
 8000862:	701a      	strb	r2, [r3, #0]
    break;
 8000864:	e08d      	b.n	8000982 <P2P_Process+0x272>
      xTxFrame.Cmd = ACK_OK;
 8000866:	4b50      	ldr	r3, [pc, #320]	; (80009a8 <P2P_Process+0x298>)
 8000868:	2201      	movs	r2, #1
 800086a:	70da      	strb	r2, [r3, #3]
      xTxFrame.CmdLen = 0x01;
 800086c:	4b4e      	ldr	r3, [pc, #312]	; (80009a8 <P2P_Process+0x298>)
 800086e:	2201      	movs	r2, #1
 8000870:	709a      	strb	r2, [r3, #2]
      xTxFrame.Cmdtag = xRxFrame.Cmdtag;
 8000872:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <P2P_Process+0x294>)
 8000874:	781a      	ldrb	r2, [r3, #0]
 8000876:	4b4c      	ldr	r3, [pc, #304]	; (80009a8 <P2P_Process+0x298>)
 8000878:	701a      	strb	r2, [r3, #0]
      xTxFrame.CmdType = APPLI_CMD;
 800087a:	4b4b      	ldr	r3, [pc, #300]	; (80009a8 <P2P_Process+0x298>)
 800087c:	2211      	movs	r2, #17
 800087e:	705a      	strb	r2, [r3, #1]
      xTxFrame.DataBuff = pTxBuff;
 8000880:	4a49      	ldr	r2, [pc, #292]	; (80009a8 <P2P_Process+0x298>)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6093      	str	r3, [r2, #8]
      xTxFrame.DataLen = cTxlen;
 8000886:	4a48      	ldr	r2, [pc, #288]	; (80009a8 <P2P_Process+0x298>)
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	7113      	strb	r3, [r2, #4]
      HAL_Delay(DELAY_TX_LED_GLOW);        
 800088c:	20c8      	movs	r0, #200	; 0xc8
 800088e:	f003 fe13 	bl	80044b8 <HAL_Delay>
      AppliSendBuff(&xTxFrame, xTxFrame.DataLen);   
 8000892:	4b45      	ldr	r3, [pc, #276]	; (80009a8 <P2P_Process+0x298>)
 8000894:	791b      	ldrb	r3, [r3, #4]
 8000896:	4619      	mov	r1, r3
 8000898:	4843      	ldr	r0, [pc, #268]	; (80009a8 <P2P_Process+0x298>)
 800089a:	f000 f88b 	bl	80009b4 <AppliSendBuff>
      SM_State = SM_STATE_WAIT_FOR_TX_DONE;
 800089e:	4b3c      	ldr	r3, [pc, #240]	; (8000990 <P2P_Process+0x280>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	701a      	strb	r2, [r3, #0]
    break;   
 80008a4:	e070      	b.n	8000988 <P2P_Process+0x278>
      xTxFrame.Cmd = LED_TOGGLE;
 80008a6:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <P2P_Process+0x298>)
 80008a8:	22ff      	movs	r2, #255	; 0xff
 80008aa:	70da      	strb	r2, [r3, #3]
      xTxFrame.CmdLen = 0x01;
 80008ac:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <P2P_Process+0x298>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	709a      	strb	r2, [r3, #2]
      xTxFrame.Cmdtag = txCounter++;
 80008b2:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <P2P_Process+0x29c>)
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	b291      	uxth	r1, r2
 80008ba:	4a3c      	ldr	r2, [pc, #240]	; (80009ac <P2P_Process+0x29c>)
 80008bc:	8011      	strh	r1, [r2, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b39      	ldr	r3, [pc, #228]	; (80009a8 <P2P_Process+0x298>)
 80008c2:	701a      	strb	r2, [r3, #0]
      xTxFrame.CmdType = APPLI_CMD;
 80008c4:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <P2P_Process+0x298>)
 80008c6:	2211      	movs	r2, #17
 80008c8:	705a      	strb	r2, [r3, #1]
      xTxFrame.DataBuff = pTxBuff;
 80008ca:	4a37      	ldr	r2, [pc, #220]	; (80009a8 <P2P_Process+0x298>)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6093      	str	r3, [r2, #8]
      xTxFrame.DataLen = cTxlen;
 80008d0:	4a35      	ldr	r2, [pc, #212]	; (80009a8 <P2P_Process+0x298>)
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	7113      	strb	r3, [r2, #4]
      AppliSendBuff(&xTxFrame, xTxFrame.DataLen);
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <P2P_Process+0x298>)
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	4619      	mov	r1, r3
 80008dc:	4832      	ldr	r0, [pc, #200]	; (80009a8 <P2P_Process+0x298>)
 80008de:	f000 f869 	bl	80009b4 <AppliSendBuff>
      SM_State = SM_STATE_WAIT_FOR_TX_DONE;
 80008e2:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <P2P_Process+0x280>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	701a      	strb	r2, [r3, #0]
    break;
 80008e8:	e04e      	b.n	8000988 <P2P_Process+0x278>
    if(xTxDoneFlag)
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <P2P_Process+0x2a0>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d048      	beq.n	8000986 <P2P_Process+0x276>
      xTxDoneFlag = RESET;
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <P2P_Process+0x2a0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
      if(xTxFrame.Cmd == LED_TOGGLE)
 80008fa:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <P2P_Process+0x298>)
 80008fc:	78db      	ldrb	r3, [r3, #3]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d103      	bne.n	800090a <P2P_Process+0x1fa>
        SM_State = SM_STATE_START_RX;
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <P2P_Process+0x280>)
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
    break;
 8000908:	e03d      	b.n	8000986 <P2P_Process+0x276>
      else if(xTxFrame.Cmd == ACK_OK)
 800090a:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <P2P_Process+0x298>)
 800090c:	78db      	ldrb	r3, [r3, #3]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d139      	bne.n	8000986 <P2P_Process+0x276>
        SM_State = SM_STATE_IDLE;  
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <P2P_Process+0x280>)
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	701a      	strb	r2, [r3, #0]
    break;
 8000918:	e035      	b.n	8000986 <P2P_Process+0x276>
      RadioShieldLedToggle(RADIO_SHIELD_LED);
 800091a:	2000      	movs	r0, #0
 800091c:	f003 f9dc 	bl	8003cd8 <RadioShieldLedToggle>
      HAL_Delay(DELAY_RX_LED_TOGGLE);
 8000920:	2064      	movs	r0, #100	; 0x64
 8000922:	f003 fdc9 	bl	80044b8 <HAL_Delay>
    for(; ledToggleCtr<5; ledToggleCtr++)
 8000926:	7dbb      	ldrb	r3, [r7, #22]
 8000928:	3301      	adds	r3, #1
 800092a:	75bb      	strb	r3, [r7, #22]
 800092c:	7dbb      	ldrb	r3, [r7, #22]
 800092e:	2b04      	cmp	r3, #4
 8000930:	d9f3      	bls.n	800091a <P2P_Process+0x20a>
    SM_State = SM_STATE_IDLE;   
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <P2P_Process+0x280>)
 8000934:	22ff      	movs	r2, #255	; 0xff
 8000936:	701a      	strb	r2, [r3, #0]
    break;
 8000938:	e026      	b.n	8000988 <P2P_Process+0x278>
    RadioShieldLedOn(RADIO_SHIELD_LED);
 800093a:	2000      	movs	r0, #0
 800093c:	f003 f9a0 	bl	8003c80 <RadioShieldLedOn>
    dest_addr = RadioGetReceivedDestinationAddress();
 8000940:	f001 fa12 	bl	8001d68 <SpiritPktCommonGetReceivedDestAddress>
 8000944:	4603      	mov	r3, r0
 8000946:	757b      	strb	r3, [r7, #21]
    if ((dest_addr == MULTICAST_ADDRESS) || (dest_addr == BROADCAST_ADDRESS))
 8000948:	7d7b      	ldrb	r3, [r7, #21]
 800094a:	2bee      	cmp	r3, #238	; 0xee
 800094c:	d002      	beq.n	8000954 <P2P_Process+0x244>
 800094e:	7d7b      	ldrb	r3, [r7, #21]
 8000950:	2bff      	cmp	r3, #255	; 0xff
 8000952:	d106      	bne.n	8000962 <P2P_Process+0x252>
      HAL_Delay(DELAY_TX_LED_GLOW);
 8000954:	20c8      	movs	r0, #200	; 0xc8
 8000956:	f003 fdaf 	bl	80044b8 <HAL_Delay>
      SM_State = SM_STATE_IDLE;   
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <P2P_Process+0x280>)
 800095c:	22ff      	movs	r2, #255	; 0xff
 800095e:	701a      	strb	r2, [r3, #0]
    break;
 8000960:	e012      	b.n	8000988 <P2P_Process+0x278>
      SM_State = SM_STATE_SEND_ACK;  
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <P2P_Process+0x280>)
 8000964:	2206      	movs	r2, #6
 8000966:	701a      	strb	r2, [r3, #0]
    break;
 8000968:	e00e      	b.n	8000988 <P2P_Process+0x278>
    RadioShieldLedOff(RADIO_SHIELD_LED);
 800096a:	2000      	movs	r0, #0
 800096c:	f003 f99e 	bl	8003cac <RadioShieldLedOff>
    BSP_LED_Off(LED_GREEN);
 8000970:	2001      	movs	r0, #1
 8000972:	f000 f9bb 	bl	8000cec <BSP_LED_Off>
    SM_State = SM_STATE_START_RX;
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <P2P_Process+0x280>)
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
    break;
 800097c:	e004      	b.n	8000988 <P2P_Process+0x278>
    break;
 800097e:	bf00      	nop
 8000980:	e002      	b.n	8000988 <P2P_Process+0x278>
    break;
 8000982:	bf00      	nop
 8000984:	e000      	b.n	8000988 <P2P_Process+0x278>
    break;
 8000986:	bf00      	nop
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200001dc 	.word	0x200001dc
 8000994:	2000015c 	.word	0x2000015c
 8000998:	2000015e 	.word	0x2000015e
 800099c:	2000015f 	.word	0x2000015f
 80009a0:	200001fc 	.word	0x200001fc
 80009a4:	2000016c 	.word	0x2000016c
 80009a8:	20000160 	.word	0x20000160
 80009ac:	200001da 	.word	0x200001da
 80009b0:	2000015d 	.word	0x2000015d

080009b4 <AppliSendBuff>:
* @param  AppliFrame_t *xTxFrame = Pointer to AppliFrame_t structure 
*         uint8_t cTxlen = Length of aTransmitBuffer
* @retval None
*/
void AppliSendBuff(AppliFrame_t *xTxFrame, uint8_t cTxlen)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]
  uint8_t xIndex = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
  uint8_t trxLength = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73bb      	strb	r3, [r7, #14]
  
  
#endif
  
#ifdef USE_BASIC_PROTOCOL
  RadioPktBasicAddressesInit(&xAddressInit);
 80009c8:	482a      	ldr	r0, [pc, #168]	; (8000a74 <AppliSendBuff+0xc0>)
 80009ca:	f001 f899 	bl	8001b00 <SpiritPktBasicAddressesInit>
#endif  
  
  TxFrameBuff[0] = xTxFrame->Cmd;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	78da      	ldrb	r2, [r3, #3]
 80009d2:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <AppliSendBuff+0xc4>)
 80009d4:	701a      	strb	r2, [r3, #0]
  TxFrameBuff[1] = xTxFrame->CmdLen;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	789a      	ldrb	r2, [r3, #2]
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <AppliSendBuff+0xc4>)
 80009dc:	705a      	strb	r2, [r3, #1]
  TxFrameBuff[2] = xTxFrame->Cmdtag;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <AppliSendBuff+0xc4>)
 80009e4:	709a      	strb	r2, [r3, #2]
  TxFrameBuff[3] = xTxFrame->CmdType;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	785a      	ldrb	r2, [r3, #1]
 80009ea:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <AppliSendBuff+0xc4>)
 80009ec:	70da      	strb	r2, [r3, #3]
  TxFrameBuff[4] = xTxFrame->DataLen;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	791a      	ldrb	r2, [r3, #4]
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <AppliSendBuff+0xc4>)
 80009f4:	711a      	strb	r2, [r3, #4]
  // #if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 80009f6:	e00b      	b.n	8000a10 <AppliSendBuff+0x5c>
    //#if defined(X_NUCLEO_S2868A1) || defined(X_NUCLEO_S2915A1)
    //  for(; xIndex < cTxlen; xIndex++)
    //#endif
    
  {
    TxFrameBuff[xIndex+5] =  xTxFrame->DataBuff[xIndex];
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	441a      	add	r2, r3
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	3305      	adds	r3, #5
 8000a04:	7811      	ldrb	r1, [r2, #0]
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <AppliSendBuff+0xc4>)
 8000a08:	54d1      	strb	r1, [r2, r3]
  for(; xIndex < xTxFrame->DataLen; xIndex++)
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	791b      	ldrb	r3, [r3, #4]
 8000a14:	7bfa      	ldrb	r2, [r7, #15]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d3ee      	bcc.n	80009f8 <AppliSendBuff+0x44>
  }
  
  
  trxLength = (xIndex+5);
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	3305      	adds	r3, #5
 8000a1e:	73bb      	strb	r3, [r7, #14]
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  /* Spirit IRQs disable */
  pRadioDriver->DisableIrq();
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <AppliSendBuff+0xc8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	4798      	blx	r3
#endif
#if defined(X_NUCLEO_S2868A1) || defined(X_NUCLEO_S2915A1)
  S2LPGpioIrqDeInit(NULL);
#endif
  
  pRadioDriver->EnableTxIrq();
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <AppliSendBuff+0xc8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4798      	blx	r3
  /* payload length config */
  pRadioDriver->SetPayloadLen(trxLength);  
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <AppliSendBuff+0xc8>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	7bba      	ldrb	r2, [r7, #14]
 8000a38:	4610      	mov	r0, r2
 8000a3a:	4798      	blx	r3
  /* rx timeout config */
  pRadioDriver->SetRxTimeout(RECEIVE_TIMEOUT);
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <AppliSendBuff+0xc8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a42:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000a80 <AppliSendBuff+0xcc>
 8000a46:	4798      	blx	r3
  /* IRQ registers blanking */
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  pRadioDriver->ClearIrqStatus();
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <AppliSendBuff+0xc8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4e:	4798      	blx	r3
  /* destination address */
  pRadioDriver->SetDestinationAddress(DestinationAddr);
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <AppliSendBuff+0xc8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <AppliSendBuff+0xd0>)
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4798      	blx	r3
  /* destination address */
  pRadioDriver->SetDestinationAddress(DESTINATION_ADDRESS);
  Config_RangeExt(PA_TX,S2LPManagementGetRangeExtender());
#endif  
  /* send the TX command */
  pRadioDriver->StartTx(TxFrameBuff, trxLength);
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <AppliSendBuff+0xc8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a64:	7bba      	ldrb	r2, [r7, #14]
 8000a66:	4611      	mov	r1, r2
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <AppliSendBuff+0xc4>)
 8000a6a:	4798      	blx	r3
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000008c 	.word	0x2000008c
 8000a78:	20000178 	.word	0x20000178
 8000a7c:	200001fc 	.word	0x200001fc
 8000a80:	44fa0000 	.word	0x44fa0000
 8000a84:	200001f4 	.word	0x200001f4

08000a88 <AppliReceiveBuff>:
* @param  uint8_t *RxFrameBuff = Pointer to ReceiveBuffer
*         uint8_t cRxlen = length of ReceiveBuffer
* @retval None
*/
void AppliReceiveBuff(uint8_t *RxFrameBuff, uint8_t cRxlen)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
  /*float rRSSIValue = 0;*/
  exitTime = SET;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <AppliReceiveBuff+0x6c>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
  exitCounter = TIME_TO_EXIT_RX;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <AppliReceiveBuff+0x70>)
 8000a9c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000aa0:	801a      	strh	r2, [r3, #0]
  {
    RadioPktStackFilterOnSourceAddress(S_DISABLE);    
  }
#endif
  
  RadioPktBasicAddressesInit(&xAddressInit);
 8000aa2:	4816      	ldr	r0, [pc, #88]	; (8000afc <AppliReceiveBuff+0x74>)
 8000aa4:	f001 f82c 	bl	8001b00 <SpiritPktBasicAddressesInit>
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  pRadioDriver->DisableIrq();
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <AppliReceiveBuff+0x78>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aae:	4798      	blx	r3
  pRadioDriver = &radio_cb;  
  /* S2LP IRQs disable */
  S2LPGpioIrqDeInit(NULL);
  /* S2LP IRQs enable */
#endif
  pRadioDriver->EnableRxIrq();
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <AppliReceiveBuff+0x78>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	6a1b      	ldr	r3, [r3, #32]
 8000ab6:	4798      	blx	r3
  /* payload length config */
  pRadioDriver->SetPayloadLen(PAYLOAD_LEN);
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <AppliReceiveBuff+0x78>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	2019      	movs	r0, #25
 8000ac0:	4798      	blx	r3
  /* rx timeout config */
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  pRadioDriver->SetRxTimeout(RECEIVE_TIMEOUT);
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <AppliReceiveBuff+0x78>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000b04 <AppliReceiveBuff+0x7c>
 8000acc:	4798      	blx	r3
  S2LPTimerSetRxTimerMs(700.0);
  SET_INFINITE_RX_TIMEOUT();  
#endif
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  /* destination address */
  pRadioDriver->SetDestinationAddress(DestinationAddr);  
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <AppliReceiveBuff+0x78>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <AppliReceiveBuff+0x80>)
 8000ad6:	7812      	ldrb	r2, [r2, #0]
 8000ad8:	4610      	mov	r0, r2
 8000ada:	4798      	blx	r3
  /* IRQ registers blanking */
  pRadioDriver->ClearIrqStatus(); 
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <AppliReceiveBuff+0x78>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae2:	4798      	blx	r3
  S2LPGpioIrqClearStatus(); 
  
  Config_RangeExt(PA_RX,S2LPManagementGetRangeExtender());
#endif
  /* RX command */ 
  pRadioDriver->StartRx(); 
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <AppliReceiveBuff+0x78>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aea:	4798      	blx	r3
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000015f 	.word	0x2000015f
 8000af8:	200001d8 	.word	0x200001d8
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	200001fc 	.word	0x200001fc
 8000b04:	44fa0000 	.word	0x44fa0000
 8000b08:	200001f4 	.word	0x200001f4

08000b0c <P2P_Init>:
* communication
* @param  None
* @retval None
*/
void P2P_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  DestinationAddr=DESTINATION_ADDRESS;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <P2P_Init+0x4c>)
 8000b12:	2244      	movs	r2, #68	; 0x44
 8000b14:	701a      	strb	r2, [r3, #0]
  pRadioDriver->GpioIrq(&xGpioIRQ);
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <P2P_Init+0x50>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	4810      	ldr	r0, [pc, #64]	; (8000b60 <P2P_Init+0x54>)
 8000b1e:	4798      	blx	r3
  pRadioDriver->RadioInit(&xRadioInit);
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <P2P_Init+0x50>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	480f      	ldr	r0, [pc, #60]	; (8000b64 <P2P_Init+0x58>)
 8000b28:	4798      	blx	r3
  pRadioDriver->SetRadioPower(POWER_INDEX, POWER_DBM);  
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <P2P_Init+0x50>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8000b68 <P2P_Init+0x5c>
 8000b34:	2007      	movs	r0, #7
 8000b36:	4798      	blx	r3
  S2LPRadioSetPALevelMaxIndex(POWER_INDEX); 
#endif
  
  
  /* S2LP Packet config */  
  pRadioDriver->PacketConfig();
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <P2P_Init+0x50>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	4798      	blx	r3
  
  pRadioDriver->EnableSQI();
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <P2P_Init+0x50>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b46:	4798      	blx	r3
#if defined(X_NUCLEO_IDS01A4) || defined(X_NUCLEO_IDS01A5)
  pRadioDriver->SetRssiThreshold(RSSI_THRESHOLD);
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <P2P_Init+0x50>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8000b52:	4798      	blx	r3
#endif
#if defined(X_NUCLEO_S2868A1) || defined(X_NUCLEO_S2915A1)
  S2LPRadioSetRssiThreshdBm(RSSI_THRESHOLD);
#endif
  
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200001f4 	.word	0x200001f4
 8000b5c:	200001fc 	.word	0x200001fc
 8000b60:	2000005c 	.word	0x2000005c
 8000b64:	20000060 	.word	0x20000060
 8000b68:	4139999a 	.word	0x4139999a

08000b6c <BasicProtocolInit>:
* @brief  This function initializes the BASIC Packet handler of S2LP
* @param  None
* @retval None
*/
void BasicProtocolInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* RAdio Packet config */
  RadioPktBasicInit(&xBasicInit);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <BasicProtocolInit+0x10>)
 8000b72:	f000 feed 	bl	8001950 <SpiritPktBasicInit>
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000007c 	.word	0x2000007c

08000b80 <Set_KeyStatus>:
* @brief  This routine updates the respective status for key press.
* @param  None
* @retval None
*/
void Set_KeyStatus(FlagStatus val)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if(val==SET)
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d102      	bne.n	8000b96 <Set_KeyStatus+0x16>
  {
    SM_State = SM_STATE_SEND_DATA;
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <Set_KeyStatus+0x24>)
 8000b92:	2203      	movs	r2, #3
 8000b94:	701a      	strb	r2, [r3, #0]
  }
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200001dc 	.word	0x200001dc

08000ba8 <P2PInterruptHandler>:
*         to manage the S2LP IRQ configured to be notified on the S2LP GPIO_3.
* @param  None
* @retval None
*/
void P2PInterruptHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  RadioGpioIrqGetStatus(&xIrqStatus);
 8000bac:	4828      	ldr	r0, [pc, #160]	; (8000c50 <P2PInterruptHandler+0xa8>)
 8000bae:	f000 fc4b 	bl	8001448 <SpiritIrqGetStatus>
  
  
  /* Check the S2LP TX_DATA_SENT IRQ flag */
  if(
     (xIrqStatus.IRQ_TX_DATA_SENT) 
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <P2PInterruptHandler+0xa8>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	b2db      	uxtb	r3, r3
  if(
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d106      	bne.n	8000bce <P2PInterruptHandler+0x26>
       
#ifdef CSMA_ENABLE
       ||(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <P2PInterruptHandler+0xa8>)
 8000bc2:	785b      	ldrb	r3, [r3, #1]
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d019      	beq.n	8000c02 <P2PInterruptHandler+0x5a>
#endif
         )
  {
#ifdef CSMA_ENABLE
    RadioCsma(S_DISABLE);  
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 fb20 	bl	8001214 <SpiritCsma>
    RadioRadioPersistenRx(S_ENABLE);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f002 fa83 	bl	80030e0 <SpiritRadioPersistenRx>
    RadioRadioCsBlanking(S_ENABLE);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f002 fa50 	bl	8003080 <SpiritRadioCsBlanking>
    
    if(xIrqStatus.IRQ_MAX_BO_CCA_REACH)
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <P2PInterruptHandler+0xa8>)
 8000be2:	785b      	ldrb	r3, [r3, #1]
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <P2PInterruptHandler+0x4c>
    {
      RadioCmdStrobeSabort();
 8000bee:	2067      	movs	r0, #103	; 0x67
 8000bf0:	f000 fa94 	bl	800111c <SpiritCmdStrobeCommand>
      
      
    }
    RadioQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8000bf4:	f06f 0077 	mvn.w	r0, #119	; 0x77
 8000bf8:	f001 f93a 	bl	8001e70 <SpiritQiSetRssiThresholddBm>
    
    
#endif
    
    xTxDoneFlag = SET;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <P2PInterruptHandler+0xac>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check the S2LP RX_DATA_READY IRQ flag */
  if((xIrqStatus.IRQ_RX_DATA_READY))
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <P2PInterruptHandler+0xa8>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <P2PInterruptHandler+0x6e>
  {
    xRxDoneFlag = SET;   
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <P2PInterruptHandler+0xb0>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
  }
  
  /* Restart receive after receive timeout*/
  if (xIrqStatus.IRQ_RX_TIMEOUT)
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <P2PInterruptHandler+0xa8>)
 8000c18:	78db      	ldrb	r3, [r3, #3]
 8000c1a:	f003 0320 	and.w	r3, r3, #32
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <P2PInterruptHandler+0x8c>
  {
    rx_timeout = SET; 
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <P2PInterruptHandler+0xb4>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
    RadioCmdStrobeRx();
 8000c2a:	f000 fe61 	bl	80018f0 <SpiritManagementWaCmdStrobeRx>
 8000c2e:	2061      	movs	r0, #97	; 0x61
 8000c30:	f000 fa74 	bl	800111c <SpiritCmdStrobeCommand>
    
  }
  
  /* Check the S2LP RX_DATA_DISC IRQ flag */
  if(xIrqStatus.IRQ_RX_DATA_DISC)
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <P2PInterruptHandler+0xa8>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d004      	beq.n	8000c4c <P2PInterruptHandler+0xa4>
  {      
    /* RX command - to ensure the device will be ready for the next reception */
    RadioCmdStrobeRx();
 8000c42:	f000 fe55 	bl	80018f0 <SpiritManagementWaCmdStrobeRx>
 8000c46:	2061      	movs	r0, #97	; 0x61
 8000c48:	f000 fa68 	bl	800111c <SpiritCmdStrobeCommand>
    
  }  
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200001ec 	.word	0x200001ec
 8000c54:	2000015d 	.word	0x2000015d
 8000c58:	2000015c 	.word	0x2000015c
 8000c5c:	2000015e 	.word	0x2000015e

08000c60 <HAL_GPIO_EXTI_Callback>:

#if defined(X_NUCLEO_S2868A1) || defined(X_NUCLEO_S2915A1)
extern uint16_t M2S_GPIO_PIN_IRQ;
#endif
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
  PushButtonStatusData = RESET;
  wakeupCounter = LPM_WAKEUP_TIME; 
  dataSendCounter = DATA_SEND_TIME;
  dataSendCounter++;
#endif
  if(GPIO_Pin==USER_BUTTON_PIN)
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d103      	bne.n	8000c78 <HAL_GPIO_EXTI_Callback+0x18>
  {
    Set_KeyStatus(SET);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff ff85 	bl	8000b80 <Set_KeyStatus>
      P2PInterruptHandler();
    }
  
#endif
  
}
 8000c76:	e004      	b.n	8000c82 <HAL_GPIO_EXTI_Callback+0x22>
    if(GPIO_Pin==RADIO_GPIO_3_EXTI_LINE)
 8000c78:	88fb      	ldrh	r3, [r7, #6]
 8000c7a:	2b40      	cmp	r3, #64	; 0x40
 8000c7c:	d101      	bne.n	8000c82 <HAL_GPIO_EXTI_Callback+0x22>
      P2PInterruptHandler();
 8000c7e:	f7ff ff93 	bl	8000ba8 <P2PInterruptHandler>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE();
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <BSP_LED_Init+0x54>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <BSP_LED_Init+0x54>)
 8000c9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <BSP_LED_Init+0x54>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	4a0c      	ldr	r2, [pc, #48]	; (8000ce4 <BSP_LED_Init+0x58>)
 8000cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <BSP_LED_Init+0x5c>)
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	f107 020c 	add.w	r2, r7, #12
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fd54 	bl	8004780 <HAL_GPIO_Init>

}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	2000009c 	.word	0x2000009c
 8000ce8:	200000a4 	.word	0x200000a4

08000cec <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <BSP_LED_Off+0x2c>)
 8000cfa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <BSP_LED_Off+0x30>)
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f003 fee2 	bl	8004ad4 <HAL_GPIO_WritePin>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000a4 	.word	0x200000a4
 8000d1c:	2000009c 	.word	0x2000009c

08000d20 <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <BSP_LED_Toggle+0x2c>)
 8000d2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <BSP_LED_Toggle+0x30>)
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f003 fee2 	bl	8004b06 <HAL_GPIO_TogglePin>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200000a4 	.word	0x200000a4
 8000d50:	2000009c 	.word	0x2000009c

08000d54 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	4613      	mov	r3, r2
 8000d62:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <BSP_PB_Init+0x9c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a21      	ldr	r2, [pc, #132]	; (8000df0 <BSP_PB_Init+0x9c>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <BSP_PB_Init+0x9c>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d111      	bne.n	8000da6 <BSP_PB_Init+0x52>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000d82:	2301      	movs	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4a17      	ldr	r2, [pc, #92]	; (8000df4 <BSP_PB_Init+0xa0>)
 8000d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9a:	f107 020c 	add.w	r2, r7, #12
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fced 	bl	8004780 <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d11d      	bne.n	8000de8 <BSP_PB_Init+0x94>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000dac:	2301      	movs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <BSP_PB_Init+0xa4>)
 8000dba:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <BSP_PB_Init+0xa0>)
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	f107 020c 	add.w	r2, r7, #12
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 fcd8 	bl	8004780 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000dd0:	2306      	movs	r3, #6
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 fc8c 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000dde:	2306      	movs	r3, #6
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 fca3 	bl	800472e <HAL_NVIC_EnableIRQ>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	200000ac 	.word	0x200000ac
 8000df8:	10110000 	.word	0x10110000

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_MspInit+0x44>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_MspInit+0x44>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_MspInit+0x44>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x44>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x44>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x44>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f003 faee 	bl	8004478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <EXTI9_5_IRQHandler>:
/* please refer to the startup file (startup_stm32f7xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI9_5_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* EXTI line 7 interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(RADIO_GPIO_3_PIN) != RESET)
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <EXTI9_5_IRQHandler+0x1c>)
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d002      	beq.n	8000eb6 <EXTI9_5_IRQHandler+0x16>
  {
    HAL_GPIO_EXTI_IRQHandler(RADIO_GPIO_3_PIN);
 8000eb0:	2040      	movs	r0, #64	; 0x40
 8000eb2:	f003 fe43 	bl	8004b3c <HAL_GPIO_EXTI_IRQHandler>
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f003 fe39 	bl	8004b3c <HAL_GPIO_EXTI_IRQHandler>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <SystemInit+0x28>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <SystemInit+0x28>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SystemInit+0x28>)
 8000ee6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eea:	609a      	str	r2, [r3, #8]
#endif
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f02:	e003      	b.n	8000f0c <LoopCopyDataInit>

08000f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f0a:	3104      	adds	r1, #4

08000f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f14:	d3f6      	bcc.n	8000f04 <CopyDataInit>
  ldr  r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f18:	e002      	b.n	8000f20 <LoopFillZerobss>

08000f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f1c:	f842 3b04 	str.w	r3, [r2], #4

08000f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f24:	d3f9      	bcc.n	8000f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd3 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f005 f833 	bl	8005f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fb3f 	bl	80005b0 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000f38:	08006268 	.word	0x08006268
  ldr  r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f40:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 8000f44:	200000dc 	.word	0x200000dc
  ldr  r3, = _ebss
 8000f48:	2000026c 	.word	0x2000026c

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8000f5a:	f107 030f 	add.w	r3, r7, #15
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	2050      	movs	r0, #80	; 0x50
 8000f64:	f003 f848 	bl	8003ff8 <RadioSpiReadRegisters>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <SpiritCalibrationVco+0x6c>)
 8000f6c:	b212      	sxth	r2, r2
 8000f6e:	4611      	mov	r1, r2
 8000f70:	7019      	strb	r1, [r3, #0]
 8000f72:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000f76:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d105      	bne.n	8000f8a <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e004      	b.n	8000f94 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f023 0302 	bic.w	r3, r3, #2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8000f94:	f107 030f 	add.w	r3, r7, #15
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2050      	movs	r0, #80	; 0x50
 8000f9e:	f002 ffa7 	bl	8003ef0 <RadioSpiWriteRegisters>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SpiritCalibrationVco+0x6c>)
 8000fa6:	b212      	sxth	r2, r2
 8000fa8:	4611      	mov	r1, r2
 8000faa:	7019      	strb	r1, [r3, #0]
 8000fac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000fb0:	705a      	strb	r2, [r3, #1]

}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000200 	.word	0x20000200

08000fc0 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	461a      	mov	r2, r3
 8000fca:	2101      	movs	r1, #1
 8000fcc:	20e5      	movs	r0, #229	; 0xe5
 8000fce:	f003 f813 	bl	8003ff8 <RadioSpiReadRegisters>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <SpiritCalibrationGetVcoCalData+0x34>)
 8000fd6:	b212      	sxth	r2, r2
 8000fd8:	4611      	mov	r1, r2
 8000fda:	7019      	strb	r1, [r3, #0]
 8000fdc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8000fe0:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fe8:	b2db      	uxtb	r3, r3

}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000200 	.word	0x20000200

08000ff8 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001002:	f107 030f 	add.w	r3, r7, #15
 8001006:	461a      	mov	r2, r3
 8001008:	2101      	movs	r1, #1
 800100a:	206e      	movs	r0, #110	; 0x6e
 800100c:	f002 fff4 	bl	8003ff8 <RadioSpiReadRegisters>
 8001010:	4602      	mov	r2, r0
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001014:	b212      	sxth	r2, r2
 8001016:	4611      	mov	r1, r2
 8001018:	7019      	strb	r1, [r3, #0]
 800101a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800101e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001026:	b2db      	uxtb	r3, r3
 8001028:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4313      	orrs	r3, r2
 8001030:	b2db      	uxtb	r3, r3
 8001032:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001034:	f107 030f 	add.w	r3, r7, #15
 8001038:	461a      	mov	r2, r3
 800103a:	2101      	movs	r1, #1
 800103c:	206e      	movs	r0, #110	; 0x6e
 800103e:	f002 ff57 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001042:	4602      	mov	r2, r0
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001046:	b212      	sxth	r2, r2
 8001048:	4611      	mov	r1, r2
 800104a:	7019      	strb	r1, [r3, #0]
 800104c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001050:	705a      	strb	r2, [r3, #1]

}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000200 	.word	0x20000200

08001060 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800106a:	f107 030f 	add.w	r3, r7, #15
 800106e:	461a      	mov	r2, r3
 8001070:	2101      	movs	r1, #1
 8001072:	206f      	movs	r0, #111	; 0x6f
 8001074:	f002 ffc0 	bl	8003ff8 <RadioSpiReadRegisters>
 8001078:	4602      	mov	r2, r0
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800107c:	b212      	sxth	r2, r2
 800107e:	4611      	mov	r1, r2
 8001080:	7019      	strb	r1, [r3, #0]
 8001082:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001086:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800108e:	b2db      	uxtb	r3, r3
 8001090:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4313      	orrs	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800109c:	f107 030f 	add.w	r3, r7, #15
 80010a0:	461a      	mov	r2, r3
 80010a2:	2101      	movs	r1, #1
 80010a4:	206f      	movs	r0, #111	; 0x6f
 80010a6:	f002 ff23 	bl	8003ef0 <RadioSpiWriteRegisters>
 80010aa:	4602      	mov	r2, r0
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 80010ae:	b212      	sxth	r2, r2
 80010b0:	4611      	mov	r1, r2
 80010b2:	7019      	strb	r1, [r3, #0]
 80010b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80010b8:	705a      	strb	r2, [r3, #1]

}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000200 	.word	0x20000200

080010c8 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80010d2:	f107 030f 	add.w	r3, r7, #15
 80010d6:	461a      	mov	r2, r3
 80010d8:	2101      	movs	r1, #1
 80010da:	209e      	movs	r0, #158	; 0x9e
 80010dc:	f002 ff8c 	bl	8003ff8 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	f023 0306 	bic.w	r3, r3, #6
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d105      	bne.n	80010fc <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e004      	b.n	8001106 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	b2db      	uxtb	r3, r3
 8001104:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001106:	f107 030f 	add.w	r3, r7, #15
 800110a:	461a      	mov	r2, r3
 800110c:	2101      	movs	r1, #1
 800110e:	209e      	movs	r0, #158	; 0x9e
 8001110:	f002 feee 	bl	8003ef0 <RadioSpiWriteRegisters>
  
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f002 ffef 	bl	800410c <RadioSpiCommandStrobes>
 800112e:	4602      	mov	r2, r0
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SpiritCmdStrobeCommand+0x2c>)
 8001132:	b212      	sxth	r2, r2
 8001134:	4611      	mov	r1, r2
 8001136:	7019      	strb	r1, [r3, #0]
 8001138:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800113c:	705a      	strb	r2, [r3, #1]
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000200 	.word	0x20000200

0800114c <SpiritCsmaInit>:
 * @param  pxCsmaInit Csma init structure.
 *         This parameter is a pointer to @ref CsmaInit.
 * @retval None.
 */
void SpiritCsmaInit(CsmaInit* pxCsmaInit)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_BU_COUNTER_SEED(pxCsmaInit->nBuCounterSeed));
  s_assert_param(IS_BU_PRESCALER(pxCsmaInit->cBuPrescaler));
  s_assert_param(IS_CMAX_NB(pxCsmaInit->cMaxNb));

  /* CSMA BU counter seed (MSB) config */
  tempRegValue[0] = (uint8_t)(pxCsmaInit->nBuCounterSeed >> 8);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	889b      	ldrh	r3, [r3, #4]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	b29b      	uxth	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	723b      	strb	r3, [r7, #8]

  /* CSMA BU counter seed (LSB) config */
  tempRegValue[1] = (uint8_t) pxCsmaInit->nBuCounterSeed;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	889b      	ldrh	r3, [r3, #4]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	727b      	strb	r3, [r7, #9]

  /* CSMA BU prescaler config and CCA period config */
  tempRegValue[2] = (pxCsmaInit->cBuPrescaler << 2) | pxCsmaInit->xMultiplierTbit;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	799b      	ldrb	r3, [r3, #6]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	b25a      	sxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	785b      	ldrb	r3, [r3, #1]
 8001174:	b25b      	sxtb	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b25b      	sxtb	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	72bb      	strb	r3, [r7, #10]

  /* CSMA CCA length config and max number of back-off */
  tempRegValue[3] = (pxCsmaInit->xCcaLength | pxCsmaInit->cMaxNb);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	789a      	ldrb	r2, [r3, #2]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	78db      	ldrb	r3, [r3, #3]
 8001186:	4313      	orrs	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	72fb      	strb	r3, [r7, #11]

  /* Reads the PROTOCOL1_BASE register value, to write the SEED_RELOAD and CSMA_PERS_ON fields */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	3304      	adds	r3, #4
 8001192:	461a      	mov	r2, r3
 8001194:	2101      	movs	r1, #1
 8001196:	2051      	movs	r0, #81	; 0x51
 8001198:	f002 ff2e 	bl	8003ff8 <RadioSpiReadRegisters>
 800119c:	4602      	mov	r2, r0
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <SpiritCsmaInit+0xc4>)
 80011a0:	b212      	sxth	r2, r2
 80011a2:	4611      	mov	r1, r2
 80011a4:	7019      	strb	r1, [r3, #0]
 80011a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80011aa:	705a      	strb	r2, [r3, #1]

  /* Writes the new value for persistent mode */
  if(pxCsmaInit->xCsmaPersistentMode==S_ENABLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <SpiritCsmaInit+0x74>
  {
    tempRegValue[4] |= PROTOCOL1_CSMA_PERS_ON_MASK;
 80011b4:	7b3b      	ldrb	r3, [r7, #12]
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	733b      	strb	r3, [r7, #12]
 80011be:	e004      	b.n	80011ca <SpiritCsmaInit+0x7e>
  }
  else
  {
    tempRegValue[4] &= ~PROTOCOL1_CSMA_PERS_ON_MASK;
 80011c0:	7b3b      	ldrb	r3, [r7, #12]
 80011c2:	f023 0302 	bic.w	r3, r3, #2
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	733b      	strb	r3, [r7, #12]
  }

  /* Writes PROTOCOL1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[4]);
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	3304      	adds	r3, #4
 80011d0:	461a      	mov	r2, r3
 80011d2:	2101      	movs	r1, #1
 80011d4:	2051      	movs	r0, #81	; 0x51
 80011d6:	f002 fe8b 	bl	8003ef0 <RadioSpiWriteRegisters>
 80011da:	4602      	mov	r2, r0
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <SpiritCsmaInit+0xc4>)
 80011de:	b212      	sxth	r2, r2
 80011e0:	4611      	mov	r1, r2
 80011e2:	7019      	strb	r1, [r3, #0]
 80011e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80011e8:	705a      	strb	r2, [r3, #1]

  /* Writes CSMA_CONFIGx_BASE registers */
  g_xStatus = SpiritSpiWriteRegisters(CSMA_CONFIG3_BASE, 4, tempRegValue);
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	461a      	mov	r2, r3
 80011f0:	2104      	movs	r1, #4
 80011f2:	2064      	movs	r0, #100	; 0x64
 80011f4:	f002 fe7c 	bl	8003ef0 <RadioSpiWriteRegisters>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SpiritCsmaInit+0xc4>)
 80011fc:	b212      	sxth	r2, r2
 80011fe:	4611      	mov	r1, r2
 8001200:	7019      	strb	r1, [r3, #0]
 8001202:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001206:	705a      	strb	r2, [r3, #1]

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000200 	.word	0x20000200

08001214 <SpiritCsma>:
 * @param  xNewState the state of the CSMA mode.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCsma(SpiritFunctionalState xNewState)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PROTOCOL1 register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 800121e:	f107 030f 	add.w	r3, r7, #15
 8001222:	461a      	mov	r2, r3
 8001224:	2101      	movs	r1, #1
 8001226:	2051      	movs	r0, #81	; 0x51
 8001228:	f002 fee6 	bl	8003ff8 <RadioSpiReadRegisters>
 800122c:	4602      	mov	r2, r0
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <SpiritCsma+0x6c>)
 8001230:	b212      	sxth	r2, r2
 8001232:	4611      	mov	r1, r2
 8001234:	7019      	strb	r1, [r3, #0]
 8001236:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800123a:	705a      	strb	r2, [r3, #1]

  /* Sets or resets the CSMA enable bit */
  if(xNewState==S_ENABLE)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <SpiritCsma+0x3a>
  {
    tempRegValue |= PROTOCOL1_CSMA_ON_MASK;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	b2db      	uxtb	r3, r3
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e004      	b.n	8001258 <SpiritCsma+0x44>
  }
  else
  {
    tempRegValue &= ~PROTOCOL1_CSMA_ON_MASK;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	f023 0304 	bic.w	r3, r3, #4
 8001254:	b2db      	uxtb	r3, r3
 8001256:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the new value on the PROTOCOL1 register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue);
 8001258:	f107 030f 	add.w	r3, r7, #15
 800125c:	461a      	mov	r2, r3
 800125e:	2101      	movs	r1, #1
 8001260:	2051      	movs	r0, #81	; 0x51
 8001262:	f002 fe45 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001266:	4602      	mov	r2, r0
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SpiritCsma+0x6c>)
 800126a:	b212      	sxth	r2, r2
 800126c:	4611      	mov	r1, r2
 800126e:	7019      	strb	r1, [r3, #0]
 8001270:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001274:	705a      	strb	r2, [r3, #1]

}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000200 	.word	0x20000200

08001284 <SpiritGeneralSetExtRef>:
 * @param  xExtMode new state for the external reference.
 *         This parameter can be: MODE_EXT_XO or MODE_EXT_XIN.
 * @retval None.
 */
void SpiritGeneralSetExtRef(ModeExtRef xExtMode)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_MODE_EXT(xExtMode));

  /* Reads the ANA_FUNC_CONF0_BASE register value */
  SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 800128e:	f107 030f 	add.w	r3, r7, #15
 8001292:	461a      	mov	r2, r3
 8001294:	2101      	movs	r1, #1
 8001296:	2001      	movs	r0, #1
 8001298:	f002 feae 	bl	8003ff8 <RadioSpiReadRegisters>

  /* Build the value to write */
  if(xExtMode == MODE_EXT_XO)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d105      	bne.n	80012ae <SpiritGeneralSetExtRef+0x2a>
  {
    tempRegValue &= ~EXT_REF_MASK;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f023 0310 	bic.w	r3, r3, #16
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e004      	b.n	80012b8 <SpiritGeneralSetExtRef+0x34>
  }
  else
  {
    tempRegValue |= EXT_REF_MASK;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80012b8:	f107 030f 	add.w	r3, r7, #15
 80012bc:	461a      	mov	r2, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	2001      	movs	r0, #1
 80012c2:	f002 fe15 	bl	8003ef0 <RadioSpiWriteRegisters>
 80012c6:	4602      	mov	r2, r0
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SpiritGeneralSetExtRef+0x5c>)
 80012ca:	b212      	sxth	r2, r2
 80012cc:	4611      	mov	r1, r2
 80012ce:	7019      	strb	r1, [r3, #0]
 80012d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80012d4:	705a      	strb	r2, [r3, #1]

}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000200 	.word	0x20000200

080012e4 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	785a      	ldrb	r2, [r3, #1]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	789b      	ldrb	r3, [r3, #2]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f107 020f 	add.w	r2, r7, #15
 8001306:	2101      	movs	r1, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fdf1 	bl	8003ef0 <RadioSpiWriteRegisters>
 800130e:	4602      	mov	r2, r0
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <SpiritGpioInit+0x44>)
 8001312:	b212      	sxth	r2, r2
 8001314:	4611      	mov	r1, r2
 8001316:	7019      	strb	r1, [r3, #0]
 8001318:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800131c:	705a      	strb	r2, [r3, #1]

}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000200 	.word	0x20000200

0800132c <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <SpiritIrqDeInit+0x20>
  {
    uint32_t tempValue = 0x00000000;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
    
    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6013      	str	r3, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	461a      	mov	r2, r3
 8001352:	2104      	movs	r1, #4
 8001354:	2090      	movs	r0, #144	; 0x90
 8001356:	f002 fdcb 	bl	8003ef0 <RadioSpiWriteRegisters>
 800135a:	4602      	mov	r2, r0
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SpiritIrqDeInit+0x48>)
 800135e:	b212      	sxth	r2, r2
 8001360:	4611      	mov	r1, r2
 8001362:	7019      	strb	r1, [r3, #0]
 8001364:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001368:	705a      	strb	r2, [r3, #1]
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000200 	.word	0x20000200

08001378 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	461a      	mov	r2, r3
 800138e:	2104      	movs	r1, #4
 8001390:	2090      	movs	r0, #144	; 0x90
 8001392:	f002 fe31 	bl	8003ff8 <RadioSpiReadRegisters>
 8001396:	4602      	mov	r2, r0
 8001398:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <SpiritIrq+0xcc>)
 800139a:	b212      	sxth	r2, r2
 800139c:	4611      	mov	r1, r2
 800139e:	7019      	strb	r1, [r3, #0]
 80013a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80013a4:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	74fb      	strb	r3, [r7, #19]
 80013aa:	e012      	b.n	80013d2 <SpiritIrq+0x5a>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 80013ac:	7cfb      	ldrb	r3, [r7, #19]
 80013ae:	f107 0218 	add.w	r2, r7, #24
 80013b2:	4413      	add	r3, r2
 80013b4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80013b8:	461a      	mov	r2, r3
 80013ba:	7cfb      	ldrb	r3, [r7, #19]
 80013bc:	f1c3 0303 	rsb	r3, r3, #3
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4413      	add	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80013cc:	7cfb      	ldrb	r3, [r7, #19]
 80013ce:	3301      	adds	r3, #1
 80013d0:	74fb      	strb	r3, [r7, #19]
 80013d2:	7cfb      	ldrb	r3, [r7, #19]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d9e9      	bls.n	80013ac <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d105      	bne.n	80013ea <SpiritIrq+0x72>
  {
    tempValue &= (~xIrq);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4013      	ands	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e003      	b.n	80013f2 <SpiritIrq+0x7a>
  }
  else
  {
    tempValue |= (xIrq);
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	74bb      	strb	r3, [r7, #18]
 80013f6:	e00f      	b.n	8001418 <SpiritIrq+0xa0>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80013f8:	7cbb      	ldrb	r3, [r7, #18]
 80013fa:	f1c3 0303 	rsb	r3, r3, #3
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	40da      	lsrs	r2, r3
 8001404:	7cbb      	ldrb	r3, [r7, #18]
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f107 0118 	add.w	r1, r7, #24
 800140c:	440b      	add	r3, r1
 800140e:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8001412:	7cbb      	ldrb	r3, [r7, #18]
 8001414:	3301      	adds	r3, #1
 8001416:	74bb      	strb	r3, [r7, #18]
 8001418:	7cbb      	ldrb	r3, [r7, #18]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d9ec      	bls.n	80013f8 <SpiritIrq+0x80>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	461a      	mov	r2, r3
 8001424:	2104      	movs	r1, #4
 8001426:	2090      	movs	r0, #144	; 0x90
 8001428:	f002 fd62 	bl	8003ef0 <RadioSpiWriteRegisters>
 800142c:	4602      	mov	r2, r0
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <SpiritIrq+0xcc>)
 8001430:	b212      	sxth	r2, r2
 8001432:	4611      	mov	r1, r2
 8001434:	7019      	strb	r1, [r3, #0]
 8001436:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800143a:	705a      	strb	r2, [r3, #1]

}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000200 	.word	0x20000200

08001448 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	461a      	mov	r2, r3
 800145a:	2104      	movs	r1, #4
 800145c:	20fa      	movs	r0, #250	; 0xfa
 800145e:	f002 fdcb 	bl	8003ff8 <RadioSpiReadRegisters>
 8001462:	4602      	mov	r2, r0
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <SpiritIrqGetStatus+0x60>)
 8001466:	b212      	sxth	r2, r2
 8001468:	4611      	mov	r1, r2
 800146a:	7019      	strb	r1, [r3, #0]
 800146c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001470:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8001472:	2300      	movs	r3, #0
 8001474:	74fb      	strb	r3, [r7, #19]
 8001476:	e00f      	b.n	8001498 <SpiritIrqGetStatus+0x50>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001478:	7cfb      	ldrb	r3, [r7, #19]
 800147a:	f1c3 0303 	rsb	r3, r3, #3
 800147e:	f107 0218 	add.w	r2, r7, #24
 8001482:	4413      	add	r3, r2
 8001484:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001492:	7cfb      	ldrb	r3, [r7, #19]
 8001494:	3301      	adds	r3, #1
 8001496:	74fb      	strb	r3, [r7, #19]
 8001498:	7cfb      	ldrb	r3, [r7, #19]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d9ec      	bls.n	8001478 <SpiritIrqGetStatus+0x30>
  }
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000200 	.word	0x20000200

080014ac <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	461a      	mov	r2, r3
 80014b6:	2104      	movs	r1, #4
 80014b8:	20fa      	movs	r0, #250	; 0xfa
 80014ba:	f002 fd9d 	bl	8003ff8 <RadioSpiReadRegisters>
 80014be:	4602      	mov	r2, r0
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SpiritIrqClearStatus+0x2c>)
 80014c2:	b212      	sxth	r2, r2
 80014c4:	4611      	mov	r1, r2
 80014c6:	7019      	strb	r1, [r3, #0]
 80014c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80014cc:	705a      	strb	r2, [r3, #1]

}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000200 	.word	0x20000200

080014dc <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	461a      	mov	r2, r3
 80014e6:	2101      	movs	r1, #1
 80014e8:	20e7      	movs	r0, #231	; 0xe7
 80014ea:	f002 fd85 	bl	8003ff8 <RadioSpiReadRegisters>
 80014ee:	4602      	mov	r2, r0
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 80014f2:	b212      	sxth	r2, r2
 80014f4:	4611      	mov	r1, r2
 80014f6:	7019      	strb	r1, [r3, #0]
 80014f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80014fc:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001504:	b2db      	uxtb	r3, r3

}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000200 	.word	0x20000200

08001514 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	ed2d 8b04 	vpush	{d8-d9}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a6a      	ldr	r2, [pc, #424]	; (80016cc <SpiritManagementSetFrequencyBase+0x1b8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d907      	bls.n	8001538 <SpiritManagementSetFrequencyBase+0x24>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a69      	ldr	r2, [pc, #420]	; (80016d0 <SpiritManagementSetFrequencyBase+0x1bc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d803      	bhi.n	8001538 <SpiritManagementSetFrequencyBase+0x24>
  {
    band = HIGH_BAND;
 8001530:	2300      	movs	r3, #0
 8001532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001536:	e01a      	b.n	800156e <SpiritManagementSetFrequencyBase+0x5a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a66      	ldr	r2, [pc, #408]	; (80016d4 <SpiritManagementSetFrequencyBase+0x1c0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d907      	bls.n	8001550 <SpiritManagementSetFrequencyBase+0x3c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a65      	ldr	r2, [pc, #404]	; (80016d8 <SpiritManagementSetFrequencyBase+0x1c4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d803      	bhi.n	8001550 <SpiritManagementSetFrequencyBase+0x3c>
  {
    band = MIDDLE_BAND;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800154e:	e00e      	b.n	800156e <SpiritManagementSetFrequencyBase+0x5a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a62      	ldr	r2, [pc, #392]	; (80016dc <SpiritManagementSetFrequencyBase+0x1c8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d907      	bls.n	8001568 <SpiritManagementSetFrequencyBase+0x54>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a61      	ldr	r2, [pc, #388]	; (80016e0 <SpiritManagementSetFrequencyBase+0x1cc>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d803      	bhi.n	8001568 <SpiritManagementSetFrequencyBase+0x54>
  {
    band = LOW_BAND;
 8001560:	2302      	movs	r3, #2
 8001562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001566:	e002      	b.n	800156e <SpiritManagementSetFrequencyBase+0x5a>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8001568:	2303      	movs	r3, #3
 800156a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800156e:	f000 fff9 	bl	8002564 <SpiritRadioGetFrequencyOffset>
 8001572:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8001574:	f000 ffd6 	bl	8002524 <SpiritRadioGetChannelSpace>
 8001578:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800157a:	f000 ffbb 	bl	80024f4 <SpiritRadioGetChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8001582:	6a3a      	ldr	r2, [r7, #32]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	441a      	add	r2, r3
 8001588:	7efb      	ldrb	r3, [r7, #27]
 800158a:	69f9      	ldr	r1, [r7, #28]
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8001594:	f001 fe04 	bl	80031a0 <SpiritRadioGetRefDiv>
 8001598:	4603      	mov	r3, r0
 800159a:	3301      	adds	r3, #1
 800159c:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 800159e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d839      	bhi.n	800161a <SpiritManagementSetFrequencyBase+0x106>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <SpiritManagementSetFrequencyBase+0x98>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	08001605 	.word	0x08001605
 80015b0:	080015ed 	.word	0x080015ed
 80015b4:	080015d5 	.word	0x080015d5
 80015b8:	080015bd 	.word	0x080015bd
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	4a49      	ldr	r2, [pc, #292]	; (80016e4 <SpiritManagementSetFrequencyBase+0x1d0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d803      	bhi.n	80015cc <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fd7f 	bl	80010c8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80015ca:	e026      	b.n	800161a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff fd7b 	bl	80010c8 <SpiritCalibrationSelectVco>
    break;
 80015d2:	e022      	b.n	800161a <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	4a44      	ldr	r2, [pc, #272]	; (80016e8 <SpiritManagementSetFrequencyBase+0x1d4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d803      	bhi.n	80015e4 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff fd73 	bl	80010c8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80015e2:	e01a      	b.n	800161a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fd6f 	bl	80010c8 <SpiritCalibrationSelectVco>
    break;
 80015ea:	e016      	b.n	800161a <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	4a3f      	ldr	r2, [pc, #252]	; (80016ec <SpiritManagementSetFrequencyBase+0x1d8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d803      	bhi.n	80015fc <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fd67 	bl	80010c8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80015fa:	e00e      	b.n	800161a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fd63 	bl	80010c8 <SpiritCalibrationSelectVco>
    break;
 8001602:	e00a      	b.n	800161a <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	4a3a      	ldr	r2, [pc, #232]	; (80016f0 <SpiritManagementSetFrequencyBase+0x1dc>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d803      	bhi.n	8001614 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fd5b 	bl	80010c8 <SpiritCalibrationSelectVco>
 8001612:	e002      	b.n	800161a <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff fd57 	bl	80010c8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f000 fe82 	bl	8002324 <SpiritRadioSearchWCP>
 8001620:	4603      	mov	r3, r0
 8001622:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800162e:	7cfb      	ldrb	r3, [r7, #19]
 8001630:	049b      	lsls	r3, r3, #18
 8001632:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001636:	492f      	ldr	r1, [pc, #188]	; (80016f4 <SpiritManagementSetFrequencyBase+0x1e0>)
 8001638:	5c8a      	ldrb	r2, [r1, r2]
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8001646:	f001 fe1f 	bl	8003288 <SpiritRadioGetXtalFrequency>
 800164a:	ee07 0a90 	vmov	s15, r0
 800164e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001652:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001656:	ee28 7b07 	vmul.f64	d7, d8, d7
 800165a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800165e:	ee17 3a90 	vmov	r3, s15
 8001662:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	0d5b      	lsrs	r3, r3, #21
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	b2da      	uxtb	r2, r3
 8001670:	7cbb      	ldrb	r3, [r7, #18]
 8001672:	015b      	lsls	r3, r3, #5
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b2db      	uxtb	r3, r3
 800167a:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	0b5b      	lsrs	r3, r3, #13
 8001680:	b2db      	uxtb	r3, r3
 8001682:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	b2db      	uxtb	r3, r3
 800168a:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	b2da      	uxtb	r2, r3
 8001694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001698:	4917      	ldr	r1, [pc, #92]	; (80016f8 <SpiritManagementSetFrequencyBase+0x1e4>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	4313      	orrs	r3, r2
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	461a      	mov	r2, r3
 80016a8:	2104      	movs	r1, #4
 80016aa:	2008      	movs	r0, #8
 80016ac:	f002 fc20 	bl	8003ef0 <RadioSpiWriteRegisters>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <SpiritManagementSetFrequencyBase+0x1e8>)
 80016b4:	b212      	sxth	r2, r2
 80016b6:	4611      	mov	r1, r2
 80016b8:	7019      	strb	r1, [r3, #0]
 80016ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80016be:	705a      	strb	r2, [r3, #1]
}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	ecbd 8b04 	vpop	{d8-d9}
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2e5f567f 	.word	0x2e5f567f
 80016d0:	390c2fe0 	.word	0x390c2fe0
 80016d4:	1701e47f 	.word	0x1701e47f
 80016d8:	1c146a60 	.word	0x1c146a60
 80016dc:	11d260bf 	.word	0x11d260bf
 80016e0:	14ced7e0 	.word	0x14ced7e0
 80016e4:	099cf4e1 	.word	0x099cf4e1
 80016e8:	1339e9c3 	.word	0x1339e9c3
 80016ec:	19a28d05 	.word	0x19a28d05
 80016f0:	33451a0a 	.word	0x33451a0a
 80016f4:	080060b8 	.word	0x080060b8
 80016f8:	080060b4 	.word	0x080060b4
 80016fc:	20000200 	.word	0x20000200

08001700 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800170e:	f001 fdbb 	bl	8003288 <SpiritRadioGetXtalFrequency>
 8001712:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8001714:	2300      	movs	r3, #0
 8001716:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4a57      	ldr	r2, [pc, #348]	; (8001878 <SpiritManagementWaVcoCalibration+0x178>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d90f      	bls.n	8001740 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8001720:	f001 fd3e 	bl	80031a0 <SpiritRadioGetRefDiv>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10a      	bne.n	8001740 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800172e:	f001 f86f 	bl	8002810 <SpiritRadioGetFrequencyBase>
 8001732:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8001734:	2001      	movs	r0, #1
 8001736:	f001 fd03 	bl	8003140 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff feea 	bl	8001514 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8001740:	f001 f866 	bl	8002810 <SpiritRadioGetFrequencyBase>
 8001744:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8001746:	2325      	movs	r3, #37	; 0x25
 8001748:	707b      	strb	r3, [r7, #1]
 800174a:	1c7b      	adds	r3, r7, #1
 800174c:	461a      	mov	r2, r3
 800174e:	2101      	movs	r1, #1
 8001750:	20a1      	movs	r0, #161	; 0xa1
 8001752:	f002 fbcd 	bl	8003ef0 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff fbfa 	bl	8000f50 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 800175c:	f001 ff6c 	bl	8003638 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8001760:	4b46      	ldr	r3, [pc, #280]	; (800187c <SpiritManagementWaVcoCalibration+0x17c>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b40      	cmp	r3, #64	; 0x40
 800176c:	d10d      	bne.n	800178a <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 800176e:	2301      	movs	r3, #1
 8001770:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 8001772:	2062      	movs	r0, #98	; 0x62
 8001774:	f7ff fcd2 	bl	800111c <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8001778:	f001 ff5e 	bl	8003638 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800177c:	4b3f      	ldr	r3, [pc, #252]	; (800187c <SpiritManagementWaVcoCalibration+0x17c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b03      	cmp	r3, #3
 8001788:	d1f6      	bne.n	8001778 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 800178a:	2066      	movs	r0, #102	; 0x66
 800178c:	f7ff fcc6 	bl	800111c <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8001790:	2300      	movs	r3, #0
 8001792:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8001794:	f001 ff50 	bl	8003638 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8001798:	4b38      	ldr	r3, [pc, #224]	; (800187c <SpiritManagementWaVcoCalibration+0x17c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b13      	cmp	r3, #19
 80017a4:	d106      	bne.n	80017b4 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80017a6:	7b7b      	ldrb	r3, [r7, #13]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	737a      	strb	r2, [r7, #13]
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d101      	bne.n	80017b4 <SpiritManagementWaVcoCalibration+0xb4>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e05d      	b.n	8001870 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80017b4:	4b31      	ldr	r3, [pc, #196]	; (800187c <SpiritManagementWaVcoCalibration+0x17c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	d1e8      	bne.n	8001794 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80017c2:	f7ff fbfd 	bl	8000fc0 <SpiritCalibrationGetVcoCalData>
 80017c6:	4603      	mov	r3, r0
 80017c8:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80017ca:	2062      	movs	r0, #98	; 0x62
 80017cc:	f7ff fca6 	bl	800111c <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80017d0:	f001 ff32 	bl	8003638 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <SpiritManagementWaVcoCalibration+0x17c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d1f6      	bne.n	80017d0 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80017e2:	2065      	movs	r0, #101	; 0x65
 80017e4:	f7ff fc9a 	bl	800111c <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80017ec:	f001 ff24 	bl	8003638 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <SpiritManagementWaVcoCalibration+0x17c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b13      	cmp	r3, #19
 80017fc:	d106      	bne.n	800180c <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 80017fe:	7b7b      	ldrb	r3, [r7, #13]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	737a      	strb	r2, [r7, #13]
 8001804:	2b05      	cmp	r3, #5
 8001806:	d101      	bne.n	800180c <SpiritManagementWaVcoCalibration+0x10c>
 8001808:	2301      	movs	r3, #1
 800180a:	e031      	b.n	8001870 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <SpiritManagementWaVcoCalibration+0x17c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b0f      	cmp	r3, #15
 8001818:	d1e8      	bne.n	80017ec <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 800181a:	f7ff fbd1 	bl	8000fc0 <SpiritCalibrationGetVcoCalData>
 800181e:	4603      	mov	r3, r0
 8001820:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8001822:	2062      	movs	r0, #98	; 0x62
 8001824:	f7ff fc7a 	bl	800111c <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8001828:	f001 ff06 	bl	8003638 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <SpiritManagementWaVcoCalibration+0x17c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b03      	cmp	r3, #3
 8001838:	d1f6      	bne.n	8001828 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 800183a:	7bbb      	ldrb	r3, [r7, #14]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d102      	bne.n	8001846 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8001840:	2063      	movs	r0, #99	; 0x63
 8001842:	f7ff fc6b 	bl	800111c <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8001846:	2000      	movs	r0, #0
 8001848:	f7ff fb82 	bl	8000f50 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8001852:	2000      	movs	r0, #0
 8001854:	f001 fc74 	bl	8003140 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fe5b 	bl	8001514 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fbc9 	bl	8000ff8 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8001866:	78bb      	ldrb	r3, [r7, #2]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fbf9 	bl	8001060 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	01c9c380 	.word	0x01c9c380
 800187c:	20000200 	.word	0x20000200

08001880 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <SpiritManagementWaCmdStrobeTx+0x60>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d023      	beq.n	80018d8 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <SpiritManagementWaCmdStrobeTx+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <SpiritManagementWaCmdStrobeTx+0x68>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d908      	bls.n	80018ac <SpiritManagementWaCmdStrobeTx+0x2c>
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <SpiritManagementWaCmdStrobeTx+0x64>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <SpiritManagementWaCmdStrobeTx+0x6c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d803      	bhi.n	80018ac <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80018a4:	20c0      	movs	r0, #192	; 0xc0
 80018a6:	f001 fb61 	bl	8002f6c <SpiritRadioSetPACwc>
 80018aa:	e002      	b.n	80018b2 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f001 fb5d 	bl	8002f6c <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80018b2:	2311      	movs	r3, #17
 80018b4:	71fb      	strb	r3, [r7, #7]
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	461a      	mov	r2, r3
 80018ba:	2101      	movs	r1, #1
 80018bc:	20a9      	movs	r0, #169	; 0xa9
 80018be:	f002 fb17 	bl	8003ef0 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80018c2:	2320      	movs	r3, #32
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	461a      	mov	r2, r3
 80018ca:	2101      	movs	r1, #1
 80018cc:	20a5      	movs	r0, #165	; 0xa5
 80018ce:	f002 fb0f 	bl	8003ef0 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80018d2:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <SpiritManagementWaCmdStrobeTx+0x60>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
  }
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200000b4 	.word	0x200000b4
 80018e4:	200001e0 	.word	0x200001e0
 80018e8:	08f0d17f 	.word	0x08f0d17f
 80018ec:	1c03a180 	.word	0x1c03a180

080018f0 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <SpiritManagementWaCmdStrobeRx+0x34>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d00d      	beq.n	800191c <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8001900:	2398      	movs	r3, #152	; 0x98
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	1dfb      	adds	r3, r7, #7
 8001906:	461a      	mov	r2, r3
 8001908:	2101      	movs	r1, #1
 800190a:	20a5      	movs	r0, #165	; 0xa5
 800190c:	f002 faf0 	bl	8003ef0 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8001910:	2000      	movs	r0, #0
 8001912:	f001 fb2b 	bl	8002f6c <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8001916:	4b03      	ldr	r3, [pc, #12]	; (8001924 <SpiritManagementWaCmdStrobeRx+0x34>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
  }
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200000b4 	.word	0x200000b4

08001928 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SpiritManagementWaTRxFcMem+0x20>)
 8001932:	2202      	movs	r2, #2
 8001934:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <SpiritManagementWaTRxFcMem+0x24>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	200000b4 	.word	0x200000b4
 800194c:	200001e0 	.word	0x200001e0

08001950 <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8001958:	f107 0308 	add.w	r3, r7, #8
 800195c:	461a      	mov	r2, r3
 800195e:	2101      	movs	r1, #1
 8001960:	2051      	movs	r0, #81	; 0x51
 8001962:	f002 fb49 	bl	8003ff8 <RadioSpiReadRegisters>
 8001966:	4602      	mov	r2, r0
 8001968:	4b64      	ldr	r3, [pc, #400]	; (8001afc <SpiritPktBasicInit+0x1ac>)
 800196a:	b212      	sxth	r2, r2
 800196c:	4611      	mov	r1, r2
 800196e:	7019      	strb	r1, [r3, #0]
 8001970:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001974:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8001976:	7a3b      	ldrb	r3, [r7, #8]
 8001978:	f023 0320 	bic.w	r3, r3, #32
 800197c:	b2db      	uxtb	r3, r3
 800197e:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8001980:	7a3b      	ldrb	r3, [r7, #8]
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	461a      	mov	r2, r3
 8001990:	2101      	movs	r1, #1
 8001992:	2051      	movs	r0, #81	; 0x51
 8001994:	f002 faac 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001998:	4602      	mov	r2, r0
 800199a:	4b58      	ldr	r3, [pc, #352]	; (8001afc <SpiritPktBasicInit+0x1ac>)
 800199c:	b212      	sxth	r2, r2
 800199e:	4611      	mov	r1, r2
 80019a0:	7019      	strb	r1, [r3, #0]
 80019a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80019a6:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80019a8:	f107 0308 	add.w	r3, r7, #8
 80019ac:	461a      	mov	r2, r3
 80019ae:	2101      	movs	r1, #1
 80019b0:	204f      	movs	r0, #79	; 0x4f
 80019b2:	f002 fb21 	bl	8003ff8 <RadioSpiReadRegisters>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b50      	ldr	r3, [pc, #320]	; (8001afc <SpiritPktBasicInit+0x1ac>)
 80019ba:	b212      	sxth	r2, r2
 80019bc:	4611      	mov	r1, r2
 80019be:	7019      	strb	r1, [r3, #0]
 80019c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80019c4:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 80019c6:	7a3b      	ldrb	r3, [r7, #8]
 80019c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	461a      	mov	r2, r3
 80019d6:	2101      	movs	r1, #1
 80019d8:	204f      	movs	r0, #79	; 0x4f
 80019da:	f002 fa89 	bl	8003ef0 <RadioSpiWriteRegisters>
 80019de:	4602      	mov	r2, r0
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <SpiritPktBasicInit+0x1ac>)
 80019e2:	b212      	sxth	r2, r2
 80019e4:	4611      	mov	r1, r2
 80019e6:	7019      	strb	r1, [r3, #0]
 80019e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80019ec:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7b1b      	ldrb	r3, [r3, #12]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d102      	bne.n	80019fc <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 80019f6:	2308      	movs	r3, #8
 80019f8:	723b      	strb	r3, [r7, #8]
 80019fa:	e001      	b.n	8001a00 <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 80019fc:	2300      	movs	r3, #0
 80019fe:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 8001a00:	7a3a      	ldrb	r2, [r7, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7adb      	ldrb	r3, [r3, #11]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7a5b      	ldrb	r3, [r3, #9]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <SpiritPktBasicInit+0xca>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7a5b      	ldrb	r3, [r3, #9]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	785b      	ldrb	r3, [r3, #1]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7a9b      	ldrb	r3, [r3, #10]
 8001a3e:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7b9b      	ldrb	r3, [r3, #14]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d104      	bne.n	8001a52 <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8001a48:	7afb      	ldrb	r3, [r7, #11]
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7b5b      	ldrb	r3, [r3, #13]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d104      	bne.n	8001a64 <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	2030      	movs	r0, #48	; 0x30
 8001a6e:	f002 fa3f 	bl	8003ef0 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e01f      	b.n	8001ab8 <SpiritPktBasicInit+0x168>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f1c3 0303 	rsb	r3, r3, #3
 8001a86:	429a      	cmp	r2, r3
 8001a88:	da07      	bge.n	8001a9a <SpiritPktBasicInit+0x14a>
    {
      tempRegValue[i]=0;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	f107 0210 	add.w	r2, r7, #16
 8001a90:	4413      	add	r3, r2
 8001a92:	2200      	movs	r2, #0
 8001a94:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001a98:	e00b      	b.n	8001ab2 <SpiritPktBasicInit+0x162>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	40da      	lsrs	r2, r3
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	f107 0110 	add.w	r1, r7, #16
 8001aac:	440b      	add	r3, r1
 8001aae:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d9dc      	bls.n	8001a78 <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7a9b      	ldrb	r3, [r3, #10]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d103      	bne.n	8001ace <SpiritPktBasicInit+0x17e>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f8fc 	bl	8001cc4 <SpiritPktCommonFilterOnCrc>
 8001acc:	e002      	b.n	8001ad4 <SpiritPktBasicInit+0x184>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 f8f8 	bl	8001cc4 <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2104      	movs	r1, #4
 8001adc:	2036      	movs	r0, #54	; 0x36
 8001ade:	f002 fa07 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SpiritPktBasicInit+0x1ac>)
 8001ae6:	b212      	sxth	r2, r2
 8001ae8:	4611      	mov	r1, r2
 8001aea:	7019      	strb	r1, [r3, #0]
 8001aec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001af0:	705a      	strb	r2, [r3, #1]

}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000200 	.word	0x20000200

08001b00 <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2101      	movs	r1, #1
 8001b10:	204f      	movs	r0, #79	; 0x4f
 8001b12:	f002 fa71 	bl	8003ff8 <RadioSpiReadRegisters>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <SpiritPktBasicAddressesInit+0xd8>)
 8001b1a:	b212      	sxth	r2, r2
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	7019      	strb	r1, [r3, #0]
 8001b20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b24:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d105      	bne.n	8001b3a <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8001b2e:	7b3b      	ldrb	r3, [r7, #12]
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	733b      	strb	r3, [r7, #12]
 8001b38:	e004      	b.n	8001b44 <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8001b3a:	7b3b      	ldrb	r3, [r7, #12]
 8001b3c:	f023 0308 	bic.w	r3, r3, #8
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	789b      	ldrb	r3, [r3, #2]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8001b4c:	7b3b      	ldrb	r3, [r7, #12]
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	733b      	strb	r3, [r7, #12]
 8001b56:	e004      	b.n	8001b62 <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8001b58:	7b3b      	ldrb	r3, [r7, #12]
 8001b5a:	f023 0304 	bic.w	r3, r3, #4
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	791b      	ldrb	r3, [r3, #4]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d105      	bne.n	8001b76 <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8001b6a:	7b3b      	ldrb	r3, [r7, #12]
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	733b      	strb	r3, [r7, #12]
 8001b74:	e004      	b.n	8001b80 <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8001b76:	7b3b      	ldrb	r3, [r7, #12]
 8001b78:	f023 0302 	bic.w	r3, r3, #2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	461a      	mov	r2, r3
 8001b86:	2101      	movs	r1, #1
 8001b88:	204f      	movs	r0, #79	; 0x4f
 8001b8a:	f002 f9b1 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <SpiritPktBasicAddressesInit+0xd8>)
 8001b92:	b212      	sxth	r2, r2
 8001b94:	4611      	mov	r1, r2
 8001b96:	7019      	strb	r1, [r3, #0]
 8001b98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b9c:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	795b      	ldrb	r3, [r3, #5]
 8001ba2:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	78db      	ldrb	r3, [r3, #3]
 8001ba8:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	2103      	movs	r1, #3
 8001bb8:	204c      	movs	r0, #76	; 0x4c
 8001bba:	f002 f999 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SpiritPktBasicAddressesInit+0xd8>)
 8001bc2:	b212      	sxth	r2, r2
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	7019      	strb	r1, [r3, #0]
 8001bc8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001bcc:	705a      	strb	r2, [r3, #1]
  
  
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000200 	.word	0x20000200

08001bdc <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	461a      	mov	r2, r3
 8001be6:	2101      	movs	r1, #1
 8001be8:	2030      	movs	r0, #48	; 0x30
 8001bea:	f002 fa05 	bl	8003ff8 <RadioSpiReadRegisters>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <SpiritPktBasicGetAddressField+0x3c>)
 8001bf2:	b212      	sxth	r2, r2
 8001bf4:	4611      	mov	r1, r2
 8001bf6:	7019      	strb	r1, [r3, #0]
 8001bf8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001bfc:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 0318 	and.w	r3, r3, #24
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 8001c0c:	2300      	movs	r3, #0
  }

}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000200 	.word	0x20000200

08001c1c <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 8001c2a:	f7ff ffd7 	bl	8001bdc <SpiritPktBasicGetAddressField>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8001c38:	f000 f828 	bl	8001c8c <SpiritPktCommonGetControlLength>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	89fb      	ldrh	r3, [r7, #14]
 8001c42:	4413      	add	r3, r2
 8001c44:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	89fb      	ldrh	r3, [r7, #14]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8001c54:	88fa      	ldrh	r2, [r7, #6]
 8001c56:	89fb      	ldrh	r3, [r7, #14]
 8001c58:	4413      	add	r3, r2
 8001c5a:	121b      	asrs	r3, r3, #8
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	461a      	mov	r2, r3
 8001c66:	2102      	movs	r1, #2
 8001c68:	2034      	movs	r0, #52	; 0x34
 8001c6a:	f002 f941 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SpiritPktBasicSetPayloadLength+0x6c>)
 8001c72:	b212      	sxth	r2, r2
 8001c74:	4611      	mov	r1, r2
 8001c76:	7019      	strb	r1, [r3, #0]
 8001c78:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c7c:	705a      	strb	r2, [r3, #1]

}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000200 	.word	0x20000200

08001c8c <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8001c92:	1dfb      	adds	r3, r7, #7
 8001c94:	461a      	mov	r2, r3
 8001c96:	2101      	movs	r1, #1
 8001c98:	2030      	movs	r0, #48	; 0x30
 8001c9a:	f002 f9ad 	bl	8003ff8 <RadioSpiReadRegisters>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <SpiritPktCommonGetControlLength+0x34>)
 8001ca2:	b212      	sxth	r2, r2
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	7019      	strb	r1, [r3, #0]
 8001ca8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cac:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	b2db      	uxtb	r3, r3

}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000200 	.word	0x20000200

08001cc4 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8001cce:	f107 030f 	add.w	r3, r7, #15
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	204f      	movs	r0, #79	; 0x4f
 8001cd8:	f002 f98e 	bl	8003ff8 <RadioSpiReadRegisters>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <SpiritPktCommonFilterOnCrc+0x6c>)
 8001ce0:	b212      	sxth	r2, r2
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	7019      	strb	r1, [r3, #0]
 8001ce6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cea:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d105      	bne.n	8001cfe <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e004      	b.n	8001d08 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8001d08:	f107 030f 	add.w	r3, r7, #15
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2101      	movs	r1, #1
 8001d10:	204f      	movs	r0, #79	; 0x4f
 8001d12:	f002 f8ed 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001d16:	4602      	mov	r2, r0
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SpiritPktCommonFilterOnCrc+0x6c>)
 8001d1a:	b212      	sxth	r2, r2
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	7019      	strb	r1, [r3, #0]
 8001d20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d24:	705a      	strb	r2, [r3, #1]

}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000200 	.word	0x20000200

08001d34 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8001d3e:	1dfb      	adds	r3, r7, #7
 8001d40:	461a      	mov	r2, r3
 8001d42:	2101      	movs	r1, #1
 8001d44:	204b      	movs	r0, #75	; 0x4b
 8001d46:	f002 f8d3 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SpiritPktCommonSetDestinationAddress+0x30>)
 8001d4e:	b212      	sxth	r2, r2
 8001d50:	4611      	mov	r1, r2
 8001d52:	7019      	strb	r1, [r3, #0]
 8001d54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d58:	705a      	strb	r2, [r3, #1]

}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000200 	.word	0x20000200

08001d68 <SpiritPktCommonGetReceivedDestAddress>:
 * @brief  Returns the destination address of the received packet.
 * @param  None.
 * @retval uint8_t Destination address of the received address.
 */
uint8_t SpiritPktCommonGetReceivedDestAddress(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD0 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD0_BASE, 1, &tempRegValue);
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	461a      	mov	r2, r3
 8001d72:	2101      	movs	r1, #1
 8001d74:	20d3      	movs	r0, #211	; 0xd3
 8001d76:	f002 f93f 	bl	8003ff8 <RadioSpiReadRegisters>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SpiritPktCommonGetReceivedDestAddress+0x2c>)
 8001d7e:	b212      	sxth	r2, r2
 8001d80:	4611      	mov	r1, r2
 8001d82:	7019      	strb	r1, [r3, #0]
 8001d84:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d88:	705a      	strb	r2, [r3, #1]

  /* Return value */
  return tempRegValue;
 8001d8a:	79fb      	ldrb	r3, [r7, #7]

}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000200 	.word	0x20000200

08001d98 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8001da2:	f107 030f 	add.w	r3, r7, #15
 8001da6:	461a      	mov	r2, r3
 8001da8:	2101      	movs	r1, #1
 8001daa:	203a      	movs	r0, #58	; 0x3a
 8001dac:	f002 f924 	bl	8003ff8 <RadioSpiReadRegisters>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <SpiritQiSqiCheck+0x6c>)
 8001db4:	b212      	sxth	r2, r2
 8001db6:	4611      	mov	r1, r2
 8001db8:	7019      	strb	r1, [r3, #0]
 8001dba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001dbe:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e004      	b.n	8001ddc <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	f023 0302 	bic.w	r3, r3, #2
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8001ddc:	f107 030f 	add.w	r3, r7, #15
 8001de0:	461a      	mov	r2, r3
 8001de2:	2101      	movs	r1, #1
 8001de4:	203a      	movs	r0, #58	; 0x3a
 8001de6:	f002 f883 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <SpiritQiSqiCheck+0x6c>)
 8001dee:	b212      	sxth	r2, r2
 8001df0:	4611      	mov	r1, r2
 8001df2:	7019      	strb	r1, [r3, #0]
 8001df4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001df8:	705a      	strb	r2, [r3, #1]

}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000200 	.word	0x20000200

08001e08 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8001e12:	f107 030f 	add.w	r3, r7, #15
 8001e16:	461a      	mov	r2, r3
 8001e18:	2101      	movs	r1, #1
 8001e1a:	203a      	movs	r0, #58	; 0x3a
 8001e1c:	f002 f8ec 	bl	8003ff8 <RadioSpiReadRegisters>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <SpiritQiSetSqiThreshold+0x64>)
 8001e24:	b212      	sxth	r2, r2
 8001e26:	4611      	mov	r1, r2
 8001e28:	7019      	strb	r1, [r3, #0]
 8001e2a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e2e:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8001e44:	f107 030f 	add.w	r3, r7, #15
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	203a      	movs	r0, #58	; 0x3a
 8001e4e:	f002 f84f 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SpiritQiSetSqiThreshold+0x64>)
 8001e56:	b212      	sxth	r2, r2
 8001e58:	4611      	mov	r1, r2
 8001e5a:	7019      	strb	r1, [r3, #0]
 8001e5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e60:	705a      	strb	r2, [r3, #1]

}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000200 	.word	0x20000200

08001e70 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3382      	adds	r3, #130	; 0x82
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8001e84:	f107 030f 	add.w	r3, r7, #15
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2022      	movs	r0, #34	; 0x22
 8001e8e:	f002 f82f 	bl	8003ef0 <RadioSpiWriteRegisters>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SpiritQiSetRssiThresholddBm+0x3c>)
 8001e96:	b212      	sxth	r2, r2
 8001e98:	4611      	mov	r1, r2
 8001e9a:	7019      	strb	r1, [r3, #0]
 8001e9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ea0:	705a      	strb	r2, [r3, #1]

}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000200 	.word	0x20000200

08001eb0 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	; 0x30
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8001eb8:	23a0      	movs	r3, #160	; 0xa0
 8001eba:	747b      	strb	r3, [r7, #17]
 8001ebc:	f107 0311 	add.w	r3, r7, #17
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	209f      	movs	r0, #159	; 0x9f
 8001ec6:	f002 f813 	bl	8003ef0 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	ee07 3a90 	vmov	s15, r3
 8001ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee8:	eddf 6ab7 	vldr	s13, [pc, #732]	; 80021c8 <SpiritRadioInit+0x318>
 8001eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef4:	ee17 3a90 	vmov	r3, s15
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8001efa:	2063      	movs	r0, #99	; 0x63
 8001efc:	f002 f906 	bl	800410c <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8001f00:	2300      	movs	r3, #0
 8001f02:	73bb      	strb	r3, [r7, #14]
 8001f04:	e004      	b.n	8001f10 <SpiritRadioInit+0x60>
 8001f06:	7bbb      	ldrb	r3, [r7, #14]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	73bb      	strb	r3, [r7, #14]
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2bff      	cmp	r3, #255	; 0xff
 8001f16:	d1f6      	bne.n	8001f06 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8001f18:	f001 fb8e 	bl	8003638 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8001f1c:	4bab      	ldr	r3, [pc, #684]	; (80021cc <SpiritRadioInit+0x31c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b40      	cmp	r3, #64	; 0x40
 8001f28:	d1ea      	bne.n	8001f00 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8001f2a:	4ba9      	ldr	r3, [pc, #676]	; (80021d0 <SpiritRadioInit+0x320>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4aa9      	ldr	r2, [pc, #676]	; (80021d4 <SpiritRadioInit+0x324>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d803      	bhi.n	8001f3c <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f001 f955 	bl	80031e4 <SpiritRadioSetDigDiv>
 8001f3a:	e002      	b.n	8001f42 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f001 f951 	bl	80031e4 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8001f42:	2062      	movs	r0, #98	; 0x62
 8001f44:	f002 f8e2 	bl	800410c <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	737b      	strb	r3, [r7, #13]
 8001f4c:	e004      	b.n	8001f58 <SpiritRadioInit+0xa8>
 8001f4e:	7b7b      	ldrb	r3, [r7, #13]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	737b      	strb	r3, [r7, #13]
 8001f58:	7b7b      	ldrb	r3, [r7, #13]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2bff      	cmp	r3, #255	; 0xff
 8001f5e:	d1f6      	bne.n	8001f4e <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8001f60:	f001 fb6a 	bl	8003638 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8001f64:	4b99      	ldr	r3, [pc, #612]	; (80021cc <SpiritRadioInit+0x31c>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d1ea      	bne.n	8001f48 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7c:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80021d8 <SpiritRadioInit+0x328>
 8001f80:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001f84:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <SpiritRadioInit+0x320>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f98:	ee17 3a90 	vmov	r3, s15
 8001f9c:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8001f9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8001fae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	025a      	lsls	r2, r3, #9
 8001fba:	4b85      	ldr	r3, [pc, #532]	; (80021d0 <SpiritRadioInit+0x320>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fca9 	bl	8001928 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2101      	movs	r1, #1
 8001fde:	20a3      	movs	r0, #163	; 0xa3
 8001fe0:	f002 f80a 	bl	8003ff8 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8001fe4:	7c3b      	ldrb	r3, [r7, #16]
 8001fe6:	f023 0302 	bic.w	r3, r3, #2
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	743b      	strb	r3, [r7, #16]
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	20a3      	movs	r0, #163	; 0xa3
 8001ff8:	f001 ff7a 	bl	8003ef0 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f107 0216 	add.w	r2, r7, #22
 8002004:	f107 0117 	add.w	r1, r7, #23
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fc3d 	bl	8002888 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 800200e:	7dfb      	ldrb	r3, [r7, #23]
 8002010:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7b5a      	ldrb	r2, [r3, #13]
 8002016:	7dbb      	ldrb	r3, [r7, #22]
 8002018:	4313      	orrs	r3, r2
 800201a:	b2db      	uxtb	r3, r3
 800201c:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	461a      	mov	r2, r3
 8002024:	2101      	movs	r1, #1
 8002026:	201c      	movs	r0, #28
 8002028:	f001 ffe6 	bl	8003ff8 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	f107 0214 	add.w	r2, r7, #20
 8002034:	f107 0115 	add.w	r1, r7, #21
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fdc5 	bl	8002bc8 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 800203e:	7d3b      	ldrb	r3, [r7, #20]
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	b25a      	sxtb	r2, r3
 8002044:	7c3b      	ldrb	r3, [r7, #16]
 8002046:	b25b      	sxtb	r3, r3
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	b25b      	sxtb	r3, r3
 800204e:	4313      	orrs	r3, r2
 8002050:	b25a      	sxtb	r2, r3
 8002052:	7d7b      	ldrb	r3, [r7, #21]
 8002054:	b25b      	sxtb	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b25b      	sxtb	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f107 0212 	add.w	r2, r7, #18
 8002066:	f107 0113 	add.w	r1, r7, #19
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fcc0 	bl	80029f0 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	b25a      	sxtb	r2, r3
 8002076:	7cbb      	ldrb	r3, [r7, #18]
 8002078:	b25b      	sxtb	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b25b      	sxtb	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002082:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <SpiritRadioInit+0x320>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0b1b      	lsrs	r3, r3, #12
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002090:	eddf 6a52 	vldr	s13, [pc, #328]	; 80021dc <SpiritRadioInit+0x32c>
 8002094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002098:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80021e0 <SpiritRadioInit+0x330>
 800209c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 80020a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80020b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	dd0a      	ble.n	80020dc <SpiritRadioInit+0x22c>
 80020c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ce:	edc7 7a00 	vstr	s15, [r7]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e007      	b.n	80020ec <SpiritRadioInit+0x23c>
 80020dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e4:	edc7 7a00 	vstr	s15, [r7]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80020ee:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <SpiritRadioInit+0x320>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <SpiritRadioInit+0x324>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d802      	bhi.n	80020fe <SpiritRadioInit+0x24e>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	777b      	strb	r3, [r7, #29]
 80020fc:	e035      	b.n	800216a <SpiritRadioInit+0x2ba>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 80020fe:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <SpiritRadioInit+0x320>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	0b5b      	lsrs	r3, r3, #13
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800210c:	eddf 6a33 	vldr	s13, [pc, #204]	; 80021dc <SpiritRadioInit+0x32c>
 8002110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002114:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80021e0 <SpiritRadioInit+0x330>
 8002118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800211c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002120:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002134:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	dd0a      	ble.n	8002158 <SpiritRadioInit+0x2a8>
 8002142:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800214a:	edc7 7a00 	vstr	s15, [r7]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	3301      	adds	r3, #1
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e007      	b.n	8002168 <SpiritRadioInit+0x2b8>
 8002158:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800215c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002160:	edc7 7a00 	vstr	s15, [r7]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 800216a:	f107 030f 	add.w	r3, r7, #15
 800216e:	461a      	mov	r2, r3
 8002170:	2101      	movs	r1, #1
 8002172:	2007      	movs	r0, #7
 8002174:	f001 febc 	bl	8003ef0 <RadioSpiWriteRegisters>
 8002178:	4602      	mov	r2, r0
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <SpiritRadioInit+0x31c>)
 800217c:	b212      	sxth	r2, r2
 800217e:	4611      	mov	r1, r2
 8002180:	7019      	strb	r1, [r3, #0]
 8002182:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002186:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <SpiritRadioInit+0x320>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <SpiritRadioInit+0x334>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d92a      	bls.n	80021e8 <SpiritRadioInit+0x338>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <SpiritRadioInit+0x320>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	085b      	lsrs	r3, r3, #1
 8002198:	ee07 3a90 	vmov	s15, r3
 800219c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80021a0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80021c0 <SpiritRadioInit+0x310>
 80021a4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	bfac      	ite	ge
 80021ae:	2301      	movge	r3, #1
 80021b0:	2300      	movlt	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f87b 	bl	80022b0 <SpiritRadioSetXtalFlag>
 80021ba:	e028      	b.n	800220e <SpiritRadioInit+0x35e>
 80021bc:	f3af 8000 	nop.w
 80021c0:	00000000 	.word	0x00000000
 80021c4:	4177d784 	.word	0x4177d784
 80021c8:	49742400 	.word	0x49742400
 80021cc:	20000200 	.word	0x20000200
 80021d0:	200001e4 	.word	0x200001e4
 80021d4:	01c9c37f 	.word	0x01c9c37f
 80021d8:	48800000 	.word	0x48800000
 80021dc:	49afd520 	.word	0x49afd520
 80021e0:	42800000 	.word	0x42800000
 80021e4:	01c9c380 	.word	0x01c9c380
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <SpiritRadioInit+0x3f8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80021f4:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80022a0 <SpiritRadioInit+0x3f0>
 80021f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	bfac      	ite	ge
 8002202:	2301      	movge	r3, #1
 8002204:	2300      	movlt	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	f000 f851 	bl	80022b0 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	330c      	adds	r3, #12
 8002212:	461a      	mov	r2, r3
 8002214:	2101      	movs	r1, #1
 8002216:	206c      	movs	r0, #108	; 0x6c
 8002218:	f001 fe6a 	bl	8003ef0 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	461a      	mov	r2, r3
 8002222:	2104      	movs	r1, #4
 8002224:	200c      	movs	r0, #12
 8002226:	f001 fe63 	bl	8003ef0 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 800222a:	f107 0318 	add.w	r3, r7, #24
 800222e:	461a      	mov	r2, r3
 8002230:	2104      	movs	r1, #4
 8002232:	201a      	movs	r0, #26
 8002234:	f001 fe5c 	bl	8003ef0 <RadioSpiWriteRegisters>
 8002238:	4602      	mov	r2, r0
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <SpiritRadioInit+0x3fc>)
 800223c:	b212      	sxth	r2, r2
 800223e:	4611      	mov	r1, r2
 8002240:	7019      	strb	r1, [r3, #0]
 8002242:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002246:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002248:	2001      	movs	r0, #1
 800224a:	f000 fee7 	bl	800301c <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002252:	23e3      	movs	r3, #227	; 0xe3
 8002254:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	461a      	mov	r2, r3
 800225c:	2102      	movs	r1, #2
 800225e:	2099      	movs	r0, #153	; 0x99
 8002260:	f001 fe46 	bl	8003ef0 <RadioSpiWriteRegisters>
 8002264:	4602      	mov	r2, r0
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <SpiritRadioInit+0x3fc>)
 8002268:	b212      	sxth	r2, r2
 800226a:	4611      	mov	r1, r2
 800226c:	7019      	strb	r1, [r3, #0]
 800226e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002272:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002274:	2322      	movs	r3, #34	; 0x22
 8002276:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	461a      	mov	r2, r3
 800227e:	2101      	movs	r1, #1
 8002280:	20bc      	movs	r0, #188	; 0xbc
 8002282:	f001 fe35 	bl	8003ef0 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f9b0 	bl	80025f0 <SpiritRadioSetFrequencyBase>
 8002290:	4603      	mov	r3, r0
  
}
 8002292:	4618      	mov	r0, r3
 8002294:	3730      	adds	r7, #48	; 0x30
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	f3af 8000 	nop.w
 80022a0:	00000000 	.word	0x00000000
 80022a4:	4177d784 	.word	0x4177d784
 80022a8:	200001e4 	.word	0x200001e4
 80022ac:	20000200 	.word	0x20000200

080022b0 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80022be:	f107 030f 	add.w	r3, r7, #15
 80022c2:	461a      	mov	r2, r3
 80022c4:	2101      	movs	r1, #1
 80022c6:	2001      	movs	r0, #1
 80022c8:	f001 fe96 	bl	8003ff8 <RadioSpiReadRegisters>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <SpiritRadioSetXtalFlag+0x70>)
 80022d0:	b212      	sxth	r2, r2
 80022d2:	4611      	mov	r1, r2
 80022d4:	7019      	strb	r1, [r3, #0]
 80022d6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022da:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d105      	bne.n	80022ee <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e004      	b.n	80022f8 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 80022f8:	f107 030f 	add.w	r3, r7, #15
 80022fc:	461a      	mov	r2, r3
 80022fe:	2101      	movs	r1, #1
 8002300:	2001      	movs	r0, #1
 8002302:	f001 fdf5 	bl	8003ef0 <RadioSpiWriteRegisters>
 8002306:	4602      	mov	r2, r0
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <SpiritRadioSetXtalFlag+0x70>)
 800230a:	b212      	sxth	r2, r2
 800230c:	4611      	mov	r1, r2
 800230e:	7019      	strb	r1, [r3, #0]
 8002310:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002314:	705a      	strb	r2, [r3, #1]
  
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000200 	.word	0x20000200

08002324 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002334:	2300      	movs	r3, #0
 8002336:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a3a      	ldr	r2, [pc, #232]	; (8002424 <SpiritRadioSearchWCP+0x100>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d906      	bls.n	800234e <SpiritRadioSearchWCP+0x2a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a39      	ldr	r2, [pc, #228]	; (8002428 <SpiritRadioSearchWCP+0x104>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d802      	bhi.n	800234e <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002348:	2306      	movs	r3, #6
 800234a:	73bb      	strb	r3, [r7, #14]
 800234c:	e01f      	b.n	800238e <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a36      	ldr	r2, [pc, #216]	; (800242c <SpiritRadioSearchWCP+0x108>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d906      	bls.n	8002364 <SpiritRadioSearchWCP+0x40>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a35      	ldr	r2, [pc, #212]	; (8002430 <SpiritRadioSearchWCP+0x10c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d802      	bhi.n	8002364 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 800235e:	230c      	movs	r3, #12
 8002360:	73bb      	strb	r3, [r7, #14]
 8002362:	e014      	b.n	800238e <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a33      	ldr	r2, [pc, #204]	; (8002434 <SpiritRadioSearchWCP+0x110>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d906      	bls.n	800237a <SpiritRadioSearchWCP+0x56>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a32      	ldr	r2, [pc, #200]	; (8002438 <SpiritRadioSearchWCP+0x114>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d802      	bhi.n	800237a <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002374:	2310      	movs	r3, #16
 8002376:	73bb      	strb	r3, [r7, #14]
 8002378:	e009      	b.n	800238e <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a2f      	ldr	r2, [pc, #188]	; (800243c <SpiritRadioSearchWCP+0x118>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d905      	bls.n	800238e <SpiritRadioSearchWCP+0x6a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a2e      	ldr	r2, [pc, #184]	; (8002440 <SpiritRadioSearchWCP+0x11c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d801      	bhi.n	800238e <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 800238a:	2320      	movs	r3, #32
 800238c:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <SpiritRadioSearchWCP+0x120>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	099b      	lsrs	r3, r3, #6
 8002398:	7bba      	ldrb	r2, [r7, #14]
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 80023a0:	f241 631f 	movw	r3, #5663	; 0x161f
 80023a4:	461a      	mov	r2, r3
 80023a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023aa:	fb03 f302 	mul.w	r3, r3, r2
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d302      	bcc.n	80023ba <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 80023b4:	230f      	movs	r3, #15
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e023      	b.n	8002402 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e005      	b.n	80023cc <SpiritRadioSearchWCP+0xa8>
 80023c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d0:	2b0e      	cmp	r3, #14
 80023d2:	dc0c      	bgt.n	80023ee <SpiritRadioSearchWCP+0xca>
 80023d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d8:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <SpiritRadioSearchWCP+0x124>)
 80023da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023de:	461a      	mov	r2, r3
 80023e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e4:	fb03 f302 	mul.w	r3, r3, r2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d8e8      	bhi.n	80023c0 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 80023ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <SpiritRadioSearchWCP+0xde>
      i--;
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002406:	425a      	negs	r2, r3
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	f002 0207 	and.w	r2, r2, #7
 8002410:	bf58      	it	pl
 8002412:	4253      	negpl	r3, r2
 8002414:	b25b      	sxtb	r3, r3
 8002416:	b2db      	uxtb	r3, r3
  
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	2e5f567f 	.word	0x2e5f567f
 8002428:	390c2fe0 	.word	0x390c2fe0
 800242c:	1701e47f 	.word	0x1701e47f
 8002430:	1c146a60 	.word	0x1c146a60
 8002434:	11d260bf 	.word	0x11d260bf
 8002438:	14ced7e0 	.word	0x14ced7e0
 800243c:	08e18f3f 	.word	0x08e18f3f
 8002440:	0a6fd060 	.word	0x0a6fd060
 8002444:	10624dd3 	.word	0x10624dd3
 8002448:	08006178 	.word	0x08006178

0800244c <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	461a      	mov	r2, r3
 8002456:	2104      	movs	r1, #4
 8002458:	2008      	movs	r0, #8
 800245a:	f001 fdcd 	bl	8003ff8 <RadioSpiReadRegisters>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <SpiritRadioGetSynthWord+0x48>)
 8002462:	b212      	sxth	r2, r2
 8002464:	4611      	mov	r1, r2
 8002466:	7019      	strb	r1, [r3, #0]
 8002468:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800246c:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 800246e:	793b      	ldrb	r3, [r7, #4]
 8002470:	055b      	lsls	r3, r3, #21
 8002472:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8002476:	797b      	ldrb	r3, [r7, #5]
 8002478:	035b      	lsls	r3, r3, #13
 800247a:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 800247c:	79bb      	ldrb	r3, [r7, #6]
 800247e:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002480:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002482:	79fa      	ldrb	r2, [r7, #7]
 8002484:	08d2      	lsrs	r2, r2, #3
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	4413      	add	r3, r2
  
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000200 	.word	0x20000200

08002498 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	461a      	mov	r2, r3
 80024a2:	2101      	movs	r1, #1
 80024a4:	200b      	movs	r0, #11
 80024a6:	f001 fda7 	bl	8003ff8 <RadioSpiReadRegisters>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <SpiritRadioGetBand+0x58>)
 80024ae:	b212      	sxth	r2, r2
 80024b0:	4611      	mov	r1, r2
 80024b2:	7019      	strb	r1, [r3, #0]
 80024b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024b8:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e00e      	b.n	80024e6 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d101      	bne.n	80024d6 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e007      	b.n	80024e6 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d101      	bne.n	80024e4 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 80024e0:	2302      	movs	r3, #2
 80024e2:	e000      	b.n	80024e6 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 80024e4:	2303      	movs	r3, #3
  }
  
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000200 	.word	0x20000200

080024f4 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	461a      	mov	r2, r3
 80024fe:	2101      	movs	r1, #1
 8002500:	206c      	movs	r0, #108	; 0x6c
 8002502:	f001 fd79 	bl	8003ff8 <RadioSpiReadRegisters>
 8002506:	4602      	mov	r2, r0
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SpiritRadioGetChannel+0x2c>)
 800250a:	b212      	sxth	r2, r2
 800250c:	4611      	mov	r1, r2
 800250e:	7019      	strb	r1, [r3, #0]
 8002510:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002514:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8002516:	79fb      	ldrb	r3, [r7, #7]
  
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000200 	.word	0x20000200

08002524 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	461a      	mov	r2, r3
 800252e:	2101      	movs	r1, #1
 8002530:	200c      	movs	r0, #12
 8002532:	f001 fd61 	bl	8003ff8 <RadioSpiReadRegisters>
 8002536:	4602      	mov	r2, r0
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <SpiritRadioGetChannelSpace+0x38>)
 800253a:	b212      	sxth	r2, r2
 800253c:	4611      	mov	r1, r2
 800253e:	7019      	strb	r1, [r3, #0]
 8002540:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002544:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	461a      	mov	r2, r3
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <SpiritRadioGetChannelSpace+0x3c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fb03 f302 	mul.w	r3, r3, r2
 8002552:	0bdb      	lsrs	r3, r3, #15
  
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000200 	.word	0x20000200
 8002560:	200001e4 	.word	0x200001e4

08002564 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	461a      	mov	r2, r3
 800256e:	2102      	movs	r1, #2
 8002570:	200e      	movs	r0, #14
 8002572:	f001 fd41 	bl	8003ff8 <RadioSpiReadRegisters>
 8002576:	4602      	mov	r2, r0
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <SpiritRadioGetFrequencyOffset+0x7c>)
 800257a:	b212      	sxth	r2, r2
 800257c:	4611      	mov	r1, r2
 800257e:	7019      	strb	r1, [r3, #0]
 8002580:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002584:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8002586:	793b      	ldrb	r3, [r7, #4]
 8002588:	b29b      	uxth	r3, r3
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	b29a      	uxth	r2, r3
 800258e:	797b      	ldrb	r3, [r7, #5]
 8002590:	b29b      	uxth	r3, r3
 8002592:	4413      	add	r3, r2
 8002594:	b29b      	uxth	r3, r3
 8002596:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <SpiritRadioGetFrequencyOffset+0x4a>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <SpiritRadioGetFrequencyOffset+0x80>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	e004      	b.n	80025b8 <SpiritRadioGetFrequencyOffset+0x54>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 80025ae:	887b      	ldrh	r3, [r7, #2]
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 80025b8:	1cbb      	adds	r3, r7, #2
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 80025be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <SpiritRadioGetFrequencyOffset+0x84>)
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	da02      	bge.n	80025d4 <SpiritRadioGetFrequencyOffset+0x70>
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <SpiritRadioGetFrequencyOffset+0x88>)
 80025d0:	441a      	add	r2, r3
 80025d2:	4613      	mov	r3, r2
 80025d4:	149b      	asrs	r3, r3, #18
  
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000200 	.word	0x20000200
 80025e4:	fffff000 	.word	0xfffff000
 80025e8:	200001e4 	.word	0x200001e4
 80025ec:	0003ffff 	.word	0x0003ffff

080025f0 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a72      	ldr	r2, [pc, #456]	; (80027cc <SpiritRadioSetFrequencyBase+0x1dc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d907      	bls.n	8002616 <SpiritRadioSetFrequencyBase+0x26>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a71      	ldr	r2, [pc, #452]	; (80027d0 <SpiritRadioSetFrequencyBase+0x1e0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d803      	bhi.n	8002616 <SpiritRadioSetFrequencyBase+0x26>
  {
    band = HIGH_BAND;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002614:	e022      	b.n	800265c <SpiritRadioSetFrequencyBase+0x6c>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a6e      	ldr	r2, [pc, #440]	; (80027d4 <SpiritRadioSetFrequencyBase+0x1e4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d907      	bls.n	800262e <SpiritRadioSetFrequencyBase+0x3e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a6d      	ldr	r2, [pc, #436]	; (80027d8 <SpiritRadioSetFrequencyBase+0x1e8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d803      	bhi.n	800262e <SpiritRadioSetFrequencyBase+0x3e>
  {
    band = MIDDLE_BAND;
 8002626:	2301      	movs	r3, #1
 8002628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800262c:	e016      	b.n	800265c <SpiritRadioSetFrequencyBase+0x6c>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a6a      	ldr	r2, [pc, #424]	; (80027dc <SpiritRadioSetFrequencyBase+0x1ec>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d907      	bls.n	8002646 <SpiritRadioSetFrequencyBase+0x56>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a69      	ldr	r2, [pc, #420]	; (80027e0 <SpiritRadioSetFrequencyBase+0x1f0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d803      	bhi.n	8002646 <SpiritRadioSetFrequencyBase+0x56>
  {
    band = LOW_BAND;
 800263e:	2302      	movs	r3, #2
 8002640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002644:	e00a      	b.n	800265c <SpiritRadioSetFrequencyBase+0x6c>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a66      	ldr	r2, [pc, #408]	; (80027e4 <SpiritRadioSetFrequencyBase+0x1f4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d906      	bls.n	800265c <SpiritRadioSetFrequencyBase+0x6c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <SpiritRadioSetFrequencyBase+0x1f8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d802      	bhi.n	800265c <SpiritRadioSetFrequencyBase+0x6c>
  {
    band = VERY_LOW_BAND;
 8002656:	2303      	movs	r3, #3
 8002658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800265c:	f7ff ff82 	bl	8002564 <SpiritRadioGetFrequencyOffset>
 8002660:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002662:	f7ff ff5f 	bl	8002524 <SpiritRadioGetChannelSpace>
 8002666:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002668:	f7ff ff44 	bl	80024f4 <SpiritRadioGetChannel>
 800266c:	4603      	mov	r3, r0
 800266e:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002670:	6a3a      	ldr	r2, [r7, #32]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	441a      	add	r2, r3
 8002676:	7efb      	ldrb	r3, [r7, #27]
 8002678:	69f9      	ldr	r1, [r7, #28]
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002682:	f000 fd8d 	bl	80031a0 <SpiritRadioGetRefDiv>
 8002686:	4603      	mov	r3, r0
 8002688:	3301      	adds	r3, #1
 800268a:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 800268c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002690:	2b03      	cmp	r3, #3
 8002692:	d83a      	bhi.n	800270a <SpiritRadioSetFrequencyBase+0x11a>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <SpiritRadioSetFrequencyBase+0xac>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026f5 	.word	0x080026f5
 80026a0:	080026dd 	.word	0x080026dd
 80026a4:	080026c5 	.word	0x080026c5
 80026a8:	080026ad 	.word	0x080026ad
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	4a4f      	ldr	r2, [pc, #316]	; (80027ec <SpiritRadioSetFrequencyBase+0x1fc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d803      	bhi.n	80026bc <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe fd07 	bl	80010c8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80026ba:	e026      	b.n	800270a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80026bc:	2001      	movs	r0, #1
 80026be:	f7fe fd03 	bl	80010c8 <SpiritCalibrationSelectVco>
    break;
 80026c2:	e022      	b.n	800270a <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	4a4a      	ldr	r2, [pc, #296]	; (80027f0 <SpiritRadioSetFrequencyBase+0x200>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d803      	bhi.n	80026d4 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe fcfb 	bl	80010c8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80026d2:	e01a      	b.n	800270a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7fe fcf7 	bl	80010c8 <SpiritCalibrationSelectVco>
    break;
 80026da:	e016      	b.n	800270a <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	4a45      	ldr	r2, [pc, #276]	; (80027f4 <SpiritRadioSetFrequencyBase+0x204>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d803      	bhi.n	80026ec <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7fe fcef 	bl	80010c8 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80026ea:	e00e      	b.n	800270a <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80026ec:	2001      	movs	r0, #1
 80026ee:	f7fe fceb 	bl	80010c8 <SpiritCalibrationSelectVco>
    break;
 80026f2:	e00a      	b.n	800270a <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	4a40      	ldr	r2, [pc, #256]	; (80027f8 <SpiritRadioSetFrequencyBase+0x208>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d803      	bhi.n	8002704 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe fce3 	bl	80010c8 <SpiritCalibrationSelectVco>
 8002702:	e002      	b.n	800270a <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002704:	2001      	movs	r0, #1
 8002706:	f7fe fcdf 	bl	80010c8 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f7ff fe0a 	bl	8002324 <SpiritRadioSearchWCP>
 8002710:	4603      	mov	r3, r0
 8002712:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8002714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002718:	4a38      	ldr	r2, [pc, #224]	; (80027fc <SpiritRadioSetFrequencyBase+0x20c>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	fb03 f302 	mul.w	r3, r3, r2
 8002724:	ee07 3a90 	vmov	s15, r3
 8002728:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	049b      	lsls	r3, r3, #18
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8002738:	4b31      	ldr	r3, [pc, #196]	; (8002800 <SpiritRadioSetFrequencyBase+0x210>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8002744:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8002748:	ee26 7b07 	vmul.f64	d7, d6, d7
 800274c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002750:	ee17 3a90 	vmov	r3, s15
 8002754:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	0d5b      	lsrs	r3, r3, #21
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	b2da      	uxtb	r2, r3
 8002762:	7cbb      	ldrb	r3, [r7, #18]
 8002764:	015b      	lsls	r3, r3, #5
 8002766:	b2db      	uxtb	r3, r3
 8002768:	4313      	orrs	r3, r2
 800276a:	b2db      	uxtb	r3, r3
 800276c:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	0b5b      	lsrs	r3, r3, #13
 8002772:	b2db      	uxtb	r3, r3
 8002774:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	b2db      	uxtb	r3, r3
 800277c:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	b2da      	uxtb	r2, r3
 8002786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800278a:	491e      	ldr	r1, [pc, #120]	; (8002804 <SpiritRadioSetFrequencyBase+0x214>)
 800278c:	5ccb      	ldrb	r3, [r1, r3]
 800278e:	4313      	orrs	r3, r2
 8002790:	b2db      	uxtb	r3, r3
 8002792:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8002794:	f107 0308 	add.w	r3, r7, #8
 8002798:	461a      	mov	r2, r3
 800279a:	2104      	movs	r1, #4
 800279c:	2008      	movs	r0, #8
 800279e:	f001 fba7 	bl	8003ef0 <RadioSpiWriteRegisters>
 80027a2:	4602      	mov	r2, r0
 80027a4:	4b18      	ldr	r3, [pc, #96]	; (8002808 <SpiritRadioSetFrequencyBase+0x218>)
 80027a6:	b212      	sxth	r2, r2
 80027a8:	4611      	mov	r1, r2
 80027aa:	7019      	strb	r1, [r3, #0]
 80027ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027b0:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <SpiritRadioSetFrequencyBase+0x21c>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d103      	bne.n	80027c2 <SpiritRadioSetFrequencyBase+0x1d2>
    return SpiritManagementWaVcoCalibration();
 80027ba:	f7fe ffa1 	bl	8001700 <SpiritManagementWaVcoCalibration>
 80027be:	4603      	mov	r3, r0
 80027c0:	e000      	b.n	80027c4 <SpiritRadioSetFrequencyBase+0x1d4>
  
  return 0;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3728      	adds	r7, #40	; 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2e5f567f 	.word	0x2e5f567f
 80027d0:	390c2fe0 	.word	0x390c2fe0
 80027d4:	1701e47f 	.word	0x1701e47f
 80027d8:	1c146a60 	.word	0x1c146a60
 80027dc:	11d260bf 	.word	0x11d260bf
 80027e0:	14ced7e0 	.word	0x14ced7e0
 80027e4:	08e18f3f 	.word	0x08e18f3f
 80027e8:	0a6fd060 	.word	0x0a6fd060
 80027ec:	099cf4e1 	.word	0x099cf4e1
 80027f0:	1339e9c3 	.word	0x1339e9c3
 80027f4:	19a28d05 	.word	0x19a28d05
 80027f8:	33451a0a 	.word	0x33451a0a
 80027fc:	080060bc 	.word	0x080060bc
 8002800:	200001e4 	.word	0x200001e4
 8002804:	080060c0 	.word	0x080060c0
 8002808:	20000200 	.word	0x20000200
 800280c:	200000b5 	.word	0x200000b5

08002810 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8002816:	f7ff fe19 	bl	800244c <SpiritRadioGetSynthWord>
 800281a:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 800281c:	f7ff fe3c 	bl	8002498 <SpiritRadioGetBand>
 8002820:	4603      	mov	r3, r0
 8002822:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8002824:	f000 fcbc 	bl	80031a0 <SpiritRadioGetRefDiv>
 8002828:	4603      	mov	r3, r0
 800282a:	3301      	adds	r3, #1
 800282c:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <SpiritRadioGetFrequencyBase+0x70>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	ee07 3a90 	vmov	s15, r3
 8002840:	eeb8 4b67 	vcvt.f64.u32	d4, s15
 8002844:	78bb      	ldrb	r3, [r7, #2]
 8002846:	049b      	lsls	r3, r3, #18
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	490e      	ldr	r1, [pc, #56]	; (8002884 <SpiritRadioGetFrequencyBase+0x74>)
 800284c:	5c8a      	ldrb	r2, [r1, r2]
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800285a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800285e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002862:	eeb0 0b47 	vmov.f64	d0, d7
 8002866:	f003 fbc1 	bl	8005fec <round>
 800286a:	eeb0 7b40 	vmov.f64	d7, d0
 800286e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002872:	ee17 3a90 	vmov	r3, s15
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200001e4 	.word	0x200001e4
 8002884:	080060bc 	.word	0x080060bc

08002888 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8002894:	2300      	movs	r3, #0
 8002896:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8002898:	230f      	movs	r3, #15
 800289a:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 80028a0:	f000 fcd0 	bl	8003244 <SpiritRadioGetDigDiv>
 80028a4:	4603      	mov	r3, r0
 80028a6:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 80028a8:	e015      	b.n	80028d6 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 80028aa:	4b50      	ldr	r3, [pc, #320]	; (80029ec <SpiritRadioSearchDatarateME+0x164>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028b2:	f1c3 0114 	rsb	r1, r3, #20
 80028b6:	7ebb      	ldrb	r3, [r7, #26]
 80028b8:	440b      	add	r3, r1
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d302      	bcc.n	80028ca <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	763b      	strb	r3, [r7, #24]
 80028c8:	e005      	b.n	80028d6 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 80028ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 80028d6:	7e3b      	ldrb	r3, [r7, #24]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <SpiritRadioSearchDatarateME+0x5e>
 80028de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	dae1      	bge.n	80028aa <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 80028e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da01      	bge.n	80028f2 <SpiritRadioSearchDatarateME+0x6a>
 80028ee:	2300      	movs	r3, #0
 80028f0:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 80028f2:	7ffa      	ldrb	r2, [r7, #31]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 80028f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80028fc:	f1c3 0317 	rsb	r3, r3, #23
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	409a      	lsls	r2, r3
 8002904:	4b39      	ldr	r3, [pc, #228]	; (80029ec <SpiritRadioSearchDatarateME+0x164>)
 8002906:	6819      	ldr	r1, [r3, #0]
 8002908:	7ebb      	ldrb	r3, [r7, #26]
 800290a:	3305      	adds	r3, #5
 800290c:	fa21 f303 	lsr.w	r3, r1, r3
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8002916:	2300      	movs	r3, #0
 8002918:	77bb      	strb	r3, [r7, #30]
 800291a:	e033      	b.n	8002984 <SpiritRadioSearchDatarateME+0xfc>
  {
    if((cMantissaTmp+j-1))
 800291c:	7e7a      	ldrb	r2, [r7, #25]
 800291e:	7fbb      	ldrb	r3, [r7, #30]
 8002920:	4413      	add	r3, r2
 8002922:	2b01      	cmp	r3, #1
 8002924:	d022      	beq.n	800296c <SpiritRadioSearchDatarateME+0xe4>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	b29a      	uxth	r2, r3
 800292a:	7e7b      	ldrb	r3, [r7, #25]
 800292c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8002930:	7fbb      	ldrb	r3, [r7, #30]
 8002932:	440b      	add	r3, r1
 8002934:	3b01      	subs	r3, #1
 8002936:	4618      	mov	r0, r3
 8002938:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <SpiritRadioSearchDatarateME+0x164>)
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	7ebb      	ldrb	r3, [r7, #26]
 800293e:	3305      	adds	r3, #5
 8002940:	fa21 f303 	lsr.w	r3, r1, r3
 8002944:	fb03 f100 	mul.w	r1, r3, r0
 8002948:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800294c:	f1c3 0317 	rsb	r3, r3, #23
 8002950:	fa21 f303 	lsr.w	r3, r1, r3
 8002954:	b29b      	uxth	r3, r3
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	b29a      	uxth	r2, r3
 800295a:	7fbb      	ldrb	r3, [r7, #30]
 800295c:	b212      	sxth	r2, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	f107 0120 	add.w	r1, r7, #32
 8002964:	440b      	add	r3, r1
 8002966:	f823 2c10 	strh.w	r2, [r3, #-16]
 800296a:	e008      	b.n	800297e <SpiritRadioSearchDatarateME+0xf6>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 800296c:	7fbb      	ldrb	r3, [r7, #30]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	f107 0220 	add.w	r2, r7, #32
 8002974:	4413      	add	r3, r2
 8002976:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800297a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 800297e:	7fbb      	ldrb	r3, [r7, #30]
 8002980:	3301      	adds	r3, #1
 8002982:	77bb      	strb	r3, [r7, #30]
 8002984:	7fbb      	ldrb	r3, [r7, #30]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d9c8      	bls.n	800291c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 800298a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298e:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8002990:	2300      	movs	r3, #0
 8002992:	76fb      	strb	r3, [r7, #27]
 8002994:	e023      	b.n	80029de <SpiritRadioSearchDatarateME+0x156>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8002996:	7efb      	ldrb	r3, [r7, #27]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	f107 0220 	add.w	r2, r7, #32
 800299e:	4413      	add	r3, r2
 80029a0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80029a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80029a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80029ac:	8bbb      	ldrh	r3, [r7, #28]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	da12      	bge.n	80029d8 <SpiritRadioSearchDatarateME+0x150>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80029b2:	7efb      	ldrb	r3, [r7, #27]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	f107 0220 	add.w	r2, r7, #32
 80029ba:	4413      	add	r3, r2
 80029bc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bfb8      	it	lt
 80029c4:	425b      	neglt	r3, r3
 80029c6:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 80029c8:	7e7a      	ldrb	r2, [r7, #25]
 80029ca:	7efb      	ldrb	r3, [r7, #27]
 80029cc:	4413      	add	r3, r2
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 80029d8:	7efb      	ldrb	r3, [r7, #27]
 80029da:	3301      	adds	r3, #1
 80029dc:	76fb      	strb	r3, [r7, #27]
 80029de:	7efb      	ldrb	r3, [r7, #27]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d9d8      	bls.n	8002996 <SpiritRadioSearchDatarateME+0x10e>
    }
  }
  
}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200001e4 	.word	0x200001e4

080029f0 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8002a02:	f000 fc1f 	bl	8003244 <SpiritRadioGetDigDiv>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002a12:	e002      	b.n	8002a1a <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8002a1a:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <SpiritRadioSearchChannelBwME+0x1c4>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	4a64      	ldr	r2, [pc, #400]	; (8002bb8 <SpiritRadioSearchChannelBwME+0x1c8>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a36:	e006      	b.n	8002a46 <SpiritRadioSearchChannelBwME+0x56>
 8002a38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a4a:	2b59      	cmp	r3, #89	; 0x59
 8002a4c:	dc0f      	bgt.n	8002a6e <SpiritRadioSearchChannelBwME+0x7e>
 8002a4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a52:	4a5a      	ldr	r2, [pc, #360]	; (8002bbc <SpiritRadioSearchChannelBwME+0x1cc>)
 8002a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fb03 f302 	mul.w	r3, r3, r2
 8002a60:	4a57      	ldr	r2, [pc, #348]	; (8002bc0 <SpiritRadioSearchChannelBwME+0x1d0>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0adb      	lsrs	r3, r3, #11
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d3e4      	bcc.n	8002a38 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 8002a6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d07d      	beq.n	8002b72 <SpiritRadioSearchChannelBwME+0x182>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8002a76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a7a:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002a82:	e03e      	b.n	8002b02 <SpiritRadioSearchChannelBwME+0x112>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8002a84:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8002a88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	da07      	bge.n	8002aa4 <SpiritRadioSearchChannelBwME+0xb4>
 8002a94:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8002a98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	2b59      	cmp	r3, #89	; 0x59
 8002aa2:	dc1f      	bgt.n	8002ae4 <SpiritRadioSearchChannelBwME+0xf4>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8002aac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	4941      	ldr	r1, [pc, #260]	; (8002bbc <SpiritRadioSearchChannelBwME+0x1cc>)
 8002ab6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002aba:	4619      	mov	r1, r3
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	fb03 f301 	mul.w	r3, r3, r1
 8002ac2:	493f      	ldr	r1, [pc, #252]	; (8002bc0 <SpiritRadioSearchChannelBwME+0x1d0>)
 8002ac4:	fba1 1303 	umull	r1, r3, r1, r3
 8002ac8:	0adb      	lsrs	r3, r3, #11
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ad4:	b212      	sxth	r2, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002adc:	440b      	add	r3, r1
 8002ade:	f823 2c14 	strh.w	r2, [r3, #-20]
 8002ae2:	e009      	b.n	8002af8 <SpiritRadioSearchChannelBwME+0x108>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8002ae4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aee:	4413      	add	r3, r2
 8002af0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002af4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8002af8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002afc:	3301      	adds	r3, #1
 8002afe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002b02:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d9bc      	bls.n	8002a84 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8002b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b0e:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002b16:	e028      	b.n	8002b6a <SpiritRadioSearchChannelBwME+0x17a>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8002b18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b22:	4413      	add	r3, r2
 8002b24:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8002b28:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002b2c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002b30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b32:	429a      	cmp	r2, r3
 8002b34:	da14      	bge.n	8002b60 <SpiritRadioSearchChannelBwME+0x170>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8002b36:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b40:	4413      	add	r3, r2
 8002b42:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bfb8      	it	lt
 8002b4a:	425b      	neglt	r3, r3
 8002b4c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 8002b4e:	7efa      	ldrb	r2, [r7, #27]
 8002b50:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b54:	4413      	add	r3, r2
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8002b60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b64:	3301      	adds	r3, #1
 8002b66:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002b6a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d9d2      	bls.n	8002b18 <SpiritRadioSearchChannelBwME+0x128>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8002b72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002b76:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <SpiritRadioSearchChannelBwME+0x1d4>)
 8002b78:	fb82 1203 	smull	r1, r2, r2, r3
 8002b7c:	1052      	asrs	r2, r2, #1
 8002b7e:	17db      	asrs	r3, r3, #31
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	b25b      	sxtb	r3, r3
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8002b8a:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <SpiritRadioSearchChannelBwME+0x1d4>)
 8002b90:	fb83 1302 	smull	r1, r3, r3, r2
 8002b94:	1059      	asrs	r1, r3, #1
 8002b96:	17d3      	asrs	r3, r2, #31
 8002b98:	1ac9      	subs	r1, r1, r3
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	440b      	add	r3, r1
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	701a      	strb	r2, [r3, #0]
  
}
 8002baa:	bf00      	nop
 8002bac:	3728      	adds	r7, #40	; 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200001e4 	.word	0x200001e4
 8002bb8:	51eb851f 	.word	0x51eb851f
 8002bbc:	080060c4 	.word	0x080060c4
 8002bc0:	c9a633fd 	.word	0xc9a633fd
 8002bc4:	38e38e39 	.word	0x38e38e39

08002bc8 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b08b      	sub	sp, #44	; 0x2c
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8002bd8:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <SpiritRadioSearchFreqDevME+0x130>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002be4:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002cfc <SpiritRadioSearchFreqDevME+0x134>
 8002be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bec:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002bf6:	e022      	b.n	8002c3e <SpiritRadioSearchFreqDevME+0x76>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8002bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c0a:	eeb1 6b0e 	vmov.f64	d6, #30	; 0x40f00000  7.5
 8002c0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c26:	ee17 3a90 	vmov	r3, s15
 8002c2a:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d309      	bcc.n	8002c48 <SpiritRadioSearchFreqDevME+0x80>
  for(i=0;i<10;i++)
 8002c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d9d8      	bls.n	8002bf8 <SpiritRadioSearchFreqDevME+0x30>
 8002c46:	e000      	b.n	8002c4a <SpiritRadioSearchFreqDevME+0x82>
      break;
 8002c48:	bf00      	nop
  }
  (*pcE) = i;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002c50:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c58:	e030      	b.n	8002cbc <SpiritRadioSearchFreqDevME+0xf4>
  {
    bp=b;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8002c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c6a:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8002c6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002c76:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2301      	movs	r3, #1
 8002c82:	4093      	lsls	r3, r2
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002c90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c98:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca4:	ee17 3a90 	vmov	r3, s15
 8002ca8:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d309      	bcc.n	8002cc6 <SpiritRadioSearchFreqDevME+0xfe>
  for(i=0;i<8;i++)
 8002cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cc0:	2b07      	cmp	r3, #7
 8002cc2:	d9ca      	bls.n	8002c5a <SpiritRadioSearchFreqDevME+0x92>
 8002cc4:	e000      	b.n	8002cc8 <SpiritRadioSearchFreqDevME+0x100>
      break;
 8002cc6:	bf00      	nop
  }
  
  (*pcM)=i;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002cce:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	1ad2      	subs	r2, r2, r3
 8002cd6:	69f9      	ldr	r1, [r7, #28]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1acb      	subs	r3, r1, r3
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d205      	bcs.n	8002cec <SpiritRadioSearchFreqDevME+0x124>
    (*pcM)--;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	701a      	strb	r2, [r3, #0]
  
}
 8002cec:	bf00      	nop
 8002cee:	372c      	adds	r7, #44	; 0x2c
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	200001e4 	.word	0x200001e4
 8002cfc:	48800000 	.word	0x48800000

08002d00 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i;
  uint8_t j=0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a74      	ldr	r2, [pc, #464]	; (8002ee4 <SpiritRadioGetdBm2Reg+0x1e4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d90c      	bls.n	8002d32 <SpiritRadioGetdBm2Reg+0x32>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a73      	ldr	r2, [pc, #460]	; (8002ee8 <SpiritRadioGetdBm2Reg+0x1e8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d808      	bhi.n	8002d32 <SpiritRadioGetdBm2Reg+0x32>
  {
    i=0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4a71      	ldr	r2, [pc, #452]	; (8002eec <SpiritRadioGetdBm2Reg+0x1ec>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d822      	bhi.n	8002d72 <SpiritRadioGetdBm2Reg+0x72>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	75fb      	strb	r3, [r7, #23]
 8002d30:	e01f      	b.n	8002d72 <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a6e      	ldr	r2, [pc, #440]	; (8002ef0 <SpiritRadioGetdBm2Reg+0x1f0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d906      	bls.n	8002d48 <SpiritRadioGetdBm2Reg+0x48>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4a6d      	ldr	r2, [pc, #436]	; (8002ef4 <SpiritRadioGetdBm2Reg+0x1f4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d802      	bhi.n	8002d48 <SpiritRadioGetdBm2Reg+0x48>
  {
    i=2;
 8002d42:	2302      	movs	r3, #2
 8002d44:	75fb      	strb	r3, [r7, #23]
 8002d46:	e014      	b.n	8002d72 <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a6b      	ldr	r2, [pc, #428]	; (8002ef8 <SpiritRadioGetdBm2Reg+0x1f8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d906      	bls.n	8002d5e <SpiritRadioGetdBm2Reg+0x5e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a6a      	ldr	r2, [pc, #424]	; (8002efc <SpiritRadioGetdBm2Reg+0x1fc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d802      	bhi.n	8002d5e <SpiritRadioGetdBm2Reg+0x5e>
  {
    i=3;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	75fb      	strb	r3, [r7, #23]
 8002d5c:	e009      	b.n	8002d72 <SpiritRadioGetdBm2Reg+0x72>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a67      	ldr	r2, [pc, #412]	; (8002f00 <SpiritRadioGetdBm2Reg+0x200>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d905      	bls.n	8002d72 <SpiritRadioGetdBm2Reg+0x72>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a66      	ldr	r2, [pc, #408]	; (8002f04 <SpiritRadioGetdBm2Reg+0x204>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d801      	bhi.n	8002d72 <SpiritRadioGetdBm2Reg+0x72>
  {
    i=4;
 8002d6e:	2304      	movs	r3, #4
 8002d70:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8002d76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	dd2f      	ble.n	8002de4 <SpiritRadioGetdBm2Reg+0xe4>
 8002d84:	7dfa      	ldrb	r2, [r7, #23]
 8002d86:	4960      	ldr	r1, [pc, #384]	; (8002f08 <SpiritRadioGetdBm2Reg+0x208>)
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	440b      	add	r3, r1
 8002d92:	3308      	adds	r3, #8
 8002d94:	edd3 7a00 	vldr	s15, [r3]
 8002d98:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8002d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002da0:	7dfa      	ldrb	r2, [r7, #23]
 8002da2:	4959      	ldr	r1, [pc, #356]	; (8002f08 <SpiritRadioGetdBm2Reg+0x208>)
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	330c      	adds	r3, #12
 8002db0:	ed93 6a00 	vldr	s12, [r3]
 8002db4:	7dfa      	ldrb	r2, [r7, #23]
 8002db6:	4954      	ldr	r1, [pc, #336]	; (8002f08 <SpiritRadioGetdBm2Reg+0x208>)
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	edd3 6a00 	vldr	s13, [r3]
 8002dc8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ddc:	dd02      	ble.n	8002de4 <SpiritRadioGetdBm2Reg+0xe4>
      j=0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	75bb      	strb	r3, [r7, #22]
 8002de2:	e035      	b.n	8002e50 <SpiritRadioGetdBm2Reg+0x150>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8002de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df0:	d82e      	bhi.n	8002e50 <SpiritRadioGetdBm2Reg+0x150>
 8002df2:	7dfa      	ldrb	r2, [r7, #23]
 8002df4:	4944      	ldr	r1, [pc, #272]	; (8002f08 <SpiritRadioGetdBm2Reg+0x208>)
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	3308      	adds	r3, #8
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002f0c <SpiritRadioGetdBm2Reg+0x20c>
 8002e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e0e:	7dfa      	ldrb	r2, [r7, #23]
 8002e10:	493d      	ldr	r1, [pc, #244]	; (8002f08 <SpiritRadioGetdBm2Reg+0x208>)
 8002e12:	4613      	mov	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	ed93 6a00 	vldr	s12, [r3]
 8002e22:	7dfa      	ldrb	r2, [r7, #23]
 8002e24:	4938      	ldr	r1, [pc, #224]	; (8002f08 <SpiritRadioGetdBm2Reg+0x208>)
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	440b      	add	r3, r1
 8002e30:	3308      	adds	r3, #8
 8002e32:	edd3 6a00 	vldr	s13, [r3]
 8002e36:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	d501      	bpl.n	8002e50 <SpiritRadioGetdBm2Reg+0x150>
      j=2;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8002e50:	7dfa      	ldrb	r2, [r7, #23]
 8002e52:	7dbb      	ldrb	r3, [r7, #22]
 8002e54:	0059      	lsls	r1, r3, #1
 8002e56:	482c      	ldr	r0, [pc, #176]	; (8002f08 <SpiritRadioGetdBm2Reg+0x208>)
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	440b      	add	r3, r1
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4403      	add	r3, r0
 8002e66:	ed93 7a00 	vldr	s14, [r3]
 8002e6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e72:	7dfa      	ldrb	r2, [r7, #23]
 8002e74:	7dbb      	ldrb	r3, [r7, #22]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	1c59      	adds	r1, r3, #1
 8002e7a:	4823      	ldr	r0, [pc, #140]	; (8002f08 <SpiritRadioGetdBm2Reg+0x208>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4403      	add	r3, r0
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e92:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8002e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea6:	d503      	bpl.n	8002eb0 <SpiritRadioGetdBm2Reg+0x1b0>
    fReg=1;
 8002ea8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e00a      	b.n	8002ec6 <SpiritRadioGetdBm2Reg+0x1c6>
  else if(fReg>90) 
 8002eb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eb4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002f10 <SpiritRadioGetdBm2Reg+0x210>
 8002eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec0:	dd01      	ble.n	8002ec6 <SpiritRadioGetdBm2Reg+0x1c6>
    fReg=90;
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <SpiritRadioGetdBm2Reg+0x214>)
 8002ec4:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8002ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ece:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ed2:	793b      	ldrb	r3, [r7, #4]
 8002ed4:	b2db      	uxtb	r3, r3
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	2e5f567f 	.word	0x2e5f567f
 8002ee8:	390c2fe0 	.word	0x390c2fe0
 8002eec:	35a4e8ff 	.word	0x35a4e8ff
 8002ef0:	1701e47f 	.word	0x1701e47f
 8002ef4:	1c146a60 	.word	0x1c146a60
 8002ef8:	11d260bf 	.word	0x11d260bf
 8002efc:	14ced7e0 	.word	0x14ced7e0
 8002f00:	08e18f3f 	.word	0x08e18f3f
 8002f04:	0a6fd060 	.word	0x0a6fd060
 8002f08:	08006198 	.word	0x08006198
 8002f0c:	42200000 	.word	0x42200000
 8002f10:	42b40000 	.word	0x42b40000
 8002f14:	42b40000 	.word	0x42b40000

08002f18 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	ed87 0a00 	vstr	s0, [r7]
 8002f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8002f26:	f7ff fc73 	bl	8002810 <SpiritRadioGetFrequencyBase>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	ed97 0a00 	vldr	s0, [r7]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fee5 	bl	8002d00 <SpiritRadioGetdBm2Reg>
 8002f36:	4603      	mov	r3, r0
 8002f38:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f1c3 0317 	rsb	r3, r3, #23
 8002f40:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8002f42:	f107 020e 	add.w	r2, r7, #14
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 ffd0 	bl	8003ef0 <RadioSpiWriteRegisters>
 8002f50:	4602      	mov	r2, r0
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <SpiritRadioSetPALeveldBm+0x50>)
 8002f54:	b212      	sxth	r2, r2
 8002f56:	4611      	mov	r1, r2
 8002f58:	7019      	strb	r1, [r3, #0]
 8002f5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f5e:	705a      	strb	r2, [r3, #1]
  
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000200 	.word	0x20000200

08002f6c <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8002f76:	f107 030f 	add.w	r3, r7, #15
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	2018      	movs	r0, #24
 8002f80:	f001 f83a 	bl	8003ff8 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8002f98:	f107 030f 	add.w	r3, r7, #15
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	2018      	movs	r0, #24
 8002fa2:	f000 ffa5 	bl	8003ef0 <RadioSpiWriteRegisters>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <SpiritRadioSetPACwc+0x54>)
 8002faa:	b212      	sxth	r2, r2
 8002fac:	4611      	mov	r1, r2
 8002fae:	7019      	strb	r1, [r3, #0]
 8002fb0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fb4:	705a      	strb	r2, [r3, #1]
  
}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000200 	.word	0x20000200

08002fc4 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8002fce:	f107 030f 	add.w	r3, r7, #15
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	2018      	movs	r0, #24
 8002fd8:	f001 f80e 	bl	8003ff8 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	f023 0307 	bic.w	r3, r3, #7
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8002ff0:	f107 030f 	add.w	r3, r7, #15
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2018      	movs	r0, #24
 8002ffa:	f000 ff79 	bl	8003ef0 <RadioSpiWriteRegisters>
 8002ffe:	4602      	mov	r2, r0
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003002:	b212      	sxth	r2, r2
 8003004:	4611      	mov	r1, r2
 8003006:	7019      	strb	r1, [r3, #0]
 8003008:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800300c:	705a      	strb	r2, [r3, #1]
  
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000200 	.word	0x20000200

0800301c <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 800302a:	f107 030f 	add.w	r3, r7, #15
 800302e:	461a      	mov	r2, r3
 8003030:	2101      	movs	r1, #1
 8003032:	201e      	movs	r0, #30
 8003034:	f000 ffe0 	bl	8003ff8 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003044:	b2db      	uxtb	r3, r3
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e004      	b.n	8003054 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003050:	b2db      	uxtb	r3, r3
 8003052:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003054:	f107 030f 	add.w	r3, r7, #15
 8003058:	461a      	mov	r2, r3
 800305a:	2101      	movs	r1, #1
 800305c:	201e      	movs	r0, #30
 800305e:	f000 ff47 	bl	8003ef0 <RadioSpiWriteRegisters>
 8003062:	4602      	mov	r2, r0
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <SpiritRadioAFCFreezeOnSync+0x60>)
 8003066:	b212      	sxth	r2, r2
 8003068:	4611      	mov	r1, r2
 800306a:	7019      	strb	r1, [r3, #0]
 800306c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003070:	705a      	strb	r2, [r3, #1]
  
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000200 	.word	0x20000200

08003080 <SpiritRadioCsBlanking>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioCsBlanking(SpiritFunctionalState xNewState)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the ANT_SELECT_CONF_BASE and mask the CS_BLANKING BIT field */
  SpiritSpiReadRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 800308a:	f107 030f 	add.w	r3, r7, #15
 800308e:	461a      	mov	r2, r3
 8003090:	2101      	movs	r1, #1
 8003092:	2027      	movs	r0, #39	; 0x27
 8003094:	f000 ffb0 	bl	8003ff8 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d105      	bne.n	80030aa <SpiritRadioCsBlanking+0x2a>
  {
    tempRegValue |= ANT_SELECT_CS_BLANKING_MASK;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	f043 0310 	orr.w	r3, r3, #16
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	73fb      	strb	r3, [r7, #15]
 80030a8:	e004      	b.n	80030b4 <SpiritRadioCsBlanking+0x34>
  }
  else
  {
    tempRegValue &= (~ANT_SELECT_CS_BLANKING_MASK);
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	f023 0310 	bic.w	r3, r3, #16
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the ANT_SELECT_CONF register */
  g_xStatus = SpiritSpiWriteRegisters(ANT_SELECT_CONF_BASE, 1, &tempRegValue);
 80030b4:	f107 030f 	add.w	r3, r7, #15
 80030b8:	461a      	mov	r2, r3
 80030ba:	2101      	movs	r1, #1
 80030bc:	2027      	movs	r0, #39	; 0x27
 80030be:	f000 ff17 	bl	8003ef0 <RadioSpiWriteRegisters>
 80030c2:	4602      	mov	r2, r0
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <SpiritRadioCsBlanking+0x5c>)
 80030c6:	b212      	sxth	r2, r2
 80030c8:	4611      	mov	r1, r2
 80030ca:	7019      	strb	r1, [r3, #0]
 80030cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80030d0:	705a      	strb	r2, [r3, #1]
  
  
}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000200 	.word	0x20000200

080030e0 <SpiritRadioPersistenRx>:
* @param  xNewState new state of this mode.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioPersistenRx(SpiritFunctionalState xNewState)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the PROTOCOL0_BASE and mask the PROTOCOL0_PERS_RX_MASK bitfield */
  SpiritSpiReadRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 80030ea:	f107 030f 	add.w	r3, r7, #15
 80030ee:	461a      	mov	r2, r3
 80030f0:	2101      	movs	r1, #1
 80030f2:	2052      	movs	r0, #82	; 0x52
 80030f4:	f000 ff80 	bl	8003ff8 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d105      	bne.n	800310a <SpiritRadioPersistenRx+0x2a>
  {
    tempRegValue |= PROTOCOL0_PERS_RX_MASK;
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	b2db      	uxtb	r3, r3
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e004      	b.n	8003114 <SpiritRadioPersistenRx+0x34>
  }
  else
  {
    tempRegValue &= (~PROTOCOL0_PERS_RX_MASK);
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	f023 0302 	bic.w	r3, r3, #2
 8003110:	b2db      	uxtb	r3, r3
 8003112:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the PROTOCOL0_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL0_BASE, 1, &tempRegValue);
 8003114:	f107 030f 	add.w	r3, r7, #15
 8003118:	461a      	mov	r2, r3
 800311a:	2101      	movs	r1, #1
 800311c:	2052      	movs	r0, #82	; 0x52
 800311e:	f000 fee7 	bl	8003ef0 <RadioSpiWriteRegisters>
 8003122:	4602      	mov	r2, r0
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <SpiritRadioPersistenRx+0x5c>)
 8003126:	b212      	sxth	r2, r2
 8003128:	4611      	mov	r1, r2
 800312a:	7019      	strb	r1, [r3, #0]
 800312c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003130:	705a      	strb	r2, [r3, #1]
  
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000200 	.word	0x20000200

08003140 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800314a:	f107 030f 	add.w	r3, r7, #15
 800314e:	461a      	mov	r2, r3
 8003150:	2101      	movs	r1, #1
 8003152:	209e      	movs	r0, #158	; 0x9e
 8003154:	f000 ff50 	bl	8003ff8 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d105      	bne.n	800316a <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003164:	b2db      	uxtb	r3, r3
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	e004      	b.n	8003174 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003170:	b2db      	uxtb	r3, r3
 8003172:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003174:	f107 030f 	add.w	r3, r7, #15
 8003178:	461a      	mov	r2, r3
 800317a:	2101      	movs	r1, #1
 800317c:	209e      	movs	r0, #158	; 0x9e
 800317e:	f000 feb7 	bl	8003ef0 <RadioSpiWriteRegisters>
 8003182:	4602      	mov	r2, r0
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <SpiritRadioSetRefDiv+0x5c>)
 8003186:	b212      	sxth	r2, r2
 8003188:	4611      	mov	r1, r2
 800318a:	7019      	strb	r1, [r3, #0]
 800318c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003190:	705a      	strb	r2, [r3, #1]
  
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000200 	.word	0x20000200

080031a0 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80031a6:	1dfb      	adds	r3, r7, #7
 80031a8:	461a      	mov	r2, r3
 80031aa:	2101      	movs	r1, #1
 80031ac:	209e      	movs	r0, #158	; 0x9e
 80031ae:	f000 ff23 	bl	8003ff8 <RadioSpiReadRegisters>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <SpiritRadioGetRefDiv+0x40>)
 80031b6:	b212      	sxth	r2, r2
 80031b8:	4611      	mov	r1, r2
 80031ba:	7019      	strb	r1, [r3, #0]
 80031bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80031c0:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	09db      	lsrs	r3, r3, #7
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 80031d4:	2300      	movs	r3, #0
  }
  
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000200 	.word	0x20000200

080031e4 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80031ee:	f107 030f 	add.w	r3, r7, #15
 80031f2:	461a      	mov	r2, r3
 80031f4:	2101      	movs	r1, #1
 80031f6:	20b4      	movs	r0, #180	; 0xb4
 80031f8:	f000 fefe 	bl	8003ff8 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d105      	bne.n	800320e <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	f023 0308 	bic.w	r3, r3, #8
 8003208:	b2db      	uxtb	r3, r3
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e004      	b.n	8003218 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	b2db      	uxtb	r3, r3
 8003216:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003218:	f107 030f 	add.w	r3, r7, #15
 800321c:	461a      	mov	r2, r3
 800321e:	2101      	movs	r1, #1
 8003220:	20b4      	movs	r0, #180	; 0xb4
 8003222:	f000 fe65 	bl	8003ef0 <RadioSpiWriteRegisters>
 8003226:	4602      	mov	r2, r0
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <SpiritRadioSetDigDiv+0x5c>)
 800322a:	b212      	sxth	r2, r2
 800322c:	4611      	mov	r1, r2
 800322e:	7019      	strb	r1, [r3, #0]
 8003230:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003234:	705a      	strb	r2, [r3, #1]
  
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000200 	.word	0x20000200

08003244 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800324a:	1dfb      	adds	r3, r7, #7
 800324c:	461a      	mov	r2, r3
 800324e:	2101      	movs	r1, #1
 8003250:	20b4      	movs	r0, #180	; 0xb4
 8003252:	f000 fed1 	bl	8003ff8 <RadioSpiReadRegisters>
 8003256:	4602      	mov	r2, r0
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <SpiritRadioGetDigDiv+0x40>)
 800325a:	b212      	sxth	r2, r2
 800325c:	4611      	mov	r1, r2
 800325e:	7019      	strb	r1, [r3, #0]
 8003260:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003264:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003266:	79fb      	ldrb	r3, [r7, #7]
 8003268:	08db      	lsrs	r3, r3, #3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003278:	2301      	movs	r3, #1
  }
  
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000200 	.word	0x20000200

08003288 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <SpiritRadioGetXtalFrequency+0x14>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	200001e4 	.word	0x200001e4

080032a0 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <SpiritRadioSetXtalFrequency+0x1c>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6013      	str	r3, [r2, #0]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	200001e4 	.word	0x200001e4

080032c0 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 80032ca:	f107 020c 	add.w	r2, r7, #12
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	3301      	adds	r3, #1
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80032dc:	f000 f830 	bl	8003340 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 80032e0:	f107 030c 	add.w	r3, r7, #12
 80032e4:	461a      	mov	r2, r3
 80032e6:	2102      	movs	r1, #2
 80032e8:	2053      	movs	r0, #83	; 0x53
 80032ea:	f000 fe01 	bl	8003ef0 <RadioSpiWriteRegisters>
 80032ee:	4602      	mov	r2, r0
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <SpiritTimerSetRxTimeoutMs+0x48>)
 80032f2:	b212      	sxth	r2, r2
 80032f4:	4611      	mov	r1, r2
 80032f6:	7019      	strb	r1, [r3, #0]
 80032f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80032fc:	705a      	strb	r2, [r3, #1]

}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000200 	.word	0x20000200

0800330c <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 8003316:	1dfb      	adds	r3, r7, #7
 8003318:	461a      	mov	r2, r3
 800331a:	2101      	movs	r1, #1
 800331c:	2054      	movs	r0, #84	; 0x54
 800331e:	f000 fde7 	bl	8003ef0 <RadioSpiWriteRegisters>
 8003322:	4602      	mov	r2, r0
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <SpiritTimerSetRxTimeoutCounter+0x30>)
 8003326:	b212      	sxth	r2, r2
 8003328:	4611      	mov	r1, r2
 800332a:	7019      	strb	r1, [r3, #0]
 800332c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003330:	705a      	strb	r2, [r3, #1]

}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000200 	.word	0x20000200

08003340 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	ed87 0a03 	vstr	s0, [r7, #12]
 800334a:	60b8      	str	r0, [r7, #8]
 800334c:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 800334e:	f7ff ff9b 	bl	8003288 <SpiritRadioGetXtalFrequency>
 8003352:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4a91      	ldr	r2, [pc, #580]	; (800359c <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d902      	bls.n	8003362 <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	085b      	lsrs	r3, r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	ee07 3a90 	vmov	s15, r3
 8003368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800336c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003374:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80035a0 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003378:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800337c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003380:	ee17 3a90 	vmov	r3, s15
 8003384:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	f64f 5201 	movw	r2, #64769	; 0xfd01
 800338c:	4293      	cmp	r3, r2
 800338e:	d906      	bls.n	800339e <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	22ff      	movs	r2, #255	; 0xff
 8003394:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	701a      	strb	r2, [r3, #0]
    return;
 800339c:	e0fa      	b.n	8003594 <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	4a80      	ldr	r2, [pc, #512]	; (80035a4 <SpiritTimerComputeRxTimeoutValues+0x264>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	09db      	lsrs	r3, r3, #7
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	3302      	adds	r3, #2
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	ee07 3a90 	vmov	s15, r3
 80033d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e0:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80035a0 <SpiritTimerComputeRxTimeoutValues+0x260>
 80033e4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80033fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003406:	dd1d      	ble.n	8003444 <SpiritTimerComputeRxTimeoutValues+0x104>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	ee07 3a90 	vmov	s15, r3
 800341c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003424:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80035a0 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003428:	ee67 6a87 	vmul.f32	s13, s15, s14
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343a:	edd7 7a03 	vldr	s15, [r7, #12]
 800343e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003442:	e01e      	b.n	8003482 <SpiritTimerComputeRxTimeoutValues+0x142>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003460:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80035a0 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003464:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	ee07 3a90 	vmov	s15, r3
 800346e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003476:	edd7 7a03 	vldr	s15, [r7, #12]
 800347a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800347e:	eef1 7a67 	vneg.f32	s15, s15
 8003482:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2bff      	cmp	r3, #255	; 0xff
 800348c:	d06e      	beq.n	800356c <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	ee07 3a90 	vmov	s15, r3
 8003498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	ee07 3a90 	vmov	s15, r3
 80034a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ac:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80035a0 <SpiritTimerComputeRxTimeoutValues+0x260>
 80034b0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80034c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	dd1e      	ble.n	8003512 <SpiritTimerComputeRxTimeoutValues+0x1d2>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80035a0 <SpiritTimerComputeRxTimeoutValues+0x260>
 80034f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003508:	edd7 7a03 	vldr	s15, [r7, #12]
 800350c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003510:	e01f      	b.n	8003552 <SpiritTimerComputeRxTimeoutValues+0x212>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	ee07 3a90 	vmov	s15, r3
 800351c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800352c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003530:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80035a0 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003534:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003546:	edd7 7a03 	vldr	s15, [r7, #12]
 800354a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800354e:	eef1 7a67 	vneg.f32	s15, s15
 8003552:	ed97 7a05 	vldr	s14, [r7, #20]
 8003556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	d505      	bpl.n	800356c <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	3b01      	subs	r3, #1
 8003572:	b2da      	uxtb	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d906      	bls.n	800358e <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	3b01      	subs	r3, #1
 8003586:	b2da      	uxtb	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e002      	b.n	8003594 <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
}
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	01c9c380 	.word	0x01c9c380
 80035a0:	4993b480 	.word	0x4993b480
 80035a4:	80808081 	.word	0x80808081

080035a8 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 80035b2:	f107 030c 	add.w	r3, r7, #12
 80035b6:	461a      	mov	r2, r3
 80035b8:	2102      	movs	r1, #2
 80035ba:	204f      	movs	r0, #79	; 0x4f
 80035bc:	f000 fd1c 	bl	8003ff8 <RadioSpiReadRegisters>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 80035c4:	b212      	sxth	r2, r2
 80035c6:	4611      	mov	r1, r2
 80035c8:	7019      	strb	r1, [r3, #0]
 80035ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80035ce:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 80035d0:	7b3b      	ldrb	r3, [r7, #12]
 80035d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 80035da:	7b3b      	ldrb	r3, [r7, #12]
 80035dc:	b25a      	sxtb	r2, r3
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 80035f2:	7b7b      	ldrb	r3, [r7, #13]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 80035fc:	7b7b      	ldrb	r3, [r7, #13]
 80035fe:	b25a      	sxtb	r2, r3
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	015b      	lsls	r3, r3, #5
 8003604:	b25b      	sxtb	r3, r3
 8003606:	4313      	orrs	r3, r2
 8003608:	b25b      	sxtb	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 800360e:	f107 030c 	add.w	r3, r7, #12
 8003612:	461a      	mov	r2, r3
 8003614:	2102      	movs	r1, #2
 8003616:	204f      	movs	r0, #79	; 0x4f
 8003618:	f000 fc6a 	bl	8003ef0 <RadioSpiWriteRegisters>
 800361c:	4602      	mov	r2, r0
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003620:	b212      	sxth	r2, r2
 8003622:	4611      	mov	r1, r2
 8003624:	7019      	strb	r1, [r3, #0]
 8003626:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800362a:	705a      	strb	r2, [r3, #1]

}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000200 	.word	0x20000200

08003638 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 800363e:	1d3b      	adds	r3, r7, #4
 8003640:	461a      	mov	r2, r3
 8003642:	2102      	movs	r1, #2
 8003644:	20c0      	movs	r0, #192	; 0xc0
 8003646:	f000 fcd7 	bl	8003ff8 <RadioSpiReadRegisters>
 800364a:	4602      	mov	r2, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <SpiritRefreshStatus+0x44>)
 800364e:	b212      	sxth	r2, r2
 8003650:	4611      	mov	r1, r2
 8003652:	7019      	strb	r1, [r3, #0]
 8003654:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003658:	705a      	strb	r2, [r3, #1]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <SpiritRefreshStatus+0x44>)
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	797b      	ldrb	r3, [r7, #5]
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003660:	429a      	cmp	r2, r3
 8003662:	d1ec      	bne.n	800363e <SpiritRefreshStatus+0x6>
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <SpiritRefreshStatus+0x48>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 800366e:	4293      	cmp	r3, r2
 8003670:	d1e5      	bne.n	800363e <SpiritRefreshStatus+0x6>

}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000200 	.word	0x20000200
 8003680:	20000201 	.word	0x20000201

08003684 <Spirit1InterfaceInit>:
* @brief  Read the status register.
* @param  None
* @retval Status
*/
void Spirit1InterfaceInit(void)
{ 
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Initialize the SDN pin micro side */
  RadioGpioInit(RADIO_GPIO_SDN,RADIO_MODE_GPIO_OUT);
 8003688:	2102      	movs	r1, #2
 800368a:	2004      	movs	r0, #4
 800368c:	f000 f9d8 	bl	8003a40 <RadioGpioInit>

  SpiritSpiInit();
 8003690:	f000 fb38 	bl	8003d04 <RadioSpiInit>
#if defined(SPIRIT1_HAS_EEPROM)
  EepromSpiInitialization();
#endif
     
  /* Board management */   
  SpiritEnterShutdown(); 
 8003694:	f000 faaa 	bl	8003bec <RadioEnterShutdown>
  SpiritExitShutdown();   
 8003698:	f000 fab0 	bl	8003bfc <RadioExitShutdown>
    
  SpiritManagementIdentificationRFBoard();
 800369c:	f000 f814 	bl	80036c8 <SpiritManagementIdentificationRFBoard>
    
  /* Initialize the signals to drive the range extender application board */
  SpiritManagementRangeExtInit(); 
 80036a0:	f000 f836 	bl	8003710 <SpiritManagementRangeExtInit>
  
  /* Micro EXTI config */      
  RadioGpioInit(RADIO_GPIO_3,RADIO_MODE_EXTI_IN);
 80036a4:	2101      	movs	r1, #1
 80036a6:	2003      	movs	r0, #3
 80036a8:	f000 f9ca 	bl	8003a40 <RadioGpioInit>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,DISABLE); 
 80036ac:	2300      	movs	r3, #0
 80036ae:	2204      	movs	r2, #4
 80036b0:	2104      	movs	r1, #4
 80036b2:	2003      	movs	r0, #3
 80036b4:	f000 fa4e 	bl	8003b54 <RadioGpioInterruptCmd>
  RadioGpioInterruptCmd(RADIO_GPIO_3,0x04,0x04,ENABLE);
 80036b8:	2301      	movs	r3, #1
 80036ba:	2204      	movs	r2, #4
 80036bc:	2104      	movs	r1, #4
 80036be:	2003      	movs	r0, #3
 80036c0:	f000 fa48 	bl	8003b54 <RadioGpioInterruptCmd>
}
 80036c4:	bf00      	nop
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SpiritManagementIdentificationRFBoard>:
* @brief  Identifies the SPIRIT1 Xtal frequency and version.
* @param  None
* @retval Status
*/
void SpiritManagementIdentificationRFBoard(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80036ce:	2300      	movs	r3, #0
 80036d0:	71fb      	strb	r3, [r7, #7]
 80036d2:	e004      	b.n	80036de <SpiritManagementIdentificationRFBoard+0x16>
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	3301      	adds	r3, #1
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	71fb      	strb	r3, [r7, #7]
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2bff      	cmp	r3, #255	; 0xff
 80036e4:	d1f6      	bne.n	80036d4 <SpiritManagementIdentificationRFBoard+0xc>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80036e6:	f7ff ffa7 	bl	8003638 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 80036ea:	4b07      	ldr	r3, [pc, #28]	; (8003708 <SpiritManagementIdentificationRFBoard+0x40>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d1ea      	bne.n	80036ce <SpiritManagementIdentificationRFBoard+0x6>

    SpiritRadioSetXtalFrequency(XTAL_FREQUENCY);        
 80036f8:	4804      	ldr	r0, [pc, #16]	; (800370c <SpiritManagementIdentificationRFBoard+0x44>)
 80036fa:	f7ff fdd1 	bl	80032a0 <SpiritRadioSetXtalFrequency>
    //SpiritGeneralSetSpiritVersion(SPIRIT_VERSION); 
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000200 	.word	0x20000200
 800370c:	02faf080 	.word	0x02faf080

08003710 <SpiritManagementRangeExtInit>:
/**
* @defgroup RANGE_EXT_MANAGEMENT_FUNCTIONS              SDK SPIRIT Management Range Extender Functions
* @{
*/
void SpiritManagementRangeExtInit(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
  RangeExtType range_type = SpiritManagementGetRangeExtender();
 8003716:	f000 f877 	bl	8003808 <SpiritManagementGetRangeExtender>
 800371a:	4603      	mov	r3, r0
 800371c:	77fb      	strb	r3, [r7, #31]
  
  if(range_type==RANGE_EXT_SKYWORKS_169) {
 800371e:	7ffb      	ldrb	r3, [r7, #31]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d135      	bne.n	8003790 <SpiritManagementRangeExtInit+0x80>
    /* TCXO optimization power consumption */
    SpiritGeneralSetExtRef(MODE_EXT_XIN);
 8003724:	2001      	movs	r0, #1
 8003726:	f7fd fdad 	bl	8001284 <SpiritGeneralSetExtRef>
    uint8_t tmp = 0x01; SpiritSpiWriteRegisters(0xB6,1,&tmp);
 800372a:	2301      	movs	r3, #1
 800372c:	71fb      	strb	r3, [r7, #7]
 800372e:	1dfb      	adds	r3, r7, #7
 8003730:	461a      	mov	r2, r3
 8003732:	2101      	movs	r1, #1
 8003734:	20b6      	movs	r0, #182	; 0xb6
 8003736:	f000 fbdb 	bl	8003ef0 <RadioSpiWriteRegisters>
    
    /* CSD control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 800373a:	4a2e      	ldr	r2, [pc, #184]	; (80037f4 <SpiritManagementRangeExtInit+0xe4>)
 800373c:	f107 0308 	add.w	r3, r7, #8
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	4611      	mov	r1, r2
 8003744:	8019      	strh	r1, [r3, #0]
 8003746:	3302      	adds	r3, #2
 8003748:	0c12      	lsrs	r2, r2, #16
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	f107 0308 	add.w	r3, r7, #8
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd fdc7 	bl	80012e4 <SpiritGpioInit>
    
    /* CTX/BYP control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 8003756:	4a28      	ldr	r2, [pc, #160]	; (80037f8 <SpiritManagementRangeExtInit+0xe8>)
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	4611      	mov	r1, r2
 8003760:	8019      	strh	r1, [r3, #0]
 8003762:	3302      	adds	r3, #2
 8003764:	0c12      	lsrs	r2, r2, #16
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	f107 030c 	add.w	r3, r7, #12
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd fdb9 	bl	80012e4 <SpiritGpioInit>
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 8003772:	4a22      	ldr	r2, [pc, #136]	; (80037fc <SpiritManagementRangeExtInit+0xec>)
 8003774:	f107 0310 	add.w	r3, r7, #16
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	4611      	mov	r1, r2
 800377c:	8019      	strh	r1, [r3, #0]
 800377e:	3302      	adds	r3, #2
 8003780:	0c12      	lsrs	r2, r2, #16
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	f107 0310 	add.w	r3, r7, #16
 8003788:	4618      	mov	r0, r3
 800378a:	f7fd fdab 	bl	80012e4 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
    
    /* Vcont control */
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
  }
}
 800378e:	e02c      	b.n	80037ea <SpiritManagementRangeExtInit+0xda>
  else if(range_type==RANGE_EXT_SKYWORKS_868) {   
 8003790:	7ffb      	ldrb	r3, [r7, #31]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d129      	bne.n	80037ea <SpiritManagementRangeExtInit+0xda>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_0, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_RX_MODE});
 8003796:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <SpiritManagementRangeExtInit+0xe4>)
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	4611      	mov	r1, r2
 80037a0:	8019      	strh	r1, [r3, #0]
 80037a2:	3302      	adds	r3, #2
 80037a4:	0c12      	lsrs	r2, r2, #16
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd fd99 	bl	80012e4 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_1, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_RX_STATE});
 80037b2:	4a13      	ldr	r2, [pc, #76]	; (8003800 <SpiritManagementRangeExtInit+0xf0>)
 80037b4:	f107 0318 	add.w	r3, r7, #24
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	4611      	mov	r1, r2
 80037bc:	8019      	strh	r1, [r3, #0]
 80037be:	3302      	adds	r3, #2
 80037c0:	0c12      	lsrs	r2, r2, #16
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	f107 0318 	add.w	r3, r7, #24
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fd fd8b 	bl	80012e4 <SpiritGpioInit>
    SpiritGpioInit(&(SGpioInit){SPIRIT_GPIO_2, SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_HP, SPIRIT_GPIO_DIG_OUT_TX_STATE});
 80037ce:	4a0d      	ldr	r2, [pc, #52]	; (8003804 <SpiritManagementRangeExtInit+0xf4>)
 80037d0:	f107 031c 	add.w	r3, r7, #28
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	4611      	mov	r1, r2
 80037d8:	8019      	strh	r1, [r3, #0]
 80037da:	3302      	adds	r3, #2
 80037dc:	0c12      	lsrs	r2, r2, #16
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	f107 031c 	add.w	r3, r7, #28
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd fd7d 	bl	80012e4 <SpiritGpioInit>
}
 80037ea:	bf00      	nop
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	08006090 	.word	0x08006090
 80037f8:	08006094 	.word	0x08006094
 80037fc:	08006098 	.word	0x08006098
 8003800:	0800609c 	.word	0x0800609c
 8003804:	080060a0 	.word	0x080060a0

08003808 <SpiritManagementGetRangeExtender>:
* @brief  returns the spirit1 range extender type
* @param  None
* @retval RangeExtType
*/
RangeExtType SpiritManagementGetRangeExtender(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return xRangeExtType;
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <SpiritManagementGetRangeExtender+0x14>)
 800380e:	781b      	ldrb	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	200001e8 	.word	0x200001e8

08003820 <Spirit1GpioIrqInit>:
* @brief  this function intializes the spirit1 gpio irq for TX and Rx
* @param  None
* @retval None
*/
void Spirit1GpioIrqInit(SGpioInit *pGpioIRQ)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Spirit IRQ config */
  SpiritGpioInit(pGpioIRQ);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7fd fd5b 	bl	80012e4 <SpiritGpioInit>
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <Spirit1RadioInit>:
* @brief  this function used to receive RX packet
* @param  None
* @retval None
*/
void Spirit1RadioInit(SRadioInit *pRadioInit)
{    
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  /* Spirit Radio config */
  SpiritRadioInit(pRadioInit);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe fb36 	bl	8001eb0 <SpiritRadioInit>

}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <Spirit1SetPower>:
* @brief  this function sets the radio power
* @param  uint8_t cIndex, float fPowerdBm
* @retval None
*/
void Spirit1SetPower(uint8_t cIndex, float fPowerdBm)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	ed87 0a00 	vstr	s0, [r7]
 8003858:	71fb      	strb	r3, [r7, #7]
  /* Spirit Radio set power */
  SpiritRadioSetPALeveldBm(cIndex,fPowerdBm);
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	ed97 0a00 	vldr	s0, [r7]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff fb59 	bl	8002f18 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(cIndex);
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fbab 	bl	8002fc4 <SpiritRadioSetPALevelMaxIndex>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <Spirit1PacketConfig>:
* @brief  this function sets the packet configuration according to the protocol used
* @param  None
* @retval None
*/
void Spirit1PacketConfig(void)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	af00      	add	r7, sp, #0
  
  STackProtocolInit();
   
#elif defined(USE_BASIC_PROTOCOL)
  
  BasicProtocolInit();
 800387a:	f7fd f977 	bl	8000b6c <BasicProtocolInit>
  
#endif
}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}

08003882 <Spirit1SetPayloadlength>:
* @brief  this function sets the payload length
* @param  uint8_t length
* @retval None
*/
void Spirit1SetPayloadlength(uint8_t length)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	4603      	mov	r3, r0
 800388a:	71fb      	strb	r3, [r7, #7]
    /* Payload length config */
  SpiritPktStackSetPayloadLength(length);
  
#elif defined(USE_BASIC_PROTOCOL)
  /* payload length config */
  SpiritPktBasicSetPayloadLength(length);
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	b29b      	uxth	r3, r3
 8003890:	4618      	mov	r0, r3
 8003892:	f7fe f9c3 	bl	8001c1c <SpiritPktBasicSetPayloadLength>
#endif
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <Spirit1SetDestinationAddress>:
* @brief  this function sets the destination address
* @param  uint8_t adress
* @retval None
*/
void Spirit1SetDestinationAddress(uint8_t address)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	71fb      	strb	r3, [r7, #7]
#if defined(USE_STack_PROTOCOL)
  /* Destination address */
  SpiritPktStackSetDestinationAddress(address);
#elif defined(USE_BASIC_PROTOCOL)
  /* destination address */
  SpiritPktBasicSetDestinationAddress(address);
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe fa42 	bl	8001d34 <SpiritPktCommonSetDestinationAddress>
#endif
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <Spirit1EnableTxIrq>:
* @brief  this function enables the Tx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableTxIrq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrq(TX_DATA_SENT, S_ENABLE); 
 80038bc:	2101      	movs	r1, #1
 80038be:	2004      	movs	r0, #4
 80038c0:	f7fd fd5a 	bl	8001378 <SpiritIrq>
#if defined(USE_STack_LLP)
  SpiritIrq(MAX_RE_TX_REACH, S_ENABLE);
#endif  
}
 80038c4:	bf00      	nop
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <Spirit1EnableRxIrq>:
* @brief  this function enables the Rx IRQ
* @param  None
* @retval None
*/
void Spirit1EnableRxIrq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
    /* Spirit IRQs enable */
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 80038cc:	2101      	movs	r1, #1
 80038ce:	2001      	movs	r0, #1
 80038d0:	f7fd fd52 	bl	8001378 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE); 
 80038d4:	2101      	movs	r1, #1
 80038d6:	2002      	movs	r0, #2
 80038d8:	f7fd fd4e 	bl	8001378 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 80038dc:	2101      	movs	r1, #1
 80038de:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80038e2:	f7fd fd49 	bl	8001378 <SpiritIrq>
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}

080038ea <Spirit1DisableIrq>:
* @brief  this function disable IRQs
* @param  None
* @retval None
*/
void Spirit1DisableIrq(void)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	af00      	add	r7, sp, #0
  /* Spirit IRQs enable */
  SpiritIrqDeInit(NULL);
 80038ee:	2000      	movs	r0, #0
 80038f0:	f7fd fd1c 	bl	800132c <SpiritIrqDeInit>
}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <Spirit1SetRxTimeout>:
* @brief  this function set the receive timeout period
* @param  None
* @retval None
*/
void Spirit1SetRxTimeout(float cRxTimeOut)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	ed87 0a01 	vstr	s0, [r7, #4]
  if(cRxTimeOut == 0)
 8003902:	edd7 7a01 	vldr	s15, [r7, #4]
 8003906:	eef5 7a40 	vcmp.f32	s15, #0.0
 800390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390e:	d106      	bne.n	800391e <Spirit1SetRxTimeout+0x26>
  {
    /* rx timeout config */
    SET_INFINITE_RX_TIMEOUT();
 8003910:	2000      	movs	r0, #0
 8003912:	f7ff fcfb 	bl	800330c <SpiritTimerSetRxTimeoutCounter>
    SpiritTimerSetRxTimeoutStopCondition(ANY_ABOVE_THRESHOLD);
 8003916:	200f      	movs	r0, #15
 8003918:	f7ff fe46 	bl	80035a8 <SpiritTimerSetRxTimeoutStopCondition>
    /* RX timeout config */
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
    Spirit1EnableSQI();
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
  }
}
 800391c:	e008      	b.n	8003930 <Spirit1SetRxTimeout+0x38>
    SpiritTimerSetRxTimeoutMs(cRxTimeOut);
 800391e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003922:	f7ff fccd 	bl	80032c0 <SpiritTimerSetRxTimeoutMs>
    Spirit1EnableSQI();
 8003926:	f000 f812 	bl	800394e <Spirit1EnableSQI>
    SpiritTimerSetRxTimeoutStopCondition(RSSI_AND_SQI_ABOVE_THRESHOLD);  
 800392a:	2006      	movs	r0, #6
 800392c:	f7ff fe3c 	bl	80035a8 <SpiritTimerSetRxTimeoutStopCondition>
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <Spirit1SetRssiTH>:
* @brief  this function sets the RSSI threshold
* @param  int dbmValue
* @retval None
*/
void Spirit1SetRssiTH(int dbmValue)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  SpiritQiSetRssiThresholddBm(dbmValue);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7fe fa95 	bl	8001e70 <SpiritQiSetRssiThresholddBm>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <Spirit1EnableSQI>:
* @brief  this function enables SQI check
* @param  None
* @retval None
*/
void Spirit1EnableSQI(void)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	af00      	add	r7, sp, #0
  /* enable SQI check */
  SpiritQiSetSqiThreshold(SQI_TH_0);
 8003952:	2000      	movs	r0, #0
 8003954:	f7fe fa58 	bl	8001e08 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8003958:	2001      	movs	r0, #1
 800395a:	f7fe fa1d 	bl	8001d98 <SpiritQiSqiCheck>
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <Spirit1StartRx>:
* @brief  this function starts the RX process
* @param  None
* @retval None
*/
void Spirit1StartRx(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <Spirit1StartRx+0x28>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b33      	cmp	r3, #51	; 0x33
 8003974:	d102      	bne.n	800397c <Spirit1StartRx+0x18>
  {
    SpiritCmdStrobeSabort();
 8003976:	2067      	movs	r0, #103	; 0x67
 8003978:	f7fd fbd0 	bl	800111c <SpiritCmdStrobeCommand>
  }
  /* RX command */
  SpiritCmdStrobeRx();
 800397c:	f7fd ffb8 	bl	80018f0 <SpiritManagementWaCmdStrobeRx>
 8003980:	2061      	movs	r0, #97	; 0x61
 8003982:	f7fd fbcb 	bl	800111c <SpiritCmdStrobeCommand>
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000200 	.word	0x20000200

08003990 <Spirit1GetRxPacket>:
* @brief  this function receives the data
* @param  None
* @retval None
*/
void Spirit1GetRxPacket(uint8_t *buffer, uint8_t *cRxData )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint8_t noofbytes = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
  /* when rx data ready read the number of received bytes */
  *cRxData=SpiritLinearFifoReadNumElementsRxFifo();
 800399e:	f7fd fd9d 	bl	80014dc <SpiritLinearFifoReadNumElementsRxFifo>
 80039a2:	4603      	mov	r3, r0
 80039a4:	461a      	mov	r2, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	701a      	strb	r2, [r3, #0]
  noofbytes = *cRxData;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	73fb      	strb	r3, [r7, #15]
    /* read the RX FIFO */
  SpiritSpiReadLinearFifo(noofbytes, buffer);
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fc9b 	bl	80042f0 <RadioSpiReadFifo>
  
  SpiritCmdStrobeFlushRxFifo();
 80039ba:	2071      	movs	r0, #113	; 0x71
 80039bc:	f7fd fbae 	bl	800111c <SpiritCmdStrobeCommand>
}
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <Spirit1StartTx>:
* @brief  this function starts the TX process
* @param  None
* @retval None
*/
void Spirit1StartTx(uint8_t *buffer, uint8_t size )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
  if(g_xStatus.MC_STATE==MC_STATE_RX)
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <Spirit1StartTx+0x64>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b33      	cmp	r3, #51	; 0x33
 80039e0:	d102      	bne.n	80039e8 <Spirit1StartTx+0x20>
  {
    SpiritCmdStrobeSabort();
 80039e2:	2067      	movs	r0, #103	; 0x67
 80039e4:	f7fd fb9a 	bl	800111c <SpiritCmdStrobeCommand>
  }
  
#ifdef CSMA_ENABLE
  
    /* Enable CSMA */
    SpiritRadioPersistenRx(S_DISABLE);
 80039e8:	2000      	movs	r0, #0
 80039ea:	f7ff fb79 	bl	80030e0 <SpiritRadioPersistenRx>
    SpiritRadioCsBlanking(S_DISABLE);
 80039ee:	2000      	movs	r0, #0
 80039f0:	f7ff fb46 	bl	8003080 <SpiritRadioCsBlanking>

    SpiritCsmaInit(&xCsmaInit);
 80039f4:	480e      	ldr	r0, [pc, #56]	; (8003a30 <Spirit1StartTx+0x68>)
 80039f6:	f7fd fba9 	bl	800114c <SpiritCsmaInit>
    SpiritCsma(S_ENABLE);
 80039fa:	2001      	movs	r0, #1
 80039fc:	f7fd fc0a 	bl	8001214 <SpiritCsma>
    SpiritQiSetRssiThresholddBm(CSMA_RSSI_THRESHOLD);
 8003a00:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003a04:	f7fe fa34 	bl	8001e70 <SpiritQiSetRssiThresholddBm>
    
#endif 
  
  /* fit the TX FIFO */
  SpiritCmdStrobeFlushTxFifo();
 8003a08:	2072      	movs	r0, #114	; 0x72
 8003a0a:	f7fd fb87 	bl	800111c <SpiritCmdStrobeCommand>
  
  SpiritSpiWriteLinearFifo(size, buffer);
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fbea 	bl	80041ec <RadioSpiWriteFifo>
  
  /* send the TX command */
  SpiritCmdStrobeTx();
 8003a18:	f7fd ff32 	bl	8001880 <SpiritManagementWaCmdStrobeTx>
 8003a1c:	2060      	movs	r0, #96	; 0x60
 8003a1e:	f7fd fb7d 	bl	800111c <SpiritCmdStrobeCommand>
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000200 	.word	0x20000200
 8003a30:	20000094 	.word	0x20000094

08003a34 <Spirit1ClearIRQ>:
* @brief  this function clear the IRQ status
* @param  None
* @retval None
*/
void Spirit1ClearIRQ(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  SpiritIrqClearStatus();
 8003a38:	f7fd fd38 	bl	80014ac <SpiritIrqClearStatus>
}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <RadioGpioInit>:
*         @arg RADIO_MODE_EXTI_IN: MCU GPIO will be connected to EXTI line with interrupt
*         generation capability.
* @retval None.
*/
void RadioGpioInit(RadioGpioPin xGpio, RadioGpioMode xGpioMode)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	; 0x30
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	460a      	mov	r2, r1
 8003a4a:	71fb      	strb	r3, [r7, #7]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RADIO_GPIO_PIN(xGpio));
  assert_param(IS_RADIO_GPIO_MODE(xGpioMode));
  
  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
 8003a50:	4b3a      	ldr	r3, [pc, #232]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	4a39      	ldr	r2, [pc, #228]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5c:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	69bb      	ldr	r3, [r7, #24]
  __GPIOC_CLK_ENABLE();
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	4a33      	ldr	r2, [pc, #204]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a6e:	f043 0304 	orr.w	r3, r3, #4
 8003a72:	6313      	str	r3, [r2, #48]	; 0x30
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	617b      	str	r3, [r7, #20]
 8003a7e:	697b      	ldr	r3, [r7, #20]
  __GPIOB_CLK_ENABLE();
 8003a80:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	4a2d      	ldr	r2, [pc, #180]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8c:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]
  __GPIOJ_CLK_ENABLE();
 8003a98:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <RadioGpioInit+0xfc>)
 8003a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <RadioGpioInit+0xfc>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]

  
  /* Configures MCU GPIO */
  if (xGpioMode == RADIO_MODE_GPIO_OUT)
 8003ab0:	79bb      	ldrb	r3, [r7, #6]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d102      	bne.n	8003abc <RadioGpioInit+0x7c>
  {
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	623b      	str	r3, [r7, #32]
 8003aba:	e001      	b.n	8003ac0 <RadioGpioInit+0x80>
  }
  else
  {
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003abc:	2300      	movs	r3, #0
 8003abe:	623b      	str	r3, [r7, #32]
  }
  
  GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <RadioGpioInit+0x100>)
 8003ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <RadioGpioInit+0x104>)
 8003ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <RadioGpioInit+0x108>)
 8003ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <RadioGpioInit+0x10c>)
 8003ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae6:	f107 021c 	add.w	r2, r7, #28
 8003aea:	4611      	mov	r1, r2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fe47 	bl	8004780 <HAL_GPIO_Init>
  
  if (xGpioMode == RADIO_MODE_EXTI_IN)
 8003af2:	79bb      	ldrb	r3, [r7, #6]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d11d      	bne.n	8003b34 <RadioGpioInit+0xf4>
  {
    GPIO_InitStruct.Pin = aRADIO_GPIO_PIN[xGpio];
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	4a11      	ldr	r2, [pc, #68]	; (8003b40 <RadioGpioInit+0x100>)
 8003afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = aRADIO_GPIO_PUPD[xGpio];
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	4a0f      	ldr	r2, [pc, #60]	; (8003b44 <RadioGpioInit+0x104>)
 8003b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = aRADIO_GPIO_SPEED[xGpio];
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	4a0e      	ldr	r2, [pc, #56]	; (8003b48 <RadioGpioInit+0x108>)
 8003b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = aRADIO_GPIO_EXTI_MODE[xGpio];
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <RadioGpioInit+0x110>)
 8003b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(aRADIO_GPIO_PORT[xGpio], &GPIO_InitStruct);
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <RadioGpioInit+0x10c>)
 8003b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b28:	f107 021c 	add.w	r2, r7, #28
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fe26 	bl	8004780 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    /*  NVIC_SetPriority((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]), 0x02); */
    /*  HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));     */
  } 
}
 8003b34:	bf00      	nop
 8003b36:	3730      	adds	r7, #48	; 0x30
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	08006210 	.word	0x08006210
 8003b44:	08006230 	.word	0x08006230
 8003b48:	0800621c 	.word	0x0800621c
 8003b4c:	200000b8 	.word	0x200000b8
 8003b50:	08006244 	.word	0x08006244

08003b54 <RadioGpioInterruptCmd>:
*         @arg ENABLE: Interrupt is enabled
*         @arg DISABLE: Interrupt is disabled
* @retval None.
*/
void RadioGpioInterruptCmd(RadioGpioPin xGpio, uint8_t nPreemption, uint8_t nSubpriority, FunctionalState xNewState)
{
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4604      	mov	r4, r0
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	71fb      	strb	r3, [r7, #7]
 8003b66:	4603      	mov	r3, r0
 8003b68:	71bb      	strb	r3, [r7, #6]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	717b      	strb	r3, [r7, #5]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	713b      	strb	r3, [r7, #4]
  HAL_NVIC_SetPriority((IRQn_Type) (aRADIO_GPIO_IRQn[xGpio]), nPreemption, nSubpriority);
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	4a0e      	ldr	r2, [pc, #56]	; (8003bb0 <RadioGpioInterruptCmd+0x5c>)
 8003b76:	5cd3      	ldrb	r3, [r2, r3]
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	79b9      	ldrb	r1, [r7, #6]
 8003b7c:	797a      	ldrb	r2, [r7, #5]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fdb9 	bl	80046f6 <HAL_NVIC_SetPriority>
  if (!xNewState)
 8003b84:	793b      	ldrb	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <RadioGpioInterruptCmd+0x46>
  {
    HAL_NVIC_DisableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio])); 
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	4a08      	ldr	r2, [pc, #32]	; (8003bb0 <RadioGpioInterruptCmd+0x5c>)
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	b25b      	sxtb	r3, r3
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fdd9 	bl	800474a <HAL_NVIC_DisableIRQ>
  }
  else
  {
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
  }
}
 8003b98:	e006      	b.n	8003ba8 <RadioGpioInterruptCmd+0x54>
    HAL_NVIC_EnableIRQ((IRQn_Type)(aRADIO_GPIO_IRQn[xGpio]));
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	4a04      	ldr	r2, [pc, #16]	; (8003bb0 <RadioGpioInterruptCmd+0x5c>)
 8003b9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ba0:	b25b      	sxtb	r3, r3
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fdc3 	bl	800472e <HAL_NVIC_EnableIRQ>
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd90      	pop	{r4, r7, pc}
 8003bb0:	08006254 	.word	0x08006254

08003bb4 <RadioGpioSetLevel>:
* @param  GPIO_PinState Level of the GPIO. This parameter can be:
*         GPIO_PIN_SET or GPIO_PIN_RESET.
* @retval None.
*/
void RadioGpioSetLevel(RadioGpioPin xGpio, GPIO_PinState xState)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	71fb      	strb	r3, [r7, #7]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71bb      	strb	r3, [r7, #6]
  /* Sets the GPIO level */
  HAL_GPIO_WritePin(aRADIO_GPIO_PORT[xGpio], aRADIO_GPIO_PIN[xGpio], xState); 
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <RadioGpioSetLevel+0x30>)
 8003bc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	4a06      	ldr	r2, [pc, #24]	; (8003be8 <RadioGpioSetLevel+0x34>)
 8003bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bd4:	79ba      	ldrb	r2, [r7, #6]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f000 ff7c 	bl	8004ad4 <HAL_GPIO_WritePin>
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	200000b8 	.word	0x200000b8
 8003be8:	08006210 	.word	0x08006210

08003bec <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  /* Check the parameters */ 
  RadioGpioSetLevel(RADIO_GPIO_SDN, GPIO_PIN_SET);
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	2004      	movs	r0, #4
 8003bf4:	f7ff ffde 	bl	8003bb4 <RadioGpioSetLevel>
}
 8003bf8:	bf00      	nop
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  RadioGpioSetLevel(RADIO_GPIO_SDN, GPIO_PIN_RESET);
 8003c02:	2100      	movs	r1, #0
 8003c04:	2004      	movs	r0, #4
 8003c06:	f7ff ffd5 	bl	8003bb4 <RadioGpioSetLevel>
  
  /* Delay to allow the circuit POR, about 700 us */
  for (volatile uint32_t Index = 0; Index < POR_TIME; Index++);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	e002      	b.n	8003c16 <RadioExitShutdown+0x1a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3301      	adds	r3, #1
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003c1c:	d3f8      	bcc.n	8003c10 <RadioExitShutdown+0x14>
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <RadioShieldLedInit>:
*   This parameter can be one of the following values:
* @arg    Led_t Led
* @retval None
*/
void RadioShieldLedInit(Led_t Led)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  RADIO_SHIELD_LED_GPIO_CLK_ENABLE();
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <RadioShieldLedInit+0x50>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	4a10      	ldr	r2, [pc, #64]	; (8003c78 <RadioShieldLedInit+0x50>)
 8003c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <RadioShieldLedInit+0x50>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = aLED_GPIO_PIN[Led];
 8003c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c50:	2301      	movs	r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c54:	2301      	movs	r3, #1
 8003c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(aLED_GPIO_PORT[Led], &GPIO_InitStruct);
 8003c5c:	79fb      	ldrb	r3, [r7, #7]
 8003c5e:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <RadioShieldLedInit+0x54>)
 8003c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c64:	f107 020c 	add.w	r2, r7, #12
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fd88 	bl	8004780 <HAL_GPIO_Init>
}
 8003c70:	bf00      	nop
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	200000cc 	.word	0x200000cc

08003c80 <RadioShieldLedOn>:
*   This parameter can be one of following parameters:
* @arg  Led_t Led
* @retval None
*/
void RadioShieldLedOn(Led_t Led)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_SET); 
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <RadioShieldLedOn+0x28>)
 8003c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c96:	2201      	movs	r2, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 ff1b 	bl	8004ad4 <HAL_GPIO_WritePin>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	200000cc 	.word	0x200000cc

08003cac <RadioShieldLedOff>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedOff(Led_t Led)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	4a06      	ldr	r2, [pc, #24]	; (8003cd4 <RadioShieldLedOff+0x28>)
 8003cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 ff05 	bl	8004ad4 <HAL_GPIO_WritePin>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200000cc 	.word	0x200000cc

08003cd8 <RadioShieldLedToggle>:
*   This parameter can be one of following parameters:
* @arg Led_t Led
* @retval None
*/
void RadioShieldLedToggle(Led_t Led)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(aLED_GPIO_PORT[Led], aLED_GPIO_PIN[Led]);
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <RadioShieldLedToggle+0x28>)
 8003ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 ff08 	bl	8004b06 <HAL_GPIO_TogglePin>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200000cc 	.word	0x200000cc

08003d04 <RadioSpiInit>:
* @brief  Initializes SPI HAL.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&pSpiHandle) == HAL_SPI_STATE_RESET)
 8003d08:	4818      	ldr	r0, [pc, #96]	; (8003d6c <RadioSpiInit+0x68>)
 8003d0a:	f002 f818 	bl	8005d3e <HAL_SPI_GetState>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d129      	bne.n	8003d68 <RadioSpiInit+0x64>
  {
    /* SPI Config */
    pSpiHandle.Instance               = RADIO_SPI;
 8003d14:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <RadioSpiInit+0x68>)
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <RadioSpiInit+0x6c>)
 8003d18:	601a      	str	r2, [r3, #0]
    pSpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <RadioSpiInit+0x68>)
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	61da      	str	r2, [r3, #28]
    pSpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8003d20:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <RadioSpiInit+0x68>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
    pSpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <RadioSpiInit+0x68>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	615a      	str	r2, [r3, #20]
    pSpiHandle.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <RadioSpiInit+0x68>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	611a      	str	r2, [r3, #16]
    pSpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8003d32:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <RadioSpiInit+0x68>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
    pSpiHandle.Init.CRCPolynomial     = 7;
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <RadioSpiInit+0x68>)
 8003d3a:	2207      	movs	r2, #7
 8003d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    pSpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <RadioSpiInit+0x68>)
 8003d40:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d44:	60da      	str	r2, [r3, #12]
    pSpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <RadioSpiInit+0x68>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	621a      	str	r2, [r3, #32]
    pSpiHandle.Init.NSS               = SPI_NSS_SOFT;       
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <RadioSpiInit+0x68>)
 8003d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d52:	619a      	str	r2, [r3, #24]
    pSpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <RadioSpiInit+0x68>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24
    pSpiHandle.Init.Mode              = SPI_MODE_MASTER;
 8003d5a:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <RadioSpiInit+0x68>)
 8003d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d60:	605a      	str	r2, [r3, #4]
    
    //HAL_SPI_MspInit(&pSpiHandle);
    HAL_SPI_Init(&pSpiHandle);
 8003d62:	4802      	ldr	r0, [pc, #8]	; (8003d6c <RadioSpiInit+0x68>)
 8003d64:	f001 fbae 	bl	80054c4 <HAL_SPI_Init>
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000204 	.word	0x20000204
 8003d70:	40003800 	.word	0x40003800

08003d74 <HAL_SPI_MspInit>:
* @brief  Initializes SPI MSP.
* @param  SPI_HandleTypeDef* pSpiHandle
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* pSpiHandle)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08c      	sub	sp, #48	; 0x30
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_InitStruct;
  if (pSpiHandle->Instance==RADIO_SPI)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a3e      	ldr	r2, [pc, #248]	; (8003e7c <HAL_SPI_MspInit+0x108>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d175      	bne.n	8003e72 <HAL_SPI_MspInit+0xfe>
  {
    /*** Configure the GPIOs ***/  
    /* Enable GPIO clock */
    RADIO_SPI_SCLK_CLK_ENABLE();
 8003d86:	4b3e      	ldr	r3, [pc, #248]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a3d      	ldr	r2, [pc, #244]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
    RADIO_SPI_MISO_CLK_ENABLE();
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a37      	ldr	r2, [pc, #220]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
 8003daa:	4b35      	ldr	r3, [pc, #212]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	697b      	ldr	r3, [r7, #20]
    RADIO_SPI_MOSI_CLOCK_ENABLE();
 8003db6:	4b32      	ldr	r3, [pc, #200]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a31      	ldr	r2, [pc, #196]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003dbc:	f043 0302 	orr.w	r3, r3, #2
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	693b      	ldr	r3, [r7, #16]
    
    /**SPI1 GPIO Configuration */   
    
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = RADIO_SPI_SCK_AF;
 8003dda:	2305      	movs	r3, #5
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    GPIO_InitStruct.Pin = RADIO_SPI_SCK_PIN;
 8003dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RADIO_SPI_SCK_PORT, &GPIO_InitStruct);
 8003de4:	f107 031c 	add.w	r3, r7, #28
 8003de8:	4619      	mov	r1, r3
 8003dea:	4826      	ldr	r0, [pc, #152]	; (8003e84 <HAL_SPI_MspInit+0x110>)
 8003dec:	f000 fcc8 	bl	8004780 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003df4:	2302      	movs	r3, #2
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = RADIO_SPI_MISO_AF;
 8003dfc:	2305      	movs	r3, #5
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    GPIO_InitStruct.Pin = RADIO_SPI_MISO_PIN;
 8003e00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RADIO_SPI_MISO_PORT, &GPIO_InitStruct);
 8003e06:	f107 031c 	add.w	r3, r7, #28
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	481e      	ldr	r0, [pc, #120]	; (8003e88 <HAL_SPI_MspInit+0x114>)
 8003e0e:	f000 fcb7 	bl	8004780 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Pin = RADIO_SPI_MOSI_PIN;
 8003e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RADIO_SPI_MOSI_PORT, &GPIO_InitStruct); 
 8003e18:	f107 031c 	add.w	r3, r7, #28
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	481a      	ldr	r0, [pc, #104]	; (8003e88 <HAL_SPI_MspInit+0x114>)
 8003e20:	f000 fcae 	bl	8004780 <HAL_GPIO_Init>
    
    RADIO_SPI_CS_CLOCK_ENABLE();
 8003e24:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
    
    /* Configure SPI pin: CS */
    GPIO_InitStruct.Pin = RADIO_SPI_CS_PIN;
 8003e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e42:	2301      	movs	r3, #1
 8003e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e46:	2301      	movs	r3, #1
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RADIO_SPI_CS_PORT, &GPIO_InitStruct);
 8003e4e:	f107 031c 	add.w	r3, r7, #28
 8003e52:	4619      	mov	r1, r3
 8003e54:	480b      	ldr	r0, [pc, #44]	; (8003e84 <HAL_SPI_MspInit+0x110>)
 8003e56:	f000 fc93 	bl	8004780 <HAL_GPIO_Init>
    
    RADIO_SPI_CLK_ENABLE();
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_SPI_MspInit+0x10c>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	68bb      	ldr	r3, [r7, #8]
  }
}
 8003e72:	bf00      	nop
 8003e74:	3730      	adds	r7, #48	; 0x30
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40003800 	.word	0x40003800
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40020000 	.word	0x40020000
 8003e88:	40020400 	.word	0x40020400

08003e8c <SPI_Write>:
* @brief  SPI Write a byte to device
* @param  Value: value to be written
* @retval None
*/
static void SPI_Write(uint8_t Value)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]
  
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8003e9a:	bf00      	nop
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <SPI_Write+0x44>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d1f8      	bne.n	8003e9c <SPI_Write+0x10>
  status = HAL_SPI_Transmit(&pSpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <SPI_Write+0x48>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1df9      	adds	r1, r7, #7
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4807      	ldr	r0, [pc, #28]	; (8003ed0 <SPI_Write+0x44>)
 8003eb4:	f001 fbca 	bl	800564c <HAL_SPI_Transmit>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if (status != HAL_OK)
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <SPI_Write+0x3a>
  {
    /* Execute user timeout callback */
    SPI_Error();
 8003ec2:	f000 f809 	bl	8003ed8 <SPI_Error>
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000204 	.word	0x20000204
 8003ed4:	200000d0 	.word	0x200000d0

08003ed8 <SPI_Error>:
* @brief  SPI error treatment function
* @param  None
* @retval None
*/
static void SPI_Error(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&pSpiHandle);
 8003edc:	4803      	ldr	r0, [pc, #12]	; (8003eec <SPI_Error+0x14>)
 8003ede:	f001 fb83 	bl	80055e8 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI communication BUS */
  RadioSpiInit();
 8003ee2:	f7ff ff0f 	bl	8003d04 <RadioSpiInit>
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000204 	.word	0x20000204

08003ef0 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08a      	sub	sp, #40	; 0x28
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	603a      	str	r2, [r7, #0]
 8003efa:	71fb      	strb	r3, [r7, #7]
 8003efc:	460b      	mov	r3, r1
 8003efe:	71bb      	strb	r3, [r7, #6]
  uint8_t aHeader[2] = {0};
 8003f00:	2300      	movs	r3, #0
 8003f02:	823b      	strh	r3, [r7, #16]
  uint16_t tmpstatus = 0x0000;
 8003f04:	2300      	movs	r3, #0
 8003f06:	81fb      	strh	r3, [r7, #14]
  
  StatusBytes *pStatus=(StatusBytes *)&tmpstatus;
 8003f08:	f107 030e 	add.w	r3, r7, #14
 8003f0c:	61bb      	str	r3, [r7, #24]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	743b      	strb	r3, [r7, #16]
  aHeader[1] = cRegAddress;
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	747b      	strb	r3, [r7, #17]
  
  SPI_ENTER_CRITICAL();
 8003f16:	2300      	movs	r3, #0
 8003f18:	2204      	movs	r2, #4
 8003f1a:	2104      	movs	r1, #4
 8003f1c:	2003      	movs	r0, #3
 8003f1e:	f7ff fe19 	bl	8003b54 <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 8003f22:	2200      	movs	r2, #0
 8003f24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f28:	4830      	ldr	r0, [pc, #192]	; (8003fec <RadioSpiWriteRegisters+0xfc>)
 8003f2a:	f000 fdd3 	bl	8004ad4 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8003f2e:	2300      	movs	r3, #0
 8003f30:	81bb      	strh	r3, [r7, #12]
 8003f32:	e004      	b.n	8003f3e <RadioSpiWriteRegisters+0x4e>
 8003f34:	89bb      	ldrh	r3, [r7, #12]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3301      	adds	r3, #1
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	81bb      	strh	r3, [r7, #12]
 8003f3e:	89bb      	ldrh	r3, [r7, #12]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f46:	d3f5      	bcc.n	8003f34 <RadioSpiWriteRegisters+0x44>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8003f48:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <RadioSpiWriteRegisters+0x100>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f107 020e 	add.w	r2, r7, #14
 8003f50:	f107 0110 	add.w	r1, r7, #16
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2301      	movs	r3, #1
 8003f58:	4826      	ldr	r0, [pc, #152]	; (8003ff4 <RadioSpiWriteRegisters+0x104>)
 8003f5a:	f001 fcdd 	bl	8005918 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 8003f5e:	89fb      	ldrh	r3, [r7, #14]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	81fb      	strh	r3, [r7, #14]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8003f66:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <RadioSpiWriteRegisters+0x100>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f107 000e 	add.w	r0, r7, #14
 8003f6e:	f107 0210 	add.w	r2, r7, #16
 8003f72:	1c51      	adds	r1, r2, #1
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2301      	movs	r3, #1
 8003f78:	4602      	mov	r2, r0
 8003f7a:	481e      	ldr	r0, [pc, #120]	; (8003ff4 <RadioSpiWriteRegisters+0x104>)
 8003f7c:	f001 fccc 	bl	8005918 <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	e009      	b.n	8003f9a <RadioSpiWriteRegisters+0xaa>
  {
    SPI_Write(pcBuffer[index]);
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ff7c 	bl	8003e8c <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3301      	adds	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	79bb      	ldrb	r3, [r7, #6]
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	dbf1      	blt.n	8003f86 <RadioSpiWriteRegisters+0x96>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8003fa2:	bf00      	nop
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <RadioSpiWriteRegisters+0x104>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d1f8      	bne.n	8003fa4 <RadioSpiWriteRegisters+0xb4>
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fb8:	480c      	ldr	r0, [pc, #48]	; (8003fec <RadioSpiWriteRegisters+0xfc>)
 8003fba:	f000 fd8b 	bl	8004ad4 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	2003      	movs	r0, #3
 8003fc6:	f7ff fdc5 	bl	8003b54 <RadioGpioInterruptCmd>
  
  return *pStatus;
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	8812      	ldrh	r2, [r2, #0]
 8003fd2:	801a      	strh	r2, [r3, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	7d3a      	ldrb	r2, [r7, #20]
 8003fd8:	f362 0307 	bfi	r3, r2, #0, #8
 8003fdc:	7d7a      	ldrb	r2, [r7, #21]
 8003fde:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40020000 	.word	0x40020000
 8003ff0:	200000d0 	.word	0x200000d0
 8003ff4:	20000204 	.word	0x20000204

08003ff8 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval StatusBytes
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	; 0x28
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	4603      	mov	r3, r0
 8004000:	603a      	str	r2, [r7, #0]
 8004002:	71fb      	strb	r3, [r7, #7]
 8004004:	460b      	mov	r3, r1
 8004006:	71bb      	strb	r3, [r7, #6]
  uint16_t tmpstatus = 0x00;
 8004008:	2300      	movs	r3, #0
 800400a:	827b      	strh	r3, [r7, #18]
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 800400c:	f107 0312 	add.w	r3, r7, #18
 8004010:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8004012:	2300      	movs	r3, #0
 8004014:	823b      	strh	r3, [r7, #16]
  uint8_t dummy = 0xFF;
 8004016:	23ff      	movs	r3, #255	; 0xff
 8004018:	73fb      	strb	r3, [r7, #15]
  
  /* Built the aHeader bytes */
  aHeader[0] = READ_HEADER;
 800401a:	2301      	movs	r3, #1
 800401c:	743b      	strb	r3, [r7, #16]
  aHeader[1] = cRegAddress;
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	747b      	strb	r3, [r7, #17]
  
  SPI_ENTER_CRITICAL();
 8004022:	2300      	movs	r3, #0
 8004024:	2204      	movs	r2, #4
 8004026:	2104      	movs	r1, #4
 8004028:	2003      	movs	r0, #3
 800402a:	f7ff fd93 	bl	8003b54 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 800402e:	2200      	movs	r2, #0
 8004030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004034:	4832      	ldr	r0, [pc, #200]	; (8004100 <RadioSpiReadRegisters+0x108>)
 8004036:	f000 fd4d 	bl	8004ad4 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 800403a:	2300      	movs	r3, #0
 800403c:	81bb      	strh	r3, [r7, #12]
 800403e:	e004      	b.n	800404a <RadioSpiReadRegisters+0x52>
 8004040:	89bb      	ldrh	r3, [r7, #12]
 8004042:	b29b      	uxth	r3, r3
 8004044:	3301      	adds	r3, #1
 8004046:	b29b      	uxth	r3, r3
 8004048:	81bb      	strh	r3, [r7, #12]
 800404a:	89bb      	ldrh	r3, [r7, #12]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004052:	d3f5      	bcc.n	8004040 <RadioSpiReadRegisters+0x48>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&(tmpstatus), 1, SpiTimeout);
 8004054:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <RadioSpiReadRegisters+0x10c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f107 0212 	add.w	r2, r7, #18
 800405c:	f107 0110 	add.w	r1, r7, #16
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	2301      	movs	r3, #1
 8004064:	4828      	ldr	r0, [pc, #160]	; (8004108 <RadioSpiReadRegisters+0x110>)
 8004066:	f001 fc57 	bl	8005918 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus << 8;  
 800406a:	8a7b      	ldrh	r3, [r7, #18]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b29b      	uxth	r3, r3
 8004070:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <RadioSpiReadRegisters+0x10c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f107 0012 	add.w	r0, r7, #18
 800407a:	f107 0210 	add.w	r2, r7, #16
 800407e:	1c51      	adds	r1, r2, #1
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2301      	movs	r3, #1
 8004084:	4602      	mov	r2, r0
 8004086:	4820      	ldr	r0, [pc, #128]	; (8004108 <RadioSpiReadRegisters+0x110>)
 8004088:	f001 fc46 	bl	8005918 <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 800408c:	2300      	movs	r3, #0
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	e00e      	b.n	80040b0 <RadioSpiReadRegisters+0xb8>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&(pcBuffer)[index], 1, SpiTimeout);
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	441a      	add	r2, r3
 8004098:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <RadioSpiReadRegisters+0x10c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f107 010f 	add.w	r1, r7, #15
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2301      	movs	r3, #1
 80040a4:	4818      	ldr	r0, [pc, #96]	; (8004108 <RadioSpiReadRegisters+0x110>)
 80040a6:	f001 fc37 	bl	8005918 <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	3301      	adds	r3, #1
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	79bb      	ldrb	r3, [r7, #6]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	dbec      	blt.n	8004092 <RadioSpiReadRegisters+0x9a>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 80040b8:	bf00      	nop
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <RadioSpiReadRegisters+0x110>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d1f8      	bne.n	80040ba <RadioSpiReadRegisters+0xc2>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 80040c8:	2201      	movs	r2, #1
 80040ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80040ce:	480c      	ldr	r0, [pc, #48]	; (8004100 <RadioSpiReadRegisters+0x108>)
 80040d0:	f000 fd00 	bl	8004ad4 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 80040d4:	2301      	movs	r3, #1
 80040d6:	2204      	movs	r2, #4
 80040d8:	2104      	movs	r1, #4
 80040da:	2003      	movs	r0, #3
 80040dc:	f7ff fd3a 	bl	8003b54 <RadioGpioInterruptCmd>
  
  return *pStatus;
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	8812      	ldrh	r2, [r2, #0]
 80040e8:	801a      	strh	r2, [r3, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	7d3a      	ldrb	r2, [r7, #20]
 80040ee:	f362 0307 	bfi	r3, r2, #0, #8
 80040f2:	7d7a      	ldrb	r2, [r7, #21]
 80040f4:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40020000 	.word	0x40020000
 8004104:	200000d0 	.word	0x200000d0
 8004108:	20000204 	.word	0x20000204

0800410c <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval StatusBytes
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af02      	add	r7, sp, #8
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
  uint8_t aHeader[2] = {0};
 8004116:	2300      	movs	r3, #0
 8004118:	81bb      	strh	r3, [r7, #12]
  uint16_t tmpstatus = 0x0000;
 800411a:	2300      	movs	r3, #0
 800411c:	817b      	strh	r3, [r7, #10]
  
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 800411e:	f107 030a 	add.w	r3, r7, #10
 8004122:	617b      	str	r3, [r7, #20]
  
  /* Built the aHeader bytes */
  aHeader[0] = COMMAND_HEADER;
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	733b      	strb	r3, [r7, #12]
  aHeader[1] = cCommandCode;
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	737b      	strb	r3, [r7, #13]
  
  SPI_ENTER_CRITICAL();
 800412c:	2300      	movs	r3, #0
 800412e:	2204      	movs	r2, #4
 8004130:	2104      	movs	r1, #4
 8004132:	2003      	movs	r0, #3
 8004134:	f7ff fd0e 	bl	8003b54 <RadioGpioInterruptCmd>
  
  /* Puts the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 8004138:	2200      	movs	r2, #0
 800413a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800413e:	4828      	ldr	r0, [pc, #160]	; (80041e0 <RadioSpiCommandStrobes+0xd4>)
 8004140:	f000 fcc8 	bl	8004ad4 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004144:	2300      	movs	r3, #0
 8004146:	813b      	strh	r3, [r7, #8]
 8004148:	e004      	b.n	8004154 <RadioSpiCommandStrobes+0x48>
 800414a:	893b      	ldrh	r3, [r7, #8]
 800414c:	b29b      	uxth	r3, r3
 800414e:	3301      	adds	r3, #1
 8004150:	b29b      	uxth	r3, r3
 8004152:	813b      	strh	r3, [r7, #8]
 8004154:	893b      	ldrh	r3, [r7, #8]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415c:	d3f5      	bcc.n	800414a <RadioSpiCommandStrobes+0x3e>
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800415e:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <RadioSpiCommandStrobes+0xd8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f107 020a 	add.w	r2, r7, #10
 8004166:	f107 010c 	add.w	r1, r7, #12
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	2301      	movs	r3, #1
 800416e:	481e      	ldr	r0, [pc, #120]	; (80041e8 <RadioSpiCommandStrobes+0xdc>)
 8004170:	f001 fbd2 	bl	8005918 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8004174:	897b      	ldrh	r3, [r7, #10]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	b29b      	uxth	r3, r3
 800417a:	817b      	strh	r3, [r7, #10]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800417c:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <RadioSpiCommandStrobes+0xd8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f107 000a 	add.w	r0, r7, #10
 8004184:	f107 020c 	add.w	r2, r7, #12
 8004188:	1c51      	adds	r1, r2, #1
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2301      	movs	r3, #1
 800418e:	4602      	mov	r2, r0
 8004190:	4815      	ldr	r0, [pc, #84]	; (80041e8 <RadioSpiCommandStrobes+0xdc>)
 8004192:	f001 fbc1 	bl	8005918 <HAL_SPI_TransmitReceive>
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 8004196:	bf00      	nop
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <RadioSpiCommandStrobes+0xdc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d1f8      	bne.n	8004198 <RadioSpiCommandStrobes+0x8c>
  
  /* Puts the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 80041a6:	2201      	movs	r2, #1
 80041a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041ac:	480c      	ldr	r0, [pc, #48]	; (80041e0 <RadioSpiCommandStrobes+0xd4>)
 80041ae:	f000 fc91 	bl	8004ad4 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 80041b2:	2301      	movs	r3, #1
 80041b4:	2204      	movs	r2, #4
 80041b6:	2104      	movs	r1, #4
 80041b8:	2003      	movs	r0, #3
 80041ba:	f7ff fccb 	bl	8003b54 <RadioGpioInterruptCmd>
  
  return *pStatus;
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	f107 0310 	add.w	r3, r7, #16
 80041c4:	8812      	ldrh	r2, [r2, #0]
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	2300      	movs	r3, #0
 80041ca:	7c3a      	ldrb	r2, [r7, #16]
 80041cc:	f362 0307 	bfi	r3, r2, #0, #8
 80041d0:	7c7a      	ldrb	r2, [r7, #17]
 80041d2:	f362 230f 	bfi	r3, r2, #8, #8
  
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40020000 	.word	0x40020000
 80041e4:	200000d0 	.word	0x200000d0
 80041e8:	20000204 	.word	0x20000204

080041ec <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval StatusBytes
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	71fb      	strb	r3, [r7, #7]
  uint16_t tmpstatus = 0x0000;
 80041f8:	2300      	movs	r3, #0
 80041fa:	827b      	strh	r3, [r7, #18]
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 80041fc:	f107 0312 	add.w	r3, r7, #18
 8004200:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2] = {0};
 8004202:	2300      	movs	r3, #0
 8004204:	823b      	strh	r3, [r7, #16]
  
  /* Built the aHeader bytes */
  aHeader[0] = WRITE_HEADER;
 8004206:	2300      	movs	r3, #0
 8004208:	743b      	strb	r3, [r7, #16]
  aHeader[1] = LINEAR_FIFO_ADDRESS;
 800420a:	23ff      	movs	r3, #255	; 0xff
 800420c:	747b      	strb	r3, [r7, #17]
  
  SPI_ENTER_CRITICAL();
 800420e:	2300      	movs	r3, #0
 8004210:	2204      	movs	r2, #4
 8004212:	2104      	movs	r1, #4
 8004214:	2003      	movs	r0, #3
 8004216:	f7ff fc9d 	bl	8003b54 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 800421a:	2200      	movs	r2, #0
 800421c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004220:	4830      	ldr	r0, [pc, #192]	; (80042e4 <RadioSpiWriteFifo+0xf8>)
 8004222:	f000 fc57 	bl	8004ad4 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 8004226:	2300      	movs	r3, #0
 8004228:	81fb      	strh	r3, [r7, #14]
 800422a:	e004      	b.n	8004236 <RadioSpiWriteFifo+0x4a>
 800422c:	89fb      	ldrh	r3, [r7, #14]
 800422e:	b29b      	uxth	r3, r3
 8004230:	3301      	adds	r3, #1
 8004232:	b29b      	uxth	r3, r3
 8004234:	81fb      	strh	r3, [r7, #14]
 8004236:	89fb      	ldrh	r3, [r7, #14]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423e:	d3f5      	bcc.n	800422c <RadioSpiWriteFifo+0x40>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004240:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <RadioSpiWriteFifo+0xfc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f107 0212 	add.w	r2, r7, #18
 8004248:	f107 0110 	add.w	r1, r7, #16
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	2301      	movs	r3, #1
 8004250:	4826      	ldr	r0, [pc, #152]	; (80042ec <RadioSpiWriteFifo+0x100>)
 8004252:	f001 fb61 	bl	8005918 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 8004256:	8a7b      	ldrh	r3, [r7, #18]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	b29b      	uxth	r3, r3
 800425c:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 800425e:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <RadioSpiWriteFifo+0xfc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f107 0012 	add.w	r0, r7, #18
 8004266:	f107 0210 	add.w	r2, r7, #16
 800426a:	1c51      	adds	r1, r2, #1
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	2301      	movs	r3, #1
 8004270:	4602      	mov	r2, r0
 8004272:	481e      	ldr	r0, [pc, #120]	; (80042ec <RadioSpiWriteFifo+0x100>)
 8004274:	f001 fb50 	bl	8005918 <HAL_SPI_TransmitReceive>
  
  /* Writes the registers according to the number of bytes */
  for (int index = 0; index < cNbBytes; index++)
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e009      	b.n	8004292 <RadioSpiWriteFifo+0xa6>
  {
    SPI_Write(pcBuffer[index]);
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	4413      	add	r3, r2
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fe00 	bl	8003e8c <SPI_Write>
  for (int index = 0; index < cNbBytes; index++)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	3301      	adds	r3, #1
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	429a      	cmp	r2, r3
 8004298:	dbf1      	blt.n	800427e <RadioSpiWriteFifo+0x92>
  }
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while (__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET); 
 800429a:	bf00      	nop
 800429c:	4b13      	ldr	r3, [pc, #76]	; (80042ec <RadioSpiWriteFifo+0x100>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d1f8      	bne.n	800429c <RadioSpiWriteFifo+0xb0>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 80042aa:	2201      	movs	r2, #1
 80042ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042b0:	480c      	ldr	r0, [pc, #48]	; (80042e4 <RadioSpiWriteFifo+0xf8>)
 80042b2:	f000 fc0f 	bl	8004ad4 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 80042b6:	2301      	movs	r3, #1
 80042b8:	2204      	movs	r2, #4
 80042ba:	2104      	movs	r1, #4
 80042bc:	2003      	movs	r0, #3
 80042be:	f7ff fc49 	bl	8003b54 <RadioGpioInterruptCmd>
  
  return *pStatus; 
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	8812      	ldrh	r2, [r2, #0]
 80042ca:	801a      	strh	r2, [r3, #0]
 80042cc:	2300      	movs	r3, #0
 80042ce:	7d3a      	ldrb	r2, [r7, #20]
 80042d0:	f362 0307 	bfi	r3, r2, #0, #8
 80042d4:	7d7a      	ldrb	r2, [r7, #21]
 80042d6:	f362 230f 	bfi	r3, r2, #8, #8
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40020000 	.word	0x40020000
 80042e8:	200000d0 	.word	0x200000d0
 80042ec:	20000204 	.word	0x20000204

080042f0 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval StatusBytes
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	4603      	mov	r3, r0
 80042f8:	6039      	str	r1, [r7, #0]
 80042fa:	71fb      	strb	r3, [r7, #7]
  uint16_t tmpstatus = 0x0000;
 80042fc:	2300      	movs	r3, #0
 80042fe:	827b      	strh	r3, [r7, #18]
  StatusBytes *pStatus = (StatusBytes *)&tmpstatus;
 8004300:	f107 0312 	add.w	r3, r7, #18
 8004304:	61bb      	str	r3, [r7, #24]
  
  uint8_t aHeader[2];
  uint8_t dummy=0xFF;
 8004306:	23ff      	movs	r3, #255	; 0xff
 8004308:	73fb      	strb	r3, [r7, #15]
  
  /* Built the aHeader bytes */
  aHeader[0]=READ_HEADER;
 800430a:	2301      	movs	r3, #1
 800430c:	743b      	strb	r3, [r7, #16]
  aHeader[1]=LINEAR_FIFO_ADDRESS;
 800430e:	23ff      	movs	r3, #255	; 0xff
 8004310:	747b      	strb	r3, [r7, #17]
  
  SPI_ENTER_CRITICAL();
 8004312:	2300      	movs	r3, #0
 8004314:	2204      	movs	r2, #4
 8004316:	2104      	movs	r1, #4
 8004318:	2003      	movs	r0, #3
 800431a:	f7ff fc1b 	bl	8003b54 <RadioGpioInterruptCmd>
  
  /* Put the SPI chip select low to start the transaction */
  RadioSpiCSLow();
 800431e:	2200      	movs	r2, #0
 8004320:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004324:	4832      	ldr	r0, [pc, #200]	; (80043f0 <RadioSpiReadFifo+0x100>)
 8004326:	f000 fbd5 	bl	8004ad4 <HAL_GPIO_WritePin>
  
  for (volatile uint16_t Index = 0; Index < CS_TO_SCLK_DELAY; Index++);
 800432a:	2300      	movs	r3, #0
 800432c:	81bb      	strh	r3, [r7, #12]
 800432e:	e004      	b.n	800433a <RadioSpiReadFifo+0x4a>
 8004330:	89bb      	ldrh	r3, [r7, #12]
 8004332:	b29b      	uxth	r3, r3
 8004334:	3301      	adds	r3, #1
 8004336:	b29b      	uxth	r3, r3
 8004338:	81bb      	strh	r3, [r7, #12]
 800433a:	89bb      	ldrh	r3, [r7, #12]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004342:	d3f5      	bcc.n	8004330 <RadioSpiReadFifo+0x40>
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[0], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004344:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <RadioSpiReadFifo+0x104>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f107 0212 	add.w	r2, r7, #18
 800434c:	f107 0110 	add.w	r1, r7, #16
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2301      	movs	r3, #1
 8004354:	4828      	ldr	r0, [pc, #160]	; (80043f8 <RadioSpiReadFifo+0x108>)
 8004356:	f001 fadf 	bl	8005918 <HAL_SPI_TransmitReceive>
  tmpstatus = tmpstatus<<8;  
 800435a:	8a7b      	ldrh	r3, [r7, #18]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	b29b      	uxth	r3, r3
 8004360:	827b      	strh	r3, [r7, #18]
  
  /* Write the aHeader bytes and read the SPIRIT1 status bytes */
  HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&aHeader[1], (uint8_t *)&tmpstatus, 1, SpiTimeout);
 8004362:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <RadioSpiReadFifo+0x104>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f107 0012 	add.w	r0, r7, #18
 800436a:	f107 0210 	add.w	r2, r7, #16
 800436e:	1c51      	adds	r1, r2, #1
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	2301      	movs	r3, #1
 8004374:	4602      	mov	r2, r0
 8004376:	4820      	ldr	r0, [pc, #128]	; (80043f8 <RadioSpiReadFifo+0x108>)
 8004378:	f001 face 	bl	8005918 <HAL_SPI_TransmitReceive>
  
  for (int index = 0; index < cNbBytes; index++)
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e00e      	b.n	80043a0 <RadioSpiReadFifo+0xb0>
  { 
    HAL_SPI_TransmitReceive(&pSpiHandle, (uint8_t *)&dummy, (uint8_t *)&pcBuffer[index], 1, SpiTimeout);
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	441a      	add	r2, r3
 8004388:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <RadioSpiReadFifo+0x104>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f107 010f 	add.w	r1, r7, #15
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	2301      	movs	r3, #1
 8004394:	4818      	ldr	r0, [pc, #96]	; (80043f8 <RadioSpiReadFifo+0x108>)
 8004396:	f001 fabf 	bl	8005918 <HAL_SPI_TransmitReceive>
  for (int index = 0; index < cNbBytes; index++)
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3301      	adds	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	dbec      	blt.n	8004382 <RadioSpiReadFifo+0x92>
  } 
  
  /* To be sure to don't rise the Chip Select before the end of last sending */
  while(__HAL_SPI_GET_FLAG(&pSpiHandle, SPI_FLAG_TXE) == RESET);
 80043a8:	bf00      	nop
 80043aa:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <RadioSpiReadFifo+0x108>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d1f8      	bne.n	80043aa <RadioSpiReadFifo+0xba>
  
  /* Put the SPI chip select high to end the transaction */
  RadioSpiCSHigh();
 80043b8:	2201      	movs	r2, #1
 80043ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043be:	480c      	ldr	r0, [pc, #48]	; (80043f0 <RadioSpiReadFifo+0x100>)
 80043c0:	f000 fb88 	bl	8004ad4 <HAL_GPIO_WritePin>
  
  SPI_EXIT_CRITICAL();
 80043c4:	2301      	movs	r3, #1
 80043c6:	2204      	movs	r2, #4
 80043c8:	2104      	movs	r1, #4
 80043ca:	2003      	movs	r0, #3
 80043cc:	f7ff fbc2 	bl	8003b54 <RadioGpioInterruptCmd>
  
  return *pStatus;  
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	f107 0314 	add.w	r3, r7, #20
 80043d6:	8812      	ldrh	r2, [r2, #0]
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	2300      	movs	r3, #0
 80043dc:	7d3a      	ldrb	r2, [r7, #20]
 80043de:	f362 0307 	bfi	r3, r2, #0, #8
 80043e2:	7d7a      	ldrb	r2, [r7, #21]
 80043e4:	f362 230f 	bfi	r3, r2, #8, #8
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40020000 	.word	0x40020000
 80043f4:	200000d0 	.word	0x200000d0
 80043f8:	20000204 	.word	0x20000204

080043fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004400:	2003      	movs	r0, #3
 8004402:	f000 f96d 	bl	80046e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004406:	2000      	movs	r0, #0
 8004408:	f000 f806 	bl	8004418 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800440c:	f7fc fcf6 	bl	8000dfc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_InitTick+0x54>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_InitTick+0x58>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	4619      	mov	r1, r3
 800442a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800442e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f995 	bl	8004766 <HAL_SYSTICK_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e00e      	b.n	8004464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b0f      	cmp	r3, #15
 800444a:	d80a      	bhi.n	8004462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800444c:	2200      	movs	r2, #0
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004454:	f000 f94f 	bl	80046f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004458:	4a06      	ldr	r2, [pc, #24]	; (8004474 <HAL_InitTick+0x5c>)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	200000b0 	.word	0x200000b0
 8004470:	200000d8 	.word	0x200000d8
 8004474:	200000d4 	.word	0x200000d4

08004478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <HAL_IncTick+0x20>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_IncTick+0x24>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4413      	add	r3, r2
 8004488:	4a04      	ldr	r2, [pc, #16]	; (800449c <HAL_IncTick+0x24>)
 800448a:	6013      	str	r3, [r2, #0]
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	200000d8 	.word	0x200000d8
 800449c:	20000268 	.word	0x20000268

080044a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return uwTick;
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <HAL_GetTick+0x14>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000268 	.word	0x20000268

080044b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044c0:	f7ff ffee 	bl	80044a0 <HAL_GetTick>
 80044c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044d0:	d005      	beq.n	80044de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044d2:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <HAL_Delay+0x40>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044de:	bf00      	nop
 80044e0:	f7ff ffde 	bl	80044a0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d8f7      	bhi.n	80044e0 <HAL_Delay+0x28>
  {
  }
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	200000d8 	.word	0x200000d8

080044fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <__NVIC_SetPriorityGrouping+0x40>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004518:	4013      	ands	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <__NVIC_SetPriorityGrouping+0x44>)
 8004526:	4313      	orrs	r3, r2
 8004528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800452a:	4a04      	ldr	r2, [pc, #16]	; (800453c <__NVIC_SetPriorityGrouping+0x40>)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	60d3      	str	r3, [r2, #12]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000ed00 	.word	0xe000ed00
 8004540:	05fa0000 	.word	0x05fa0000

08004544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <__NVIC_GetPriorityGrouping+0x18>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	0a1b      	lsrs	r3, r3, #8
 800454e:	f003 0307 	and.w	r3, r3, #7
}
 8004552:	4618      	mov	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	2b00      	cmp	r3, #0
 8004570:	db0b      	blt.n	800458a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	f003 021f 	and.w	r2, r3, #31
 8004578:	4907      	ldr	r1, [pc, #28]	; (8004598 <__NVIC_EnableIRQ+0x38>)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	2001      	movs	r0, #1
 8004582:	fa00 f202 	lsl.w	r2, r0, r2
 8004586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	e000e100 	.word	0xe000e100

0800459c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	db10      	blt.n	80045d0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	f003 021f 	and.w	r2, r3, #31
 80045b4:	4909      	ldr	r1, [pc, #36]	; (80045dc <__NVIC_DisableIRQ+0x40>)
 80045b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	2001      	movs	r0, #1
 80045be:	fa00 f202 	lsl.w	r2, r0, r2
 80045c2:	3320      	adds	r3, #32
 80045c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000e100 	.word	0xe000e100

080045e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	6039      	str	r1, [r7, #0]
 80045ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db0a      	blt.n	800460a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	490c      	ldr	r1, [pc, #48]	; (800462c <__NVIC_SetPriority+0x4c>)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	0112      	lsls	r2, r2, #4
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	440b      	add	r3, r1
 8004604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004608:	e00a      	b.n	8004620 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	4908      	ldr	r1, [pc, #32]	; (8004630 <__NVIC_SetPriority+0x50>)
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	3b04      	subs	r3, #4
 8004618:	0112      	lsls	r2, r2, #4
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	440b      	add	r3, r1
 800461e:	761a      	strb	r2, [r3, #24]
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000e100 	.word	0xe000e100
 8004630:	e000ed00 	.word	0xe000ed00

08004634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004634:	b480      	push	{r7}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f1c3 0307 	rsb	r3, r3, #7
 800464e:	2b04      	cmp	r3, #4
 8004650:	bf28      	it	cs
 8004652:	2304      	movcs	r3, #4
 8004654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3304      	adds	r3, #4
 800465a:	2b06      	cmp	r3, #6
 800465c:	d902      	bls.n	8004664 <NVIC_EncodePriority+0x30>
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3b03      	subs	r3, #3
 8004662:	e000      	b.n	8004666 <NVIC_EncodePriority+0x32>
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43da      	mvns	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	401a      	ands	r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800467c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	43d9      	mvns	r1, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800468c:	4313      	orrs	r3, r2
         );
}
 800468e:	4618      	mov	r0, r3
 8004690:	3724      	adds	r7, #36	; 0x24
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
	...

0800469c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ac:	d301      	bcc.n	80046b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b2:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <SysTick_Config+0x40>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ba:	210f      	movs	r1, #15
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c0:	f7ff ff8e 	bl	80045e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <SysTick_Config+0x40>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <SysTick_Config+0x40>)
 80046cc:	2207      	movs	r2, #7
 80046ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	e000e010 	.word	0xe000e010

080046e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ff07 	bl	80044fc <__NVIC_SetPriorityGrouping>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	4603      	mov	r3, r0
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004708:	f7ff ff1c 	bl	8004544 <__NVIC_GetPriorityGrouping>
 800470c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	f7ff ff8e 	bl	8004634 <NVIC_EncodePriority>
 8004718:	4602      	mov	r2, r0
 800471a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff ff5d 	bl	80045e0 <__NVIC_SetPriority>
}
 8004726:	bf00      	nop
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	4603      	mov	r3, r0
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff0f 	bl	8004560 <__NVIC_EnableIRQ>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	4603      	mov	r3, r0
 8004752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff1f 	bl	800459c <__NVIC_DisableIRQ>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff94 	bl	800469c <SysTick_Config>
 8004774:	4603      	mov	r3, r0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	e175      	b.n	8004a8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047a0:	2201      	movs	r2, #1
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	f040 8164 	bne.w	8004a86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d00b      	beq.n	80047de <HAL_GPIO_Init+0x5e>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d007      	beq.n	80047de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047d2:	2b11      	cmp	r3, #17
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b12      	cmp	r3, #18
 80047dc:	d130      	bne.n	8004840 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	2203      	movs	r2, #3
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4013      	ands	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4313      	orrs	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004814:	2201      	movs	r2, #1
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 0201 	and.w	r2, r3, #1
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	2203      	movs	r2, #3
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d003      	beq.n	8004880 <HAL_GPIO_Init+0x100>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b12      	cmp	r3, #18
 800487e:	d123      	bne.n	80048c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	08da      	lsrs	r2, r3, #3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3208      	adds	r2, #8
 8004888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	220f      	movs	r2, #15
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	08da      	lsrs	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3208      	adds	r2, #8
 80048c2:	69b9      	ldr	r1, [r7, #24]
 80048c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	2203      	movs	r2, #3
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 0203 	and.w	r2, r3, #3
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80be 	beq.w	8004a86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800490a:	4b65      	ldr	r3, [pc, #404]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	4a64      	ldr	r2, [pc, #400]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 8004910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004914:	6453      	str	r3, [r2, #68]	; 0x44
 8004916:	4b62      	ldr	r3, [pc, #392]	; (8004aa0 <HAL_GPIO_Init+0x320>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004922:	4a60      	ldr	r2, [pc, #384]	; (8004aa4 <HAL_GPIO_Init+0x324>)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	3302      	adds	r3, #2
 800492a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	220f      	movs	r2, #15
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4013      	ands	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a57      	ldr	r2, [pc, #348]	; (8004aa8 <HAL_GPIO_Init+0x328>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d037      	beq.n	80049be <HAL_GPIO_Init+0x23e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a56      	ldr	r2, [pc, #344]	; (8004aac <HAL_GPIO_Init+0x32c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d031      	beq.n	80049ba <HAL_GPIO_Init+0x23a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a55      	ldr	r2, [pc, #340]	; (8004ab0 <HAL_GPIO_Init+0x330>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02b      	beq.n	80049b6 <HAL_GPIO_Init+0x236>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a54      	ldr	r2, [pc, #336]	; (8004ab4 <HAL_GPIO_Init+0x334>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d025      	beq.n	80049b2 <HAL_GPIO_Init+0x232>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a53      	ldr	r2, [pc, #332]	; (8004ab8 <HAL_GPIO_Init+0x338>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01f      	beq.n	80049ae <HAL_GPIO_Init+0x22e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a52      	ldr	r2, [pc, #328]	; (8004abc <HAL_GPIO_Init+0x33c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d019      	beq.n	80049aa <HAL_GPIO_Init+0x22a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a51      	ldr	r2, [pc, #324]	; (8004ac0 <HAL_GPIO_Init+0x340>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <HAL_GPIO_Init+0x226>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a50      	ldr	r2, [pc, #320]	; (8004ac4 <HAL_GPIO_Init+0x344>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00d      	beq.n	80049a2 <HAL_GPIO_Init+0x222>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a4f      	ldr	r2, [pc, #316]	; (8004ac8 <HAL_GPIO_Init+0x348>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d007      	beq.n	800499e <HAL_GPIO_Init+0x21e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a4e      	ldr	r2, [pc, #312]	; (8004acc <HAL_GPIO_Init+0x34c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d101      	bne.n	800499a <HAL_GPIO_Init+0x21a>
 8004996:	2309      	movs	r3, #9
 8004998:	e012      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 800499a:	230a      	movs	r3, #10
 800499c:	e010      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 800499e:	2308      	movs	r3, #8
 80049a0:	e00e      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049a2:	2307      	movs	r3, #7
 80049a4:	e00c      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049a6:	2306      	movs	r3, #6
 80049a8:	e00a      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049aa:	2305      	movs	r3, #5
 80049ac:	e008      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049ae:	2304      	movs	r3, #4
 80049b0:	e006      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049b2:	2303      	movs	r3, #3
 80049b4:	e004      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e002      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049be:	2300      	movs	r3, #0
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	f002 0203 	and.w	r2, r2, #3
 80049c6:	0092      	lsls	r2, r2, #2
 80049c8:	4093      	lsls	r3, r2
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80049d0:	4934      	ldr	r1, [pc, #208]	; (8004aa4 <HAL_GPIO_Init+0x324>)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	3302      	adds	r3, #2
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049de:	4b3c      	ldr	r3, [pc, #240]	; (8004ad0 <HAL_GPIO_Init+0x350>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a02:	4a33      	ldr	r2, [pc, #204]	; (8004ad0 <HAL_GPIO_Init+0x350>)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a08:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <HAL_GPIO_Init+0x350>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a2c:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <HAL_GPIO_Init+0x350>)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a32:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <HAL_GPIO_Init+0x350>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a56:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <HAL_GPIO_Init+0x350>)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_GPIO_Init+0x350>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a80:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <HAL_GPIO_Init+0x350>)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	f67f ae86 	bls.w	80047a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004a94:	bf00      	nop
 8004a96:	3724      	adds	r7, #36	; 0x24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40013800 	.word	0x40013800
 8004aa8:	40020000 	.word	0x40020000
 8004aac:	40020400 	.word	0x40020400
 8004ab0:	40020800 	.word	0x40020800
 8004ab4:	40020c00 	.word	0x40020c00
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40021400 	.word	0x40021400
 8004ac0:	40021800 	.word	0x40021800
 8004ac4:	40021c00 	.word	0x40021c00
 8004ac8:	40022000 	.word	0x40022000
 8004acc:	40022400 	.word	0x40022400
 8004ad0:	40013c00 	.word	0x40013c00

08004ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	807b      	strh	r3, [r7, #2]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ae4:	787b      	ldrb	r3, [r7, #1]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aea:	887a      	ldrh	r2, [r7, #2]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004af0:	e003      	b.n	8004afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004af2:	887b      	ldrh	r3, [r7, #2]
 8004af4:	041a      	lsls	r2, r3, #16
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	619a      	str	r2, [r3, #24]
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d004      	beq.n	8004b28 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	041a      	lsls	r2, r3, #16
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004b26:	e002      	b.n	8004b2e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b28:	887a      	ldrh	r2, [r7, #2]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	619a      	str	r2, [r3, #24]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b48:	695a      	ldr	r2, [r3, #20]
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d006      	beq.n	8004b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b52:	4a05      	ldr	r2, [pc, #20]	; (8004b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b54:	88fb      	ldrh	r3, [r7, #6]
 8004b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fc f880 	bl	8000c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40013c00 	.word	0x40013c00

08004b6c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40007000 	.word	0x40007000

08004b8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	4b23      	ldr	r3, [pc, #140]	; (8004c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba2:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bae:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bba:	f7ff fc71 	bl	80044a0 <HAL_GetTick>
 8004bbe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bc0:	e009      	b.n	8004bd6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bc2:	f7ff fc6d 	bl	80044a0 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd0:	d901      	bls.n	8004bd6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e022      	b.n	8004c1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bd6:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be2:	d1ee      	bne.n	8004bc2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004be4:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a0f      	ldr	r2, [pc, #60]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bf0:	f7ff fc56 	bl	80044a0 <HAL_GetTick>
 8004bf4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bf6:	e009      	b.n	8004c0c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bf8:	f7ff fc52 	bl	80044a0 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c06:	d901      	bls.n	8004c0c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e007      	b.n	8004c1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c18:	d1ee      	bne.n	8004bf8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40007000 	.word	0x40007000

08004c2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c34:	2300      	movs	r3, #0
 8004c36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e29b      	b.n	800517a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8087 	beq.w	8004d5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c50:	4b96      	ldr	r3, [pc, #600]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d00c      	beq.n	8004c76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c5c:	4b93      	ldr	r3, [pc, #588]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d112      	bne.n	8004c8e <HAL_RCC_OscConfig+0x62>
 8004c68:	4b90      	ldr	r3, [pc, #576]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c74:	d10b      	bne.n	8004c8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c76:	4b8d      	ldr	r3, [pc, #564]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d06c      	beq.n	8004d5c <HAL_RCC_OscConfig+0x130>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d168      	bne.n	8004d5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e275      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c96:	d106      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x7a>
 8004c98:	4b84      	ldr	r3, [pc, #528]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a83      	ldr	r2, [pc, #524]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e02e      	b.n	8004d04 <HAL_RCC_OscConfig+0xd8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x9c>
 8004cae:	4b7f      	ldr	r3, [pc, #508]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a7e      	ldr	r2, [pc, #504]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b7c      	ldr	r3, [pc, #496]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7b      	ldr	r2, [pc, #492]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e01d      	b.n	8004d04 <HAL_RCC_OscConfig+0xd8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0xc0>
 8004cd2:	4b76      	ldr	r3, [pc, #472]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a75      	ldr	r2, [pc, #468]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4b73      	ldr	r3, [pc, #460]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a72      	ldr	r2, [pc, #456]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0xd8>
 8004cec:	4b6f      	ldr	r3, [pc, #444]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6e      	ldr	r2, [pc, #440]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b6c      	ldr	r3, [pc, #432]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6b      	ldr	r2, [pc, #428]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7ff fbc8 	bl	80044a0 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d14:	f7ff fbc4 	bl	80044a0 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e229      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	4b61      	ldr	r3, [pc, #388]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0xe8>
 8004d32:	e014      	b.n	8004d5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7ff fbb4 	bl	80044a0 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7ff fbb0 	bl	80044a0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	; 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e215      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	4b57      	ldr	r3, [pc, #348]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x110>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d069      	beq.n	8004e3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d6a:	4b50      	ldr	r3, [pc, #320]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d76:	4b4d      	ldr	r3, [pc, #308]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d11c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x190>
 8004d82:	4b4a      	ldr	r3, [pc, #296]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d116      	bne.n	8004dbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	4b47      	ldr	r3, [pc, #284]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x17a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e1e9      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da6:	4b41      	ldr	r3, [pc, #260]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	493d      	ldr	r1, [pc, #244]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dba:	e040      	b.n	8004e3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d023      	beq.n	8004e0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc4:	4b39      	ldr	r3, [pc, #228]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a38      	ldr	r2, [pc, #224]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7ff fb66 	bl	80044a0 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd8:	f7ff fb62 	bl	80044a0 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e1c7      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dea:	4b30      	ldr	r3, [pc, #192]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df6:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4929      	ldr	r1, [pc, #164]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]
 8004e0a:	e018      	b.n	8004e3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0c:	4b27      	ldr	r3, [pc, #156]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a26      	ldr	r2, [pc, #152]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7ff fb42 	bl	80044a0 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e20:	f7ff fb3e 	bl	80044a0 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e1a3      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e32:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d038      	beq.n	8004ebc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d019      	beq.n	8004e86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e52:	4b16      	ldr	r3, [pc, #88]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e56:	4a15      	ldr	r2, [pc, #84]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5e:	f7ff fb1f 	bl	80044a0 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e66:	f7ff fb1b 	bl	80044a0 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e180      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x23a>
 8004e84:	e01a      	b.n	8004ebc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8a:	4a08      	ldr	r2, [pc, #32]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7ff fb05 	bl	80044a0 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9a:	f7ff fb01 	bl	80044a0 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d903      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e166      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
 8004eac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb0:	4b92      	ldr	r3, [pc, #584]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ee      	bne.n	8004e9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80a4 	beq.w	8005012 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eca:	4b8c      	ldr	r3, [pc, #560]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10d      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed6:	4b89      	ldr	r3, [pc, #548]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	4a88      	ldr	r2, [pc, #544]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee2:	4b86      	ldr	r3, [pc, #536]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef2:	4b83      	ldr	r3, [pc, #524]	; (8005100 <HAL_RCC_OscConfig+0x4d4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d118      	bne.n	8004f30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004efe:	4b80      	ldr	r3, [pc, #512]	; (8005100 <HAL_RCC_OscConfig+0x4d4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7f      	ldr	r2, [pc, #508]	; (8005100 <HAL_RCC_OscConfig+0x4d4>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0a:	f7ff fac9 	bl	80044a0 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7ff fac5 	bl	80044a0 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b64      	cmp	r3, #100	; 0x64
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e12a      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f24:	4b76      	ldr	r3, [pc, #472]	; (8005100 <HAL_RCC_OscConfig+0x4d4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x31a>
 8004f38:	4b70      	ldr	r3, [pc, #448]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a6f      	ldr	r2, [pc, #444]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
 8004f44:	e02d      	b.n	8004fa2 <HAL_RCC_OscConfig+0x376>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x33c>
 8004f4e:	4b6b      	ldr	r3, [pc, #428]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a6a      	ldr	r2, [pc, #424]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	4b68      	ldr	r3, [pc, #416]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a67      	ldr	r2, [pc, #412]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	f023 0304 	bic.w	r3, r3, #4
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
 8004f66:	e01c      	b.n	8004fa2 <HAL_RCC_OscConfig+0x376>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b05      	cmp	r3, #5
 8004f6e:	d10c      	bne.n	8004f8a <HAL_RCC_OscConfig+0x35e>
 8004f70:	4b62      	ldr	r3, [pc, #392]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	4a61      	ldr	r2, [pc, #388]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f76:	f043 0304 	orr.w	r3, r3, #4
 8004f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7c:	4b5f      	ldr	r3, [pc, #380]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f80:	4a5e      	ldr	r2, [pc, #376]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6713      	str	r3, [r2, #112]	; 0x70
 8004f88:	e00b      	b.n	8004fa2 <HAL_RCC_OscConfig+0x376>
 8004f8a:	4b5c      	ldr	r3, [pc, #368]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	4a5b      	ldr	r2, [pc, #364]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	; 0x70
 8004f96:	4b59      	ldr	r3, [pc, #356]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a58      	ldr	r2, [pc, #352]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f9c:	f023 0304 	bic.w	r3, r3, #4
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d015      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7ff fa79 	bl	80044a0 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7ff fa75 	bl	80044a0 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e0d8      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc8:	4b4c      	ldr	r3, [pc, #304]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ee      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x386>
 8004fd4:	e014      	b.n	8005000 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd6:	f7ff fa63 	bl	80044a0 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7ff fa5f 	bl	80044a0 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e0c2      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff4:	4b41      	ldr	r3, [pc, #260]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1ee      	bne.n	8004fde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005000:	7dfb      	ldrb	r3, [r7, #23]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d105      	bne.n	8005012 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005006:	4b3d      	ldr	r3, [pc, #244]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	4a3c      	ldr	r2, [pc, #240]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 800500c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005010:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80ae 	beq.w	8005178 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800501c:	4b37      	ldr	r3, [pc, #220]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b08      	cmp	r3, #8
 8005026:	d06d      	beq.n	8005104 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d14b      	bne.n	80050c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005030:	4b32      	ldr	r3, [pc, #200]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a31      	ldr	r2, [pc, #196]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800503a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7ff fa30 	bl	80044a0 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7ff fa2c 	bl	80044a0 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e091      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005056:	4b29      	ldr	r3, [pc, #164]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69da      	ldr	r2, [r3, #28]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	085b      	lsrs	r3, r3, #1
 800507a:	3b01      	subs	r3, #1
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	071b      	lsls	r3, r3, #28
 800508e:	491b      	ldr	r1, [pc, #108]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b19      	ldr	r3, [pc, #100]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 800509a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800509e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7ff f9fe 	bl	80044a0 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a8:	f7ff f9fa 	bl	80044a0 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e05f      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x47c>
 80050c6:	e057      	b.n	8005178 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a0b      	ldr	r2, [pc, #44]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 80050ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7ff f9e4 	bl	80044a0 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7ff f9e0 	bl	80044a0 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e045      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ee:	4b03      	ldr	r3, [pc, #12]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x4b0>
 80050fa:	e03d      	b.n	8005178 <HAL_RCC_OscConfig+0x54c>
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005104:	4b1f      	ldr	r3, [pc, #124]	; (8005184 <HAL_RCC_OscConfig+0x558>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d030      	beq.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d129      	bne.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d122      	bne.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800513a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800513c:	4293      	cmp	r3, r2
 800513e:	d119      	bne.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	3b01      	subs	r3, #1
 800514e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005150:	429a      	cmp	r2, r3
 8005152:	d10f      	bne.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d107      	bne.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800

08005188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0d0      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a0:	4b6a      	ldr	r3, [pc, #424]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d910      	bls.n	80051d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b67      	ldr	r3, [pc, #412]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 020f 	bic.w	r2, r3, #15
 80051b6:	4965      	ldr	r1, [pc, #404]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b63      	ldr	r3, [pc, #396]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0b8      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e8:	4b59      	ldr	r3, [pc, #356]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a58      	ldr	r2, [pc, #352]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80051ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005200:	4b53      	ldr	r3, [pc, #332]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4a52      	ldr	r2, [pc, #328]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800520a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	494d      	ldr	r1, [pc, #308]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d040      	beq.n	80052ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d115      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e07f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d107      	bne.n	800525a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524a:	4b41      	ldr	r3, [pc, #260]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e073      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525a:	4b3d      	ldr	r3, [pc, #244]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e06b      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800526a:	4b39      	ldr	r3, [pc, #228]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f023 0203 	bic.w	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4936      	ldr	r1, [pc, #216]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800527c:	f7ff f910 	bl	80044a0 <HAL_GetTick>
 8005280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005282:	e00a      	b.n	800529a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005284:	f7ff f90c 	bl	80044a0 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005292:	4293      	cmp	r3, r2
 8005294:	d901      	bls.n	800529a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e053      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529a:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 020c 	and.w	r2, r3, #12
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d1eb      	bne.n	8005284 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052ac:	4b27      	ldr	r3, [pc, #156]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d210      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b24      	ldr	r3, [pc, #144]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 020f 	bic.w	r2, r3, #15
 80052c2:	4922      	ldr	r1, [pc, #136]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e032      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4916      	ldr	r1, [pc, #88]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	490e      	ldr	r1, [pc, #56]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800531a:	f000 f821 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 800531e:	4601      	mov	r1, r0
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	4a0a      	ldr	r2, [pc, #40]	; (8005354 <HAL_RCC_ClockConfig+0x1cc>)
 800532c:	5cd3      	ldrb	r3, [r2, r3]
 800532e:	fa21 f303 	lsr.w	r3, r1, r3
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_RCC_ClockConfig+0x1d0>)
 8005334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCC_ClockConfig+0x1d4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff f86c 	bl	8004418 <HAL_InitTick>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023c00 	.word	0x40023c00
 8005350:	40023800 	.word	0x40023800
 8005354:	080060a4 	.word	0x080060a4
 8005358:	200000b0 	.word	0x200000b0
 800535c:	200000d4 	.word	0x200000d4

08005360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	2300      	movs	r3, #0
 8005370:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005376:	4b50      	ldr	r3, [pc, #320]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	2b04      	cmp	r3, #4
 8005380:	d007      	beq.n	8005392 <HAL_RCC_GetSysClockFreq+0x32>
 8005382:	2b08      	cmp	r3, #8
 8005384:	d008      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x38>
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 808d 	bne.w	80054a6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800538c:	4b4b      	ldr	r3, [pc, #300]	; (80054bc <HAL_RCC_GetSysClockFreq+0x15c>)
 800538e:	60bb      	str	r3, [r7, #8]
      break;
 8005390:	e08c      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005392:	4b4b      	ldr	r3, [pc, #300]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005394:	60bb      	str	r3, [r7, #8]
      break;
 8005396:	e089      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005398:	4b47      	ldr	r3, [pc, #284]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053a0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053a2:	4b45      	ldr	r3, [pc, #276]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d023      	beq.n	80053f6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ae:	4b42      	ldr	r3, [pc, #264]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	099b      	lsrs	r3, r3, #6
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	ea03 0501 	and.w	r5, r3, r1
 80053c4:	ea04 0602 	and.w	r6, r4, r2
 80053c8:	4a3d      	ldr	r2, [pc, #244]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80053ca:	fb02 f106 	mul.w	r1, r2, r6
 80053ce:	2200      	movs	r2, #0
 80053d0:	fb02 f205 	mul.w	r2, r2, r5
 80053d4:	440a      	add	r2, r1
 80053d6:	493a      	ldr	r1, [pc, #232]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80053d8:	fba5 0101 	umull	r0, r1, r5, r1
 80053dc:	1853      	adds	r3, r2, r1
 80053de:	4619      	mov	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f04f 0400 	mov.w	r4, #0
 80053e6:	461a      	mov	r2, r3
 80053e8:	4623      	mov	r3, r4
 80053ea:	f7fa ff25 	bl	8000238 <__aeabi_uldivmod>
 80053ee:	4603      	mov	r3, r0
 80053f0:	460c      	mov	r4, r1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e049      	b.n	800548a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	099b      	lsrs	r3, r3, #6
 80053fc:	f04f 0400 	mov.w	r4, #0
 8005400:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	ea03 0501 	and.w	r5, r3, r1
 800540c:	ea04 0602 	and.w	r6, r4, r2
 8005410:	4629      	mov	r1, r5
 8005412:	4632      	mov	r2, r6
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	f04f 0400 	mov.w	r4, #0
 800541c:	0154      	lsls	r4, r2, #5
 800541e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005422:	014b      	lsls	r3, r1, #5
 8005424:	4619      	mov	r1, r3
 8005426:	4622      	mov	r2, r4
 8005428:	1b49      	subs	r1, r1, r5
 800542a:	eb62 0206 	sbc.w	r2, r2, r6
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	f04f 0400 	mov.w	r4, #0
 8005436:	0194      	lsls	r4, r2, #6
 8005438:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800543c:	018b      	lsls	r3, r1, #6
 800543e:	1a5b      	subs	r3, r3, r1
 8005440:	eb64 0402 	sbc.w	r4, r4, r2
 8005444:	f04f 0100 	mov.w	r1, #0
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	00e2      	lsls	r2, r4, #3
 800544e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005452:	00d9      	lsls	r1, r3, #3
 8005454:	460b      	mov	r3, r1
 8005456:	4614      	mov	r4, r2
 8005458:	195b      	adds	r3, r3, r5
 800545a:	eb44 0406 	adc.w	r4, r4, r6
 800545e:	f04f 0100 	mov.w	r1, #0
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	02a2      	lsls	r2, r4, #10
 8005468:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800546c:	0299      	lsls	r1, r3, #10
 800546e:	460b      	mov	r3, r1
 8005470:	4614      	mov	r4, r2
 8005472:	4618      	mov	r0, r3
 8005474:	4621      	mov	r1, r4
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f04f 0400 	mov.w	r4, #0
 800547c:	461a      	mov	r2, r3
 800547e:	4623      	mov	r3, r4
 8005480:	f7fa feda 	bl	8000238 <__aeabi_uldivmod>
 8005484:	4603      	mov	r3, r0
 8005486:	460c      	mov	r4, r1
 8005488:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800548a:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	0c1b      	lsrs	r3, r3, #16
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	3301      	adds	r3, #1
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a2:	60bb      	str	r3, [r7, #8]
      break;
 80054a4:	e002      	b.n	80054ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCC_GetSysClockFreq+0x15c>)
 80054a8:	60bb      	str	r3, [r7, #8]
      break;
 80054aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ac:	68bb      	ldr	r3, [r7, #8]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40023800 	.word	0x40023800
 80054bc:	00f42400 	.word	0x00f42400
 80054c0:	017d7840 	.word	0x017d7840

080054c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e084      	b.n	80055e0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d106      	bne.n	80054f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7fe fc3f 	bl	8003d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800550c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005516:	d902      	bls.n	800551e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	e002      	b.n	8005524 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800551e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005522:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800552c:	d007      	beq.n	800553e <HAL_SPI_Init+0x7a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005536:	d002      	beq.n	800553e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800554e:	d903      	bls.n	8005558 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
 8005556:	e002      	b.n	800555e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	ea42 0103 	orr.w	r1, r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	f003 0204 	and.w	r2, r3, #4
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	ea42 0103 	orr.w	r1, r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69da      	ldr	r2, [r3, #28]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e01a      	b.n	8005630 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005610:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f810 	bl	8005638 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	4613      	mov	r3, r2
 800565a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_SPI_Transmit+0x22>
 800566a:	2302      	movs	r3, #2
 800566c:	e150      	b.n	8005910 <HAL_SPI_Transmit+0x2c4>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005676:	f7fe ff13 	bl	80044a0 <HAL_GetTick>
 800567a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	d002      	beq.n	8005692 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800568c:	2302      	movs	r3, #2
 800568e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005690:	e135      	b.n	80058fe <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_SPI_Transmit+0x52>
 8005698:	88fb      	ldrh	r3, [r7, #6]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056a2:	e12c      	b.n	80058fe <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2203      	movs	r2, #3
 80056a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ee:	d107      	bne.n	8005700 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d007      	beq.n	800571e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800571c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005726:	d94b      	bls.n	80057c0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_SPI_Transmit+0xea>
 8005730:	8afb      	ldrh	r3, [r7, #22]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d13e      	bne.n	80057b4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	1c9a      	adds	r2, r3, #2
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800575a:	e02b      	b.n	80057b4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b02      	cmp	r3, #2
 8005768:	d112      	bne.n	8005790 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	881a      	ldrh	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	1c9a      	adds	r2, r3, #2
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800578e:	e011      	b.n	80057b4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005790:	f7fe fe86 	bl	80044a0 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	429a      	cmp	r2, r3
 800579e:	d803      	bhi.n	80057a8 <HAL_SPI_Transmit+0x15c>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a6:	d102      	bne.n	80057ae <HAL_SPI_Transmit+0x162>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057b2:	e0a4      	b.n	80058fe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1ce      	bne.n	800575c <HAL_SPI_Transmit+0x110>
 80057be:	e07c      	b.n	80058ba <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_SPI_Transmit+0x182>
 80057c8:	8afb      	ldrh	r3, [r7, #22]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d170      	bne.n	80058b0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d912      	bls.n	80057fe <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	881a      	ldrh	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	1c9a      	adds	r2, r3, #2
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b02      	subs	r3, #2
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057fc:	e058      	b.n	80058b0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	330c      	adds	r3, #12
 8005808:	7812      	ldrb	r2, [r2, #0]
 800580a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005824:	e044      	b.n	80058b0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b02      	cmp	r3, #2
 8005832:	d12b      	bne.n	800588c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b01      	cmp	r3, #1
 800583c:	d912      	bls.n	8005864 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	881a      	ldrh	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	1c9a      	adds	r2, r3, #2
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b02      	subs	r3, #2
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005862:	e025      	b.n	80058b0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	7812      	ldrb	r2, [r2, #0]
 8005870:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	87da      	strh	r2, [r3, #62]	; 0x3e
 800588a:	e011      	b.n	80058b0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800588c:	f7fe fe08 	bl	80044a0 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d803      	bhi.n	80058a4 <HAL_SPI_Transmit+0x258>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a2:	d102      	bne.n	80058aa <HAL_SPI_Transmit+0x25e>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058ae:	e026      	b.n	80058fe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1b5      	bne.n	8005826 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fb22 	bl	8005f08 <SPI_EndRxTxTransaction>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	613b      	str	r3, [r7, #16]
 80058ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	77fb      	strb	r3, [r7, #31]
 80058fa:	e000      	b.n	80058fe <HAL_SPI_Transmit+0x2b2>
  }

error:
 80058fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800590e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	; 0x28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005926:	2301      	movs	r3, #1
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_SPI_TransmitReceive+0x26>
 800593a:	2302      	movs	r3, #2
 800593c:	e1fb      	b.n	8005d36 <HAL_SPI_TransmitReceive+0x41e>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005946:	f7fe fdab 	bl	80044a0 <HAL_GetTick>
 800594a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005952:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800595a:	887b      	ldrh	r3, [r7, #2]
 800595c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800595e:	887b      	ldrh	r3, [r7, #2]
 8005960:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005962:	7efb      	ldrb	r3, [r7, #27]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d00e      	beq.n	8005986 <HAL_SPI_TransmitReceive+0x6e>
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800596e:	d106      	bne.n	800597e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d102      	bne.n	800597e <HAL_SPI_TransmitReceive+0x66>
 8005978:	7efb      	ldrb	r3, [r7, #27]
 800597a:	2b04      	cmp	r3, #4
 800597c:	d003      	beq.n	8005986 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800597e:	2302      	movs	r3, #2
 8005980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005984:	e1cd      	b.n	8005d22 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x80>
 8005992:	887b      	ldrh	r3, [r7, #2]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d103      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800599e:	e1c0      	b.n	8005d22 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d003      	beq.n	80059b4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2205      	movs	r2, #5
 80059b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	887a      	ldrh	r2, [r7, #2]
 80059c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	887a      	ldrh	r2, [r7, #2]
 80059cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	887a      	ldrh	r2, [r7, #2]
 80059da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	887a      	ldrh	r2, [r7, #2]
 80059e0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059f6:	d802      	bhi.n	80059fe <HAL_SPI_TransmitReceive+0xe6>
 80059f8:	8a3b      	ldrh	r3, [r7, #16]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d908      	bls.n	8005a10 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a0c:	605a      	str	r2, [r3, #4]
 8005a0e:	e007      	b.n	8005a20 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d007      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a46:	d97c      	bls.n	8005b42 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_SPI_TransmitReceive+0x13e>
 8005a50:	8a7b      	ldrh	r3, [r7, #18]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d169      	bne.n	8005b2a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	881a      	ldrh	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	1c9a      	adds	r2, r3, #2
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a7a:	e056      	b.n	8005b2a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d11b      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x1aa>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d016      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x1aa>
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d113      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	881a      	ldrh	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	1c9a      	adds	r2, r3, #2
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d11c      	bne.n	8005b0a <HAL_SPI_TransmitReceive+0x1f2>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d016      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	1c9a      	adds	r2, r3, #2
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b06:	2301      	movs	r3, #1
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b0a:	f7fe fcc9 	bl	80044a0 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d807      	bhi.n	8005b2a <HAL_SPI_TransmitReceive+0x212>
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b20:	d003      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b28:	e0fb      	b.n	8005d22 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1a3      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x164>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d19d      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x164>
 8005b40:	e0df      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_SPI_TransmitReceive+0x23a>
 8005b4a:	8a7b      	ldrh	r3, [r7, #18]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	f040 80cb 	bne.w	8005ce8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d912      	bls.n	8005b82 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	1c9a      	adds	r2, r3, #2
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b02      	subs	r3, #2
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b80:	e0b2      	b.n	8005ce8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	7812      	ldrb	r2, [r2, #0]
 8005b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ba8:	e09e      	b.n	8005ce8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d134      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x30a>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d02f      	beq.n	8005c22 <HAL_SPI_TransmitReceive+0x30a>
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d12c      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d912      	bls.n	8005bf8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	881a      	ldrh	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	1c9a      	adds	r2, r3, #2
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b02      	subs	r3, #2
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bf6:	e012      	b.n	8005c1e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	7812      	ldrb	r2, [r2, #0]
 8005c04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d148      	bne.n	8005cc2 <HAL_SPI_TransmitReceive+0x3aa>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d042      	beq.n	8005cc2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d923      	bls.n	8005c90 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	b292      	uxth	r2, r2
 8005c54:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	1c9a      	adds	r2, r3, #2
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b02      	subs	r3, #2
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d81f      	bhi.n	8005cbe <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	e016      	b.n	8005cbe <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f103 020c 	add.w	r2, r3, #12
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	7812      	ldrb	r2, [r2, #0]
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cc2:	f7fe fbed 	bl	80044a0 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d803      	bhi.n	8005cda <HAL_SPI_TransmitReceive+0x3c2>
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cd8:	d102      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x3c8>
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d103      	bne.n	8005ce8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ce6:	e01c      	b.n	8005d22 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f47f af5b 	bne.w	8005baa <HAL_SPI_TransmitReceive+0x292>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f47f af54 	bne.w	8005baa <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f8fe 	bl	8005f08 <SPI_EndRxTxTransaction>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d006      	beq.n	8005d20 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	661a      	str	r2, [r3, #96]	; 0x60
 8005d1e:	e000      	b.n	8005d22 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005d20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3728      	adds	r7, #40	; 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d4c:	b2db      	uxtb	r3, r3
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	4613      	mov	r3, r2
 8005d68:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d6a:	e04c      	b.n	8005e06 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d72:	d048      	beq.n	8005e06 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d74:	f7fe fb94 	bl	80044a0 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d902      	bls.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0x30>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d13d      	bne.n	8005e06 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da2:	d111      	bne.n	8005dc8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dac:	d004      	beq.n	8005db8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db6:	d107      	bne.n	8005dc8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd0:	d10f      	bne.n	8005df2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e00f      	b.n	8005e26 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	bf0c      	ite	eq
 8005e16:	2301      	moveq	r3, #1
 8005e18:	2300      	movne	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d1a3      	bne.n	8005d6c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e3c:	e057      	b.n	8005eee <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e44:	d106      	bne.n	8005e54 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d103      	bne.n	8005e54 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e5a:	d048      	beq.n	8005eee <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005e5c:	f7fe fb20 	bl	80044a0 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d902      	bls.n	8005e72 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d13d      	bne.n	8005eee <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8a:	d111      	bne.n	8005eb0 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e94:	d004      	beq.n	8005ea0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e9e:	d107      	bne.n	8005eb0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb8:	d10f      	bne.n	8005eda <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e008      	b.n	8005f00 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d19f      	bne.n	8005e3e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af02      	add	r7, sp, #8
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff ff84 	bl	8005e2e <SPI_WaitFifoStateUntilTimeout>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f30:	f043 0220 	orr.w	r2, r3, #32
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e027      	b.n	8005f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2200      	movs	r2, #0
 8005f44:	2180      	movs	r1, #128	; 0x80
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f7ff ff07 	bl	8005d5a <SPI_WaitFlagStateUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f56:	f043 0220 	orr.w	r2, r3, #32
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e014      	b.n	8005f8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff ff5d 	bl	8005e2e <SPI_WaitFifoStateUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e000      	b.n	8005f8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <__libc_init_array>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	4e0d      	ldr	r6, [pc, #52]	; (8005fcc <__libc_init_array+0x38>)
 8005f98:	4c0d      	ldr	r4, [pc, #52]	; (8005fd0 <__libc_init_array+0x3c>)
 8005f9a:	1ba4      	subs	r4, r4, r6
 8005f9c:	10a4      	asrs	r4, r4, #2
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	42a5      	cmp	r5, r4
 8005fa2:	d109      	bne.n	8005fb8 <__libc_init_array+0x24>
 8005fa4:	4e0b      	ldr	r6, [pc, #44]	; (8005fd4 <__libc_init_array+0x40>)
 8005fa6:	4c0c      	ldr	r4, [pc, #48]	; (8005fd8 <__libc_init_array+0x44>)
 8005fa8:	f000 f866 	bl	8006078 <_init>
 8005fac:	1ba4      	subs	r4, r4, r6
 8005fae:	10a4      	asrs	r4, r4, #2
 8005fb0:	2500      	movs	r5, #0
 8005fb2:	42a5      	cmp	r5, r4
 8005fb4:	d105      	bne.n	8005fc2 <__libc_init_array+0x2e>
 8005fb6:	bd70      	pop	{r4, r5, r6, pc}
 8005fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fbc:	4798      	blx	r3
 8005fbe:	3501      	adds	r5, #1
 8005fc0:	e7ee      	b.n	8005fa0 <__libc_init_array+0xc>
 8005fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fc6:	4798      	blx	r3
 8005fc8:	3501      	adds	r5, #1
 8005fca:	e7f2      	b.n	8005fb2 <__libc_init_array+0x1e>
 8005fcc:	08006260 	.word	0x08006260
 8005fd0:	08006260 	.word	0x08006260
 8005fd4:	08006260 	.word	0x08006260
 8005fd8:	08006264 	.word	0x08006264

08005fdc <memset>:
 8005fdc:	4402      	add	r2, r0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d100      	bne.n	8005fe6 <memset+0xa>
 8005fe4:	4770      	bx	lr
 8005fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fea:	e7f9      	b.n	8005fe0 <memset+0x4>

08005fec <round>:
 8005fec:	ee10 3a90 	vmov	r3, s1
 8005ff0:	b530      	push	{r4, r5, lr}
 8005ff2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8005ff6:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 8005ffa:	2913      	cmp	r1, #19
 8005ffc:	ee10 5a90 	vmov	r5, s1
 8006000:	ee10 2a10 	vmov	r2, s0
 8006004:	dc17      	bgt.n	8006036 <round+0x4a>
 8006006:	2900      	cmp	r1, #0
 8006008:	da09      	bge.n	800601e <round+0x32>
 800600a:	3101      	adds	r1, #1
 800600c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006010:	d103      	bne.n	800601a <round+0x2e>
 8006012:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006016:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800601a:	2200      	movs	r2, #0
 800601c:	e024      	b.n	8006068 <round+0x7c>
 800601e:	4815      	ldr	r0, [pc, #84]	; (8006074 <round+0x88>)
 8006020:	4108      	asrs	r0, r1
 8006022:	4203      	tst	r3, r0
 8006024:	d100      	bne.n	8006028 <round+0x3c>
 8006026:	b16a      	cbz	r2, 8006044 <round+0x58>
 8006028:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800602c:	410b      	asrs	r3, r1
 800602e:	442b      	add	r3, r5
 8006030:	ea23 0300 	bic.w	r3, r3, r0
 8006034:	e7f1      	b.n	800601a <round+0x2e>
 8006036:	2933      	cmp	r1, #51	; 0x33
 8006038:	dd05      	ble.n	8006046 <round+0x5a>
 800603a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800603e:	d101      	bne.n	8006044 <round+0x58>
 8006040:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006044:	bd30      	pop	{r4, r5, pc}
 8006046:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800604a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800604e:	40c4      	lsrs	r4, r0
 8006050:	4222      	tst	r2, r4
 8006052:	d0f7      	beq.n	8006044 <round+0x58>
 8006054:	2001      	movs	r0, #1
 8006056:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800605a:	fa00 f101 	lsl.w	r1, r0, r1
 800605e:	1852      	adds	r2, r2, r1
 8006060:	bf28      	it	cs
 8006062:	181b      	addcs	r3, r3, r0
 8006064:	ea22 0204 	bic.w	r2, r2, r4
 8006068:	4619      	mov	r1, r3
 800606a:	4610      	mov	r0, r2
 800606c:	ec41 0b10 	vmov	d0, r0, r1
 8006070:	e7e8      	b.n	8006044 <round+0x58>
 8006072:	bf00      	nop
 8006074:	000fffff 	.word	0x000fffff

08006078 <_init>:
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	bf00      	nop
 800607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607e:	bc08      	pop	{r3}
 8006080:	469e      	mov	lr, r3
 8006082:	4770      	bx	lr

08006084 <_fini>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr
